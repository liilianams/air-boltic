{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.1", "generated_at": "2025-06-26T18:08:31.286395Z", "invocation_id": "44827bcd-b537-48be-b936-b8b54fbc17c0", "invocation_started_at": "2025-06-26T14:09:57.341385+00:00", "env": {}, "project_name": "air_boltic", "project_id": "2dea201b78f2c8995b9e381730326757", "user_id": "922bea3e-889e-41f5-9d70-c1194b3a234f", "send_anonymous_usage_stats": true, "adapter_type": "databricks", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}}, "nodes": {"model.air_boltic.stg_airplanes": {"database": "workspace", "schema": "air_boltic", "name": "stg_airplanes", "resource_type": "model", "package_name": "air_boltic", "path": "staging/stg_airplanes.sql", "original_file_path": "models/staging/stg_airplanes.sql", "unique_id": "model.air_boltic.stg_airplanes", "fqn": ["air_boltic", "staging", "stg_airplanes"], "alias": "stg_airplanes", "checksum": {"name": "sha256", "checksum": "5c9b00afdccdcb759b52b087493bfc4e149c9dad28505abed2f828969a5c1474"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Staging model for airplanes", "columns": {"airplane_id": {"name": "airplane_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "model": {"name": "model", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manufacturer": {"name": "manufacturer", "description": "Assuming that since there are a limited number of manufacturers in the world, this can be treated as an enum. Treating it as an enum will also make joining this table with the stg_airplane_models table easier downstream.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.9964092, "relation_name": "`workspace`.`air_boltic`.`stg_airplanes`", "raw_code": "select\n  Airplane_ID as airplane_id,\n  upper(Airplane_Model) as model,\n  lower(Manufacturer) as manufacturer\nfrom {{ source('raw', 'aeroplanes') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "aeroplanes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.air_boltic.raw.aeroplanes"]}, "compiled_path": "target/compiled/air_boltic/models/staging/stg_airplanes.sql", "compiled": true, "compiled_code": "select\n  Airplane_ID as airplane_id,\n  upper(Airplane_Model) as model,\n  lower(Manufacturer) as manufacturer\nfrom `workspace`.`air_boltic_raw`.`aeroplanes`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["airplane_id"], "time_spine": null}, "model.air_boltic.stg_customers": {"database": "workspace", "schema": "air_boltic", "name": "stg_customers", "resource_type": "model", "package_name": "air_boltic", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "unique_id": "model.air_boltic.stg_customers", "fqn": ["air_boltic", "staging", "stg_customers"], "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "21fcd056a486f64b2874eef96fb23658dbff1fd735bd5daf08335999913bd1fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Staging model for customers", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_group_id": {"name": "customer_group_id", "description": "Foreign key to stg_customer_groups table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.99696, "relation_name": "`workspace`.`air_boltic`.`stg_customers`", "raw_code": "select\n  Customer_ID as customer_id,\n  Name as name,\n  Customer_Group_ID as customer_group_id,\n  Email as email,\n  Phone_Number as phone_number\nfrom {{ source('raw', 'customers') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.air_boltic.raw.customers"]}, "compiled_path": "target/compiled/air_boltic/models/staging/stg_customers.sql", "compiled": true, "compiled_code": "select\n  Customer_ID as customer_id,\n  Name as name,\n  Customer_Group_ID as customer_group_id,\n  Email as email,\n  Phone_Number as phone_number\nfrom `workspace`.`air_boltic_raw`.`customers`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.air_boltic.stg_airplane_models": {"database": "workspace", "schema": "air_boltic", "name": "stg_airplane_models", "resource_type": "model", "package_name": "air_boltic", "path": "staging/stg_airplane_models.sql", "original_file_path": "models/staging/stg_airplane_models.sql", "unique_id": "model.air_boltic.stg_airplane_models", "fqn": ["air_boltic", "staging", "stg_airplane_models"], "alias": "stg_airplane_models", "checksum": {"name": "sha256", "checksum": "a29a053b3e4c70bb3cd42de5e30ad83284139e81aefcb6cefd80076baf218a17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Staging model for airplane models", "columns": {"model": {"name": "model", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manufacturer": {"name": "manufacturer", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.995852, "relation_name": "`workspace`.`air_boltic`.`stg_airplane_models`", "raw_code": "select\n  lower(manufacturer) as manufacturer,\n  upper(model) as model,\n  max_seats::integer,\n  max_weight::integer,\n  max_distance::integer,\n  engine_type\nfrom {{ source('raw', 'aeroplane_models') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "aeroplane_models"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.air_boltic.raw.aeroplane_models"]}, "compiled_path": "target/compiled/air_boltic/models/staging/stg_airplane_models.sql", "compiled": true, "compiled_code": "select\n  lower(manufacturer) as manufacturer,\n  upper(model) as model,\n  max_seats::integer,\n  max_weight::integer,\n  max_distance::integer,\n  engine_type\nfrom `workspace`.`air_boltic_raw`.`aeroplane_models`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.stg_customer_groups": {"database": "workspace", "schema": "air_boltic", "name": "stg_customer_groups", "resource_type": "model", "package_name": "air_boltic", "path": "staging/stg_customer_groups.sql", "original_file_path": "models/staging/stg_customer_groups.sql", "unique_id": "model.air_boltic.stg_customer_groups", "fqn": ["air_boltic", "staging", "stg_customer_groups"], "alias": "stg_customer_groups", "checksum": {"name": "sha256", "checksum": "a4c5fff2e89e090933d689899192692c6fab0eded0aa96dee6e8ab2faa7e16b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Staging model for customer group", "columns": {"customer_group_id": {"name": "customer_group_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "Type of the group the customer belongs to.  Customers not belonging to a company, private group, or organisation are categorized as 'individual'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.9974232, "relation_name": "`workspace`.`air_boltic`.`stg_customer_groups`", "raw_code": "select\n  ID as customer_group_id,\n  Name as name,\n  case when Type = 'Unknown group' then 'individual' else lower(Type) end as type,\n  Registry_number as registry_number\nfrom {{ source('raw', 'customer_groups') }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "customer_groups"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.air_boltic.raw.customer_groups"]}, "compiled_path": "target/compiled/air_boltic/models/staging/stg_customer_groups.sql", "compiled": true, "compiled_code": "select\n  ID as customer_group_id,\n  Name as name,\n  case when Type = 'Unknown group' then 'individual' else lower(Type) end as type,\n  Registry_number as registry_number\nfrom `workspace`.`air_boltic_raw`.`customer_groups`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_group_id"], "time_spine": null}, "model.air_boltic.stg_orders": {"database": "workspace", "schema": "air_boltic", "name": "stg_orders", "resource_type": "model", "package_name": "air_boltic", "path": "staging/stg_orders.sql", "original_file_path": "models/staging/stg_orders.sql", "unique_id": "model.air_boltic.stg_orders", "fqn": ["air_boltic", "staging", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "ffb6ba2028f6f5a686b7e22e60b68c947804d80f0217d4c754aec63e193cbbaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Staging model for orders", "columns": {"order_id": {"name": "order_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to stg_customers table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "trip_id": {"name": "trip_id", "description": "Foreign key to stg_trips table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price of the trip paid by the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "Currency in which the order was paid.\nRight now hardcoded to be 'EUR' as part of this exercise.  But in the real world, this would somehow be populated dynamically based on the currency the orders was created in.\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "Status of the order. \nAs part of this exercise, assuming that this field is an enum and an order can only have a set number of statuses. For that same reason, the accepted_values test was added below.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_category": {"name": "order_category", "description": "Price category of the order. Due to the limited amount on information provided about the orders in the raw data,  this field was created to categorize the orders based on the seat number where:\n - seat_number <= 3 refers to first class,\n - seat_number <= 6 refers to business class, and\n - seat_number > 6 refers to economy class.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.998603, "relation_name": "`workspace`.`air_boltic`.`stg_orders`", "raw_code": "with orders as (\n  select\n    Order_ID as order_id,\n    Customer_ID as customer_id,\n    Trip_ID as trip_id,\n    Price_EUR::float as price,\n    'EUR' as currency,\n    Seat_No as seat_number,\n    regexp_extract(seat_number, '(\\\\d+)')::integer AS seat_number_without_letter,\n    lower(Status) as status\n  from {{ source('raw', 'orders') }}\n)\n\nselect\n  *,\n  case\n    when seat_number_without_letter <= 3 then 'first'\n    when seat_number_without_letter <= 6 then 'business'\n    else 'economy'\n  end as order_category\nfrom orders", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.air_boltic.raw.orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/stg_orders.sql", "compiled": true, "compiled_code": "with orders as (\n  select\n    Order_ID as order_id,\n    Customer_ID as customer_id,\n    Trip_ID as trip_id,\n    Price_EUR::float as price,\n    'EUR' as currency,\n    Seat_No as seat_number,\n    regexp_extract(seat_number, '(\\\\d+)')::integer AS seat_number_without_letter,\n    lower(Status) as status\n  from `workspace`.`air_boltic_raw`.`orders`\n)\n\nselect\n  *,\n  case\n    when seat_number_without_letter <= 3 then 'first'\n    when seat_number_without_letter <= 6 then 'business'\n    else 'economy'\n  end as order_category\nfrom orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id"], "time_spine": null}, "model.air_boltic.stg_trips": {"database": "workspace", "schema": "air_boltic", "name": "stg_trips", "resource_type": "model", "package_name": "air_boltic", "path": "staging/stg_trips.sql", "original_file_path": "models/staging/stg_trips.sql", "unique_id": "model.air_boltic.stg_trips", "fqn": ["air_boltic", "staging", "stg_trips"], "alias": "stg_trips", "checksum": {"name": "sha256", "checksum": "07949117f01db538d4ae1667679aaae0c61f6e7d1fe95f9d188f41e7f8c20b83"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Staging model for trips", "columns": {"trip_id": {"name": "trip_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "airplane_id": {"name": "airplane_id", "description": "Foreign key to stg_airplanes table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "route": {"name": "route", "description": "Standardized route label where origin and destination cities are alphabetized to ensure directionless consistency  (e.g., 'Riga-Tallinn' and 'Tallinn-Riga' both become 'Riga-Tallinn').\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_at_utc": {"name": "start_at_utc", "description": "Flight start time in UTC.\nFor this exercise, I am assuming that the start and end times are already provided in UTC.  If they weren't provided in UTC, I would call this field start_at_local, and create a new start_at_utc column, where the UTC timestamp would be calculated by using the origin city timezone.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_at_utc": {"name": "end_at_utc", "description": "Flight end time in UTC.\nFor this exercise, I am assuming that the start and end times are already provided in UTC.  If they weren't provided in UTC, I would call this field end_at_local, and create a new end_at_utc column, where the UTC timestamp would be calculated by using the destination city timezone.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_hours": {"name": "duration_hours", "description": "Trip duration in hours (end_at_utc - start_at_utc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_category": {"name": "duration_category", "description": "Category of the trip based on duration (short, medium, long).\nFor this exercise, it is determined arbitrarily as, if - duration_hours <= 3, then short, - duration_hours <= 7, then medium, - duration_hours > 7, then long.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/staging/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.9997141, "relation_name": "`workspace`.`air_boltic`.`stg_trips`", "raw_code": "with trips as (\n  select\n    Trip_ID as trip_id,\n    Origin_City as origin_city,\n    Destination_City as destination_city,\n    Airplane_ID as airplane_id,\n    Start_Timestamp::timestamp as start_at_utc,\n    End_Timestamp::timestamp as end_at_utc\n  from {{ source('raw', 'trips') }}\n),\n\nduration as (\n  select\n    trip_id,\n    abs(datediff(HOUR, start_at_utc, end_at_utc)) as duration_hours\n  from trips\n)\n\nselect\n  trips.*,\n  duration.duration_hours,\n  case\n    when duration.duration_hours <= 3 then 'short'\n    when duration.duration_hours <= 7 then 'medium'\n    else 'long'\n  end as duration_category,\n  case\n    when trips.origin_city < trips.destination_city then trips.origin_city || ' - ' || trips.destination_city\n    else trips.destination_city || ' - ' || trips.origin_city\n  end as route\nfrom trips\njoin duration on trips.trip_id = duration.trip_id", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "trips"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.air_boltic.raw.trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/stg_trips.sql", "compiled": true, "compiled_code": "with trips as (\n  select\n    Trip_ID as trip_id,\n    Origin_City as origin_city,\n    Destination_City as destination_city,\n    Airplane_ID as airplane_id,\n    Start_Timestamp::timestamp as start_at_utc,\n    End_Timestamp::timestamp as end_at_utc\n  from `workspace`.`air_boltic_raw`.`trips`\n),\n\nduration as (\n  select\n    trip_id,\n    abs(datediff(HOUR, start_at_utc, end_at_utc)) as duration_hours\n  from trips\n)\n\nselect\n  trips.*,\n  duration.duration_hours,\n  case\n    when duration.duration_hours <= 3 then 'short'\n    when duration.duration_hours <= 7 then 'medium'\n    else 'long'\n  end as duration_category,\n  case\n    when trips.origin_city < trips.destination_city then trips.origin_city || ' - ' || trips.destination_city\n    else trips.destination_city || ' - ' || trips.origin_city\n  end as route\nfrom trips\njoin duration on trips.trip_id = duration.trip_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["trip_id"], "time_spine": null}, "model.air_boltic.weekly_active_customers": {"database": "workspace", "schema": "air_boltic", "name": "weekly_active_customers", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/customers/weekly_active_customers.sql", "original_file_path": "models/marts/metrics/customers/weekly_active_customers.sql", "unique_id": "model.air_boltic.weekly_active_customers", "fqn": ["air_boltic", "marts", "metrics", "customers", "weekly_active_customers"], "alias": "weekly_active_customers", "checksum": {"name": "sha256", "checksum": "e74ac9889506c444ccd28af5058494adad05bcf3309fb9e9d5e2bf1068303cf8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Number of active customers per week (in UTC). Customer activity is determined by the end date of a finished trip, as recorded in the fct_customer_activity table. This metric helps track weekly engagement over time.\n", "columns": {"activity_week_utc": {"name": "activity_week_utc", "description": "The start date of the week during which the customer activity occurred (in UTC).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "weekly_active_customers": {"name": "weekly_active_customers", "description": "The number of unique customers who had finished orders during the given week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/customers/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.132708, "relation_name": "`workspace`.`air_boltic`.`weekly_active_customers`", "raw_code": "select\n  date_trunc('week', activity_date_utc)::date as activity_week_utc,\n  count(distinct customer_id) as daily_active_customers\nfrom {{ ref('fct_customer_activity') }}\ngroup by activity_week_utc\norder by activity_week_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/weekly_active_customers.sql", "compiled": true, "compiled_code": "select\n  date_trunc('week', activity_date_utc)::date as activity_week_utc,\n  count(distinct customer_id) as daily_active_customers\nfrom `workspace`.`air_boltic`.`fct_customer_activity`\ngroup by activity_week_utc\norder by activity_week_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.daily_active_customers": {"database": "workspace", "schema": "air_boltic", "name": "daily_active_customers", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/customers/daily_active_customers.sql", "original_file_path": "models/marts/metrics/customers/daily_active_customers.sql", "unique_id": "model.air_boltic.daily_active_customers", "fqn": ["air_boltic", "marts", "metrics", "customers", "daily_active_customers"], "alias": "daily_active_customers", "checksum": {"name": "sha256", "checksum": "5e3b3640f49a873e5b392a8f87512c34454f0a29868415b362c4249efd0425a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Number of active customers per date (in UTC). Customer activity is determined by the end date of a finished trips, as recorded in the fct_customer_activity table. This metric helps track daily engagement over time.\n", "columns": {"activity_date_utc": {"name": "activity_date_utc", "description": "The date on which customer activity (a finished trip) occurred (in UTC)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_active_customers": {"name": "daily_active_customers", "description": "The number of unique customers who had finished orders on the given date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/customers/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.131808, "relation_name": "`workspace`.`air_boltic`.`daily_active_customers`", "raw_code": "select\n  activity_date_utc,\n  count(distinct customer_id) as daily_active_customers\nfrom {{ ref('fct_customer_activity') }}\ngroup by activity_date_utc\norder by activity_date_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/daily_active_customers.sql", "compiled": true, "compiled_code": "select\n  activity_date_utc,\n  count(distinct customer_id) as daily_active_customers\nfrom `workspace`.`air_boltic`.`fct_customer_activity`\ngroup by activity_date_utc\norder by activity_date_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["activity_date_utc"], "time_spine": null}, "model.air_boltic.monthly_active_customers": {"database": "workspace", "schema": "air_boltic", "name": "monthly_active_customers", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/customers/monthly_active_customers.sql", "original_file_path": "models/marts/metrics/customers/monthly_active_customers.sql", "unique_id": "model.air_boltic.monthly_active_customers", "fqn": ["air_boltic", "marts", "metrics", "customers", "monthly_active_customers"], "alias": "monthly_active_customers", "checksum": {"name": "sha256", "checksum": "ede237ef43a768197a3daee9716ab21edb2417a1581a7717dc6812b7a6ff385c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Number of active customers per month (in UTC). Customer activity is determined by the end date of a finished trip, as recorded in the fct_customer_activity table. This metric helps track monthly engagement over time.\n", "columns": {"activity_month_utc": {"name": "activity_month_utc", "description": "The month in which customer activity (a finished trip) occurred, formatted as YYYY-MM (in UTC).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "monthly_active_customers": {"name": "monthly_active_customers", "description": "The number of unique customers who had finished orders during the given month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/customers/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.132307, "relation_name": "`workspace`.`air_boltic`.`monthly_active_customers`", "raw_code": "select\n  date_format(date_trunc('month', activity_date_utc), 'yyyy-MM') as activity_month_utc,\n  count(distinct customer_id) as monthly_active_customers\nfrom {{ ref('fct_customer_activity') }}\ngroup by activity_month_utc\norder by activity_month_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/monthly_active_customers.sql", "compiled": true, "compiled_code": "select\n  date_format(date_trunc('month', activity_date_utc), 'yyyy-MM') as activity_month_utc,\n  count(distinct customer_id) as monthly_active_customers\nfrom `workspace`.`air_boltic`.`fct_customer_activity`\ngroup by activity_month_utc\norder by activity_month_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.orders_by_customer_type": {"database": "workspace", "schema": "air_boltic", "name": "orders_by_customer_type", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/customers/orders_by_customer_type.sql", "original_file_path": "models/marts/metrics/customers/orders_by_customer_type.sql", "unique_id": "model.air_boltic.orders_by_customer_type", "fqn": ["air_boltic", "marts", "metrics", "customers", "orders_by_customer_type"], "alias": "orders_by_customer_type", "checksum": {"name": "sha256", "checksum": "9e9cdcaf77751c4c31f471cb1a4e5db6e0286ad71386f0b08a71b28614f2ba00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.87417, "relation_name": "`workspace`.`air_boltic`.`orders_by_customer_type`", "raw_code": "select\n  customers.group_type as customer_group_type,\n  count(orders.order_id) as orders_count\nfrom {{ ref('fct_orders') }} orders\nleft join {{ ref('dim_customers') }} customers on orders.customer_id = customers.customer_id\nwhere orders.status = 'finished'\ngroup by all", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders", "model.air_boltic.dim_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/orders_by_customer_type.sql", "compiled": true, "compiled_code": "select\n  customers.group_type as customer_group_type,\n  count(orders.order_id) as orders_count\nfrom `workspace`.`air_boltic`.`fct_orders` orders\nleft join `workspace`.`air_boltic`.`dim_customers` customers on orders.customer_id = customers.customer_id\nwhere orders.status = 'finished'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.orders_by_order_category": {"database": "workspace", "schema": "air_boltic", "name": "orders_by_order_category", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/customers/orders_by_order_category.sql", "original_file_path": "models/marts/metrics/customers/orders_by_order_category.sql", "unique_id": "model.air_boltic.orders_by_order_category", "fqn": ["air_boltic", "marts", "metrics", "customers", "orders_by_order_category"], "alias": "orders_by_order_category", "checksum": {"name": "sha256", "checksum": "eee7dd58d67b338ac63cfc078c9e8706fc22d0620a8ecd1f110f7edecce6050a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.8754802, "relation_name": "`workspace`.`air_boltic`.`orders_by_order_category`", "raw_code": "select\n  order_category as order_price_category,\n  count(order_id) as orders_count\nfrom {{ ref('fct_orders') }}\nwhere status = 'finished'\ngroup by all", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/orders_by_order_category.sql", "compiled": true, "compiled_code": "select\n  order_category as order_price_category,\n  count(order_id) as orders_count\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere status = 'finished'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.yearly_revenue": {"database": "workspace", "schema": "air_boltic", "name": "yearly_revenue", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/revenue/yearly_revenue.sql", "original_file_path": "models/marts/metrics/revenue/yearly_revenue.sql", "unique_id": "model.air_boltic.yearly_revenue", "fqn": ["air_boltic", "marts", "metrics", "revenue", "yearly_revenue"], "alias": "yearly_revenue", "checksum": {"name": "sha256", "checksum": "f3a4160f29b4227b960cb1ce21137b651d0e6bd788c7cc19de4d1499b59691f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Yearly recognized revenue aggregated from finished orders. Useful for high-level trend analysis and comparing annual business growth.\n", "columns": {"revenue_recognition_year_utc": {"name": "revenue_recognition_year_utc", "description": "The year in which revenue from finished orders was recognized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "revenue_eur": {"name": "revenue_eur", "description": "The total recognized revenue (in EUR) from finished orders in the given year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/revenue/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.1459498, "relation_name": "`workspace`.`air_boltic`.`yearly_revenue`", "raw_code": "select\n  year(revenue_recognition_date_utc) as revenue_recognition_year_utc,\n  sum(revenue_eur) as revenue_eur\nfrom {{ ref('fct_orders') }}\nwhere status = 'finished'\ngroup by revenue_recognition_year_utc\norder by revenue_recognition_year_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/yearly_revenue.sql", "compiled": true, "compiled_code": "select\n  year(revenue_recognition_date_utc) as revenue_recognition_year_utc,\n  sum(revenue_eur) as revenue_eur\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere status = 'finished'\ngroup by revenue_recognition_year_utc\norder by revenue_recognition_year_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.revenue_by_customer_type": {"database": "workspace", "schema": "air_boltic", "name": "revenue_by_customer_type", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/revenue/revenue_by_customer_type.sql", "original_file_path": "models/marts/metrics/revenue/revenue_by_customer_type.sql", "unique_id": "model.air_boltic.revenue_by_customer_type", "fqn": ["air_boltic", "marts", "metrics", "revenue", "revenue_by_customer_type"], "alias": "revenue_by_customer_type", "checksum": {"name": "sha256", "checksum": "05546e9a74f6ba93eb99f4c17b6286bf4c7afa513660d02214a5dbc578957cfa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.8780239, "relation_name": "`workspace`.`air_boltic`.`revenue_by_customer_type`", "raw_code": "select\n  customers.group_type as customer_group_type,\n  sum(orders.revenue_eur) as revenue_eur\nfrom {{ ref('fct_orders') }} orders\nleft join {{ ref('dim_customers') }} customers on orders.customer_id = customers.customer_id\nwhere orders.status = 'finished'\ngroup by all", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders", "model.air_boltic.dim_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/revenue_by_customer_type.sql", "compiled": true, "compiled_code": "select\n  customers.group_type as customer_group_type,\n  sum(orders.revenue_eur) as revenue_eur\nfrom `workspace`.`air_boltic`.`fct_orders` orders\nleft join `workspace`.`air_boltic`.`dim_customers` customers on orders.customer_id = customers.customer_id\nwhere orders.status = 'finished'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.monthly_revenue": {"database": "workspace", "schema": "air_boltic", "name": "monthly_revenue", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/revenue/monthly_revenue.sql", "original_file_path": "models/marts/metrics/revenue/monthly_revenue.sql", "unique_id": "model.air_boltic.monthly_revenue", "fqn": ["air_boltic", "marts", "metrics", "revenue", "monthly_revenue"], "alias": "monthly_revenue", "checksum": {"name": "sha256", "checksum": "47bf617f66f452be92d737a8058a32599d25945d335d68d5bef03f728230c27e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Monthly recognized revenue aggregated from finished orders. Uses the revenue_recognition_date_utc field from fct_orders to group revenue by month. This metric helps track financial performance over time on a monthly basis.\n", "columns": {"revenue_recognition_month_utc": {"name": "revenue_recognition_month_utc", "description": "The month (formatted as YYYY-MM) in which revenue from finished orders was recognized (in UTC).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "revenue_eur": {"name": "revenue_eur", "description": "The total recognized revenue (in EUR) from finished orders in the given month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/revenue/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.145163, "relation_name": "`workspace`.`air_boltic`.`monthly_revenue`", "raw_code": "select\n  date_format(date_trunc('month', revenue_recognition_date_utc), 'yyyy-MM') as revenue_recognition_month_utc,\n  sum(revenue_eur) as revenue_eur\nfrom {{ ref('fct_orders') }}\nwhere status = 'finished'\ngroup by revenue_recognition_month_utc\norder by revenue_recognition_month_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/monthly_revenue.sql", "compiled": true, "compiled_code": "select\n  date_format(date_trunc('month', revenue_recognition_date_utc), 'yyyy-MM') as revenue_recognition_month_utc,\n  sum(revenue_eur) as revenue_eur\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere status = 'finished'\ngroup by revenue_recognition_month_utc\norder by revenue_recognition_month_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.quarterly_revenue": {"database": "workspace", "schema": "air_boltic", "name": "quarterly_revenue", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/revenue/quarterly_revenue.sql", "original_file_path": "models/marts/metrics/revenue/quarterly_revenue.sql", "unique_id": "model.air_boltic.quarterly_revenue", "fqn": ["air_boltic", "marts", "metrics", "revenue", "quarterly_revenue"], "alias": "quarterly_revenue", "checksum": {"name": "sha256", "checksum": "0c3fa8932d1e7d2fc44230758f4069a12d57deb4820817ea1e2aa68ecd3730b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Quarterly recognized revenue aggregated from finished orders. Uses the revenue_recognition_date_utc field from fct_orders to group revenue by quarter. Helps track longer-term revenue trends.\n", "columns": {"revenue_recognition_quarter_utc": {"name": "revenue_recognition_quarter_utc", "description": "The quarter (formatted as Qn YYYY) in which revenue from finished orders was recognized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "revenue_eur": {"name": "revenue_eur", "description": "The total recognized revenue (in EUR) from finished orders in the given quarter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/revenue/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.145561, "relation_name": "`workspace`.`air_boltic`.`quarterly_revenue`", "raw_code": "with quarterly_revenue as (\n  select\n    concat('Q', quarter(revenue_recognition_date_utc), ' ', year(revenue_recognition_date_utc)) as revenue_recognition_quarter_utc,\n    revenue_eur\n  from {{ ref('fct_orders') }}\n  where status = 'finished'\n)\n\nselect\n  revenue_recognition_quarter_utc,\n  sum(revenue_eur) as revenue_eur\nfrom quarterly_revenue\ngroup by revenue_recognition_quarter_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/quarterly_revenue.sql", "compiled": true, "compiled_code": "with quarterly_revenue as (\n  select\n    concat('Q', quarter(revenue_recognition_date_utc), ' ', year(revenue_recognition_date_utc)) as revenue_recognition_quarter_utc,\n    revenue_eur\n  from `workspace`.`air_boltic`.`fct_orders`\n  where status = 'finished'\n)\n\nselect\n  revenue_recognition_quarter_utc,\n  sum(revenue_eur) as revenue_eur\nfrom quarterly_revenue\ngroup by revenue_recognition_quarter_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.revenue_by_route": {"database": "workspace", "schema": "air_boltic", "name": "revenue_by_route", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/revenue/revenue_by_route.sql", "original_file_path": "models/marts/metrics/revenue/revenue_by_route.sql", "unique_id": "model.air_boltic.revenue_by_route", "fqn": ["air_boltic", "marts", "metrics", "revenue", "revenue_by_route"], "alias": "revenue_by_route", "checksum": {"name": "sha256", "checksum": "7abf002b0a1d7d831ba95f3640f3092a8359e3ce66b0d659a9c8c1d928e7bb37"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Total recognized revenue (EUR) grouped by route. Useful for understanding route-level profitability and identifying high-revenue travel paths.\n", "columns": {"route": {"name": "route", "description": "The route (origin and destination pair) for the trip.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "revenue_eur": {"name": "revenue_eur", "description": "Total revenue (in EUR) generated on the given route from finished orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/revenue/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.1469839, "relation_name": "`workspace`.`air_boltic`.`revenue_by_route`", "raw_code": "select\n  route as route,\n  sum(revenue_eur) as revenue_eur\nfrom {{ ref('fct_orders') }}\nwhere status = 'finished'\ngroup by all", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/revenue_by_route.sql", "compiled": true, "compiled_code": "select\n  route as route,\n  sum(revenue_eur) as revenue_eur\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere status = 'finished'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.revenue_by_seat": {"database": "workspace", "schema": "air_boltic", "name": "revenue_by_seat", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/revenue/revenue_by_seat.sql", "original_file_path": "models/marts/metrics/revenue/revenue_by_seat.sql", "unique_id": "model.air_boltic.revenue_by_seat", "fqn": ["air_boltic", "marts", "metrics", "revenue", "revenue_by_seat"], "alias": "revenue_by_seat", "checksum": {"name": "sha256", "checksum": "c9dde895cd8a5e262f89d22b9cf627f9bd9f105cea182d13c31306daba5a33dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.883187, "relation_name": "`workspace`.`air_boltic`.`revenue_by_seat`", "raw_code": "with orders as (\n  select\n    orders.trip_id,\n    orders.airplane_id,\n    airplanes.max_seats,\n    sum(orders.revenue_eur) as revenue_eur\n  from {{ ref('fct_orders') }} orders\n  left join {{ ref('dim_airplanes') }} airplanes on orders.airplane_id = airplanes.airplane_id\n  where status = 'finished'\n  group by all\n)\n\nselect\n  trip_id,\n  airplane_id,\n  max_seats,\n  round(revenue_eur / max_seats, 2) as revenue_per_seat_eur\nfrom orders", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders", "model.air_boltic.dim_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/revenue_by_seat.sql", "compiled": true, "compiled_code": "with orders as (\n  select\n    orders.trip_id,\n    orders.airplane_id,\n    airplanes.max_seats,\n    sum(orders.revenue_eur) as revenue_eur\n  from `workspace`.`air_boltic`.`fct_orders` orders\n  left join `workspace`.`air_boltic`.`dim_airplanes` airplanes on orders.airplane_id = airplanes.airplane_id\n  where status = 'finished'\n  group by all\n)\n\nselect\n  trip_id,\n  airplane_id,\n  max_seats,\n  round(revenue_eur / max_seats, 2) as revenue_per_seat_eur\nfrom orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.trips_by_plane_manufacturer": {"database": "workspace", "schema": "air_boltic", "name": "trips_by_plane_manufacturer", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/trips/trips_by_plane_manufacturer.sql", "original_file_path": "models/marts/metrics/trips/trips_by_plane_manufacturer.sql", "unique_id": "model.air_boltic.trips_by_plane_manufacturer", "fqn": ["air_boltic", "marts", "metrics", "trips", "trips_by_plane_manufacturer"], "alias": "trips_by_plane_manufacturer", "checksum": {"name": "sha256", "checksum": "cd72b20c4a4091f8136a1aeffb851faf4f0408b23925441aa9da41791f0c0273"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Count of finished trips operated by an airplane from each manufacturer. Provides insight into manufacturer performance and reliability.\n", "columns": {"airplane_manufacturer": {"name": "airplane_manufacturer", "description": "The manufacturer of the airplane used in the trip.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "trips_count": {"name": "trips_count", "description": "Number of finished trips taken by airplane from this manufacturer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/trips/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.1686258, "relation_name": "`workspace`.`air_boltic`.`trips_by_plane_manufacturer`", "raw_code": "select\n  airplanes.manufacturer as airplane_manufacturer,\n  count(distinct orders.trip_id) as trips_count\nfrom {{ ref('fct_orders') }} orders\nleft join {{ ref('dim_airplanes') }} airplanes on orders.airplane_id = airplanes.airplane_id\nwhere status = 'finished'\ngroup by all", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders", "model.air_boltic.dim_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/trips_by_plane_manufacturer.sql", "compiled": true, "compiled_code": "select\n  airplanes.manufacturer as airplane_manufacturer,\n  count(distinct orders.trip_id) as trips_count\nfrom `workspace`.`air_boltic`.`fct_orders` orders\nleft join `workspace`.`air_boltic`.`dim_airplanes` airplanes on orders.airplane_id = airplanes.airplane_id\nwhere status = 'finished'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.avg_trip_occupancy_rate": {"database": "workspace", "schema": "air_boltic", "name": "avg_trip_occupancy_rate", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/trips/avg_trip_occupancy_rate.sql", "original_file_path": "models/marts/metrics/trips/avg_trip_occupancy_rate.sql", "unique_id": "model.air_boltic.avg_trip_occupancy_rate", "fqn": ["air_boltic", "marts", "metrics", "trips", "avg_trip_occupancy_rate"], "alias": "avg_trip_occupancy_rate", "checksum": {"name": "sha256", "checksum": "baaef0173f9784f079a40f82f0e0f549e7e67156df6c61dc4108758a54de78f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The average percentage of seats sold across all finished trips. This rate could prompt some further investigation into route efficiency, aircraft utilization, and demand patterns.\n", "columns": {"avg_trip_occupancy_rate": {"name": "avg_trip_occupancy_rate", "description": "Average seat occupancy percentage across all trips (rounded to 2 decimal places).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/trips/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.1681302, "relation_name": "`workspace`.`air_boltic`.`avg_trip_occupancy_rate`", "raw_code": "with occupancy as (\n  select\n    orders.trip_id,\n    airplanes.max_seats,\n    count(order_id) as seats_sold,\n    round((count(order_id) * 1.0 / airplanes.max_seats) * 100, 2) as percent_seats_occupied\n  from {{ ref('fct_orders') }} orders\n  left join {{ ref('dim_airplanes') }} airplanes on orders.airplane_id = airplanes.airplane_id\n  where orders.status = 'finished'\n  group by orders.trip_id, airplanes.max_seats\n)\n\nselect\n  round(avg(percent_seats_occupied), 2) as avg_trip_occupancy_rate\nfrom occupancy", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders", "model.air_boltic.dim_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/avg_trip_occupancy_rate.sql", "compiled": true, "compiled_code": "with occupancy as (\n  select\n    orders.trip_id,\n    airplanes.max_seats,\n    count(order_id) as seats_sold,\n    round((count(order_id) * 1.0 / airplanes.max_seats) * 100, 2) as percent_seats_occupied\n  from `workspace`.`air_boltic`.`fct_orders` orders\n  left join `workspace`.`air_boltic`.`dim_airplanes` airplanes on orders.airplane_id = airplanes.airplane_id\n  where orders.status = 'finished'\n  group by orders.trip_id, airplanes.max_seats\n)\n\nselect\n  round(avg(percent_seats_occupied), 2) as avg_trip_occupancy_rate\nfrom occupancy", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.average_trip_duration": {"database": "workspace", "schema": "air_boltic", "name": "average_trip_duration", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/trips/average_trip_duration.sql", "original_file_path": "models/marts/metrics/trips/average_trip_duration.sql", "unique_id": "model.air_boltic.average_trip_duration", "fqn": ["air_boltic", "marts", "metrics", "trips", "average_trip_duration"], "alias": "average_trip_duration", "checksum": {"name": "sha256", "checksum": "f5c51272012026bbf33532f9b375b1323635ea3b44458ce289d806d890dd0a34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946998.887229, "relation_name": "`workspace`.`air_boltic`.`average_trip_duration`", "raw_code": "select\n  route,\n  avg(duration_hours) as avg_trip_duration_hours\nfrom {{ ref('fct_orders') }}\nwhere status = 'finished'\ngroup by route", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/average_trip_duration.sql", "compiled": true, "compiled_code": "select\n  route,\n  avg(duration_hours) as avg_trip_duration_hours\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere status = 'finished'\ngroup by route", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.avg_trip_cancellation_rate": {"database": "workspace", "schema": "air_boltic", "name": "avg_trip_cancellation_rate", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/trips/avg_trip_cancellation_rate.sql", "original_file_path": "models/marts/metrics/trips/avg_trip_cancellation_rate.sql", "unique_id": "model.air_boltic.avg_trip_cancellation_rate", "fqn": ["air_boltic", "marts", "metrics", "trips", "avg_trip_cancellation_rate"], "alias": "avg_trip_cancellation_rate", "checksum": {"name": "sha256", "checksum": "7b550ae62f41353cc5ce841663977831ff5b38cc0f59a313030bf8953265c1f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "The average cancellation rate across all trips, expressed as a percentage. Calculated by averaging the percent of cancelled orders per trip. This rate could prompt some further investigation into customer satisfaction or service reliability if it's too high, for example.\n", "columns": {"avg_trip_cancellation_rate": {"name": "avg_trip_cancellation_rate", "description": "Average percent of cancelled orders per trip (rounded to 2 decimal places).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/trips/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.167899, "relation_name": "`workspace`.`air_boltic`.`avg_trip_cancellation_rate`", "raw_code": "with trips as (\n  select\n    trip_id,\n    count(*) as total_orders,\n    sum(case when status = 'cancelled' then 1 else 0 end) as cancelled_orders\n  from {{ ref('fct_orders') }}\n  group by trip_id\n),\n\ntrip_cancellations as (\n  select\n    trip_id,\n    round((cancelled_orders / total_orders) * 100, 2) as percent_cancelled\n  from trips\n)\n\nselect\n  round(avg(percent_cancelled), 2) as avg_trip_cancellation_rate\nfrom trip_cancellations", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/avg_trip_cancellation_rate.sql", "compiled": true, "compiled_code": "with trips as (\n  select\n    trip_id,\n    count(*) as total_orders,\n    sum(case when status = 'cancelled' then 1 else 0 end) as cancelled_orders\n  from `workspace`.`air_boltic`.`fct_orders`\n  group by trip_id\n),\n\ntrip_cancellations as (\n  select\n    trip_id,\n    round((cancelled_orders / total_orders) * 100, 2) as percent_cancelled\n  from trips\n)\n\nselect\n  round(avg(percent_cancelled), 2) as avg_trip_cancellation_rate\nfrom trip_cancellations", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.trips_by_plane_size_category": {"database": "workspace", "schema": "air_boltic", "name": "trips_by_plane_size_category", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/trips/trips_by_plane_size_category.sql", "original_file_path": "models/marts/metrics/trips/trips_by_plane_size_category.sql", "unique_id": "model.air_boltic.trips_by_plane_size_category", "fqn": ["air_boltic", "marts", "metrics", "trips", "trips_by_plane_size_category"], "alias": "trips_by_plane_size_category", "checksum": {"name": "sha256", "checksum": "6bfbd18e6cfc31691f1ea17b5339165c39bf0fa37fe2a724fcb72ca3caffab8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Number of finished trips by different size airplanes. Perhaps best used on a dashboard with some other airplane size or route related metrics to understand  whether the most optimal size airplane is used for a route, and also to understand demand patterns.\n", "columns": {"airplane_size_category": {"name": "airplane_size_category", "description": "The size category of the airplane (e.g., small, medium, large).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "trips_count": {"name": "trips_count", "description": "Number of finished trips by airplanes of different size.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/trips/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.169006, "relation_name": "`workspace`.`air_boltic`.`trips_by_plane_size_category`", "raw_code": "select\n  airplanes.size_category as airplane_size_category,\n  count(distinct orders.trip_id) as trips_count\nfrom {{ ref('fct_orders') }} orders\nleft join {{ ref('dim_airplanes') }} airplanes on orders.airplane_id = airplanes.airplane_id\nwhere status = 'finished'\ngroup by all", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders", "model.air_boltic.dim_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/trips_by_plane_size_category.sql", "compiled": true, "compiled_code": "select\n  airplanes.size_category as airplane_size_category,\n  count(distinct orders.trip_id) as trips_count\nfrom `workspace`.`air_boltic`.`fct_orders` orders\nleft join `workspace`.`air_boltic`.`dim_airplanes` airplanes on orders.airplane_id = airplanes.airplane_id\nwhere status = 'finished'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.trips_by_route": {"database": "workspace", "schema": "air_boltic", "name": "trips_by_route", "resource_type": "model", "package_name": "air_boltic", "path": "marts/metrics/trips/trips_by_route.sql", "original_file_path": "models/marts/metrics/trips/trips_by_route.sql", "unique_id": "model.air_boltic.trips_by_route", "fqn": ["air_boltic", "marts", "metrics", "trips", "trips_by_route"], "alias": "trips_by_route", "checksum": {"name": "sha256", "checksum": "1f53d3915c3083a00879b9230028bc769058f20cda84dfb21b8cc9e4dc3781e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Count of finished trips for each route, defined by unique combinations of origin and destination city. Provides insight into route popularity and perhaps coverage as well in different regions.\n", "columns": {"route": {"name": "route", "description": "The route (origin and destination pair) of the trip.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "trips_count": {"name": "trips_count", "description": "The number of finished trips that occurred on this route.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/metrics/trips/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.169268, "relation_name": "`workspace`.`air_boltic`.`trips_by_route`", "raw_code": "select\n  route,\n  count(distinct trip_id) as trips_count\nfrom {{ ref('fct_orders') }}\nwhere status = 'finished'\ngroup by all", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/trips_by_route.sql", "compiled": true, "compiled_code": "select\n  route,\n  count(distinct trip_id) as trips_count\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere status = 'finished'\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.air_boltic.fct_customer_activity": {"database": "workspace", "schema": "air_boltic", "name": "fct_customer_activity", "resource_type": "model", "package_name": "air_boltic", "path": "marts/core/fct_customer_activity.sql", "original_file_path": "models/marts/core/fct_customer_activity.sql", "unique_id": "model.air_boltic.fct_customer_activity", "fqn": ["air_boltic", "marts", "core", "fct_customer_activity"], "alias": "fct_customer_activity", "checksum": {"name": "sha256", "checksum": "5cd15b209ce3f67698cffe4f91ca3a836b90f3d7266e2944c63a050c0fb1e5e8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table showing active customers.  Customer activity is determined by looking at finished orders and identifying the date the associated trip ended. This table can be used to aggregate customers across dates, weeks, months and so on. Additionally, this table provides a key to the dim_customers table to analyse additional active customer attributes.\nThis is simply my definition of an active customer as part of this exercise and limited data set.  I recognize that determining an active customer may be more complicated in the real world.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Key to the dim_customers table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "activity_date_utc": {"name": "activity_date_utc", "description": "Date of customer activity (in UTC)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/core/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.181414, "relation_name": "`workspace`.`air_boltic`.`fct_customer_activity`", "raw_code": "with finished_orders as (\n  select\n    orders.customer_id,\n    trips.end_at_utc::date as order_date_utc\n  from {{ ref('stg_orders') }} orders\n  join {{ ref('stg_trips') }} trips on orders.trip_id = trips.trip_id\n  where orders.status = 'finished'\n)\n\nselect\n  customer_id,\n  order_date_utc as activity_date_utc\nfrom finished_orders\ngroup by all\norder by activity_date_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.stg_orders", "model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/fct_customer_activity.sql", "compiled": true, "compiled_code": "with finished_orders as (\n  select\n    orders.customer_id,\n    trips.end_at_utc::date as order_date_utc\n  from `workspace`.`air_boltic`.`stg_orders` orders\n  join `workspace`.`air_boltic`.`stg_trips` trips on orders.trip_id = trips.trip_id\n  where orders.status = 'finished'\n)\n\nselect\n  customer_id,\n  order_date_utc as activity_date_utc\nfrom finished_orders\ngroup by all\norder by activity_date_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["activity_date_utc", "customer_id"], "time_spine": null}, "model.air_boltic.dim_customers": {"database": "workspace", "schema": "air_boltic", "name": "dim_customers", "resource_type": "model", "package_name": "air_boltic", "path": "marts/core/dim_customers.sql", "original_file_path": "models/marts/core/dim_customers.sql", "unique_id": "model.air_boltic.dim_customers", "fqn": ["air_boltic", "marts", "core", "dim_customers"], "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "e075ca38ab4d8b243a8f6b00151057da3768cd9ff22b5ddb596a5b4f463d9789"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table combining customer and customer group data.\nSimilarly to dim_airplanes, I decided to group stg_customers and stg_customer_groups tables to create this one dimension table. Because of the data cleanup I did in the Databricks notebook to ensure that every customer has a customer_group_id, and  because of the small size of the stg_customer_groups table then it simplified some downstream work a bit. \nI realize that customer_groups may be something that each team (depending on their needs around customer data), may want to  assign themselves or that perhaps it is even more dynamic and something a customer can assign themselves under their account, for example.  But as part of this exercise, I am assuming it to be a more static data set per customer that doesn't change often.\n", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "group_type": {"name": "group_type", "description": "Type of customer (e.g., business, individual)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/core/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.180287, "relation_name": "`workspace`.`air_boltic`.`dim_customers`", "raw_code": "select\n  customers.customer_id,\n  customers.name,\n  customers.email,\n  customers.phone_number,\n  customer_groups.name as group_name,\n  customer_groups.type as group_type,\n  customer_groups.registry_number as group_registry_number\nfrom {{ ref('stg_customers') }} customers\njoin {{ ref('stg_customer_groups') }} customer_groups\n  on customers.customer_group_id = customer_groups.customer_group_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}, {"name": "stg_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.stg_customers", "model.air_boltic.stg_customer_groups"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/dim_customers.sql", "compiled": true, "compiled_code": "select\n  customers.customer_id,\n  customers.name,\n  customers.email,\n  customers.phone_number,\n  customer_groups.name as group_name,\n  customer_groups.type as group_type,\n  customer_groups.registry_number as group_registry_number\nfrom `workspace`.`air_boltic`.`stg_customers` customers\njoin `workspace`.`air_boltic`.`stg_customer_groups` customer_groups\n  on customers.customer_group_id = customer_groups.customer_group_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.air_boltic.dim_airplanes": {"database": "workspace", "schema": "air_boltic", "name": "dim_airplanes", "resource_type": "model", "package_name": "air_boltic", "path": "marts/core/dim_airplanes.sql", "original_file_path": "models/marts/core/dim_airplanes.sql", "unique_id": "model.air_boltic.dim_airplanes", "fqn": ["air_boltic", "marts", "core", "dim_airplanes"], "alias": "dim_airplanes", "checksum": {"name": "sha256", "checksum": "ed92deb9554f2d698343b4a37f553ed7f3e5a76f3a27456ccc5fc5d2b7247d19"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table combining airplane and airplane model details data used by Air Boltic.\nFor this exercise, I decided to combine stg_airplanes and stg_airplane_models to create this dimension table. This made it easier to access airplane model details per airplane down the line when creating metrics. I did not end up creating any metrics around whether Air Boltic currently has the most optimal fleet or  whether it should switch out some airplane manufacturers or models with those currently available on the market. So for that reason I did not have a need for separate dim_airplane_models table.\n", "columns": {"airplane_id": {"name": "airplane_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/core/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.1797209, "relation_name": "`workspace`.`air_boltic`.`dim_airplanes`", "raw_code": "with airplanes as (\n  select\n    airplanes.airplane_id,\n    airplanes.model,\n    airplanes.manufacturer,\n    airplane_models.max_seats,\n    airplane_models.max_weight,\n    airplane_models.max_distance,\n    airplane_models.engine_type\n  from {{ ref('stg_airplanes') }} airplanes\n  join {{ ref('stg_airplane_models') }} airplane_models\n    on airplanes.model = airplane_models.model and airplanes.manufacturer = airplane_models.manufacturer\n)\n\nselect\n  *,\n  case\n    when max_seats <= 50 then 'small'\n    when max_seats <= 200 then 'medium'\n    else 'large'\n  end as size_category\nfrom airplanes", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplanes", "package": null, "version": null}, {"name": "stg_airplane_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.stg_airplanes", "model.air_boltic.stg_airplane_models"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/dim_airplanes.sql", "compiled": true, "compiled_code": "with airplanes as (\n  select\n    airplanes.airplane_id,\n    airplanes.model,\n    airplanes.manufacturer,\n    airplane_models.max_seats,\n    airplane_models.max_weight,\n    airplane_models.max_distance,\n    airplane_models.engine_type\n  from `workspace`.`air_boltic`.`stg_airplanes` airplanes\n  join `workspace`.`air_boltic`.`stg_airplane_models` airplane_models\n    on airplanes.model = airplane_models.model and airplanes.manufacturer = airplane_models.manufacturer\n)\n\nselect\n  *,\n  case\n    when max_seats <= 50 then 'small'\n    when max_seats <= 200 then 'medium'\n    else 'large'\n  end as size_category\nfrom airplanes", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["airplane_id"], "time_spine": null}, "model.air_boltic.fct_orders": {"database": "workspace", "schema": "air_boltic", "name": "fct_orders", "resource_type": "model", "package_name": "air_boltic", "path": "marts/core/fct_orders.sql", "original_file_path": "models/marts/core/fct_orders.sql", "unique_id": "model.air_boltic.fct_orders", "fqn": ["air_boltic", "marts", "core", "fct_orders"], "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "8b3c59064e251289d97f52773d3b28ee24d15ecc2d6b6592b1ee9c22d18f8ad5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table containing every unique order transaction and the data associated with that order. Some of the details include price, seating, route, start and end times, and revenue recognized per order.\nAs part of the homework exercise, I decided to create this fact table by combining stg_orders and stg_trips as both tables were quite small, and not every trip in the original trips table is represented in the original orders table anyway.  I realize that this may not make sense in the real world, so with millions of rows and tens and tens of columns I may have decided differently. But for this exercise, in the interest of time, and for ease of creating joins I decided to go this route (no pun intended).\n", "columns": {"order_id": {"name": "order_id", "description": "Primary key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to dim_customers table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "airplane_id": {"name": "airplane_id", "description": "Foreign key to dim_airplanes table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "trip_id": {"name": "trip_id", "description": "Unique trip identifier. There can be multiple orders per one trip.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "revenue_recognition_date_utc": {"name": "revenue_recognition_date_utc", "description": "Date revenue is recognized for the order (in UTC)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "revenue_eur": {"name": "revenue_eur", "description": "Revenue amount recognized for a given finished order. \nAs part of this exercise, this value is calculated by multiplying the trip price by an arbitrary constant of 0.2  to signify the fact that not the entire amount paid by the customer would likely be considered Bolt's revenue.  It is highly likely that in order to provide a product or service like Air Boltic, other stakeholders and parties (like airports, for example) would need to be involved, who would also take their cut from the price paid by the customer.\nI am also assuming, that the revenue (somehow) has been converted to EUR using the currency value in the currency column. So whenever this field is used downstream, the currency is always in euros, so the term 'revenue' always has a single meaning. \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "air_boltic://models/marts/core/schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1750946999.181058, "relation_name": "`workspace`.`air_boltic`.`fct_orders`", "raw_code": "with orders as (\n  select\n    orders.order_id,\n    orders.customer_id,\n    orders.trip_id,\n    trips.airplane_id,\n    orders.price,\n    orders.currency,\n    orders.seat_number,\n    orders.status,\n    orders.order_category,\n    trips.origin_city,\n    trips.destination_city,\n    trips.start_at_utc,\n    trips.end_at_utc,\n    trips.duration_hours,\n    trips.duration_category,\n    trips.route\n  from {{ ref('stg_orders') }} orders\n  left join {{ ref('stg_trips') }} trips on orders.trip_id = trips.trip_id\n)\n\nselect\n  *,\n  case\n    when status = 'finished' then end_at_utc::date\n    else null\n  end as revenue_recognition_date_utc,\n  case\n    when status = 'finished' then (price * 0.2)\n    else null\n  end as revenue_eur\nfrom orders", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.stg_orders", "model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/fct_orders.sql", "compiled": true, "compiled_code": "with orders as (\n  select\n    orders.order_id,\n    orders.customer_id,\n    orders.trip_id,\n    trips.airplane_id,\n    orders.price,\n    orders.currency,\n    orders.seat_number,\n    orders.status,\n    orders.order_category,\n    trips.origin_city,\n    trips.destination_city,\n    trips.start_at_utc,\n    trips.end_at_utc,\n    trips.duration_hours,\n    trips.duration_category,\n    trips.route\n  from `workspace`.`air_boltic`.`stg_orders` orders\n  left join `workspace`.`air_boltic`.`stg_trips` trips on orders.trip_id = trips.trip_id\n)\n\nselect\n  *,\n  case\n    when status = 'finished' then end_at_utc::date\n    else null\n  end as revenue_recognition_date_utc,\n  case\n    when status = 'finished' then (price * 0.2)\n    else null\n  end as revenue_eur\nfrom orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id"], "time_spine": null}, "test.air_boltic.test_airplane_manufacturer_model_composite_primary_key": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "test_airplane_manufacturer_model_composite_primary_key", "resource_type": "test", "package_name": "air_boltic", "path": "staging/test_airplane_manufacturer_model_composite_primary_key.sql", "original_file_path": "tests/staging/test_airplane_manufacturer_model_composite_primary_key.sql", "unique_id": "test.air_boltic.test_airplane_manufacturer_model_composite_primary_key", "fqn": ["air_boltic", "staging", "test_airplane_manufacturer_model_composite_primary_key"], "alias": "test_airplane_manufacturer_model_composite_primary_key", "checksum": {"name": "sha256", "checksum": "718aeeacbffd34ff07571896179eb7a435703c8929ff7c28b0ef4933528c16d5"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946998.940408, "relation_name": null, "raw_code": "select\n  manufacturer,\n  model,\n  count(*) as record_count\nfrom {{ ref('stg_airplane_models') }}\ngroup by manufacturer, model\nhaving count(*) > 1", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplane_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.stg_airplane_models"]}, "compiled_path": "target/compiled/air_boltic/tests/staging/test_airplane_manufacturer_model_composite_primary_key.sql", "compiled": true, "compiled_code": "select\n  manufacturer,\n  model,\n  count(*) as record_count\nfrom `workspace`.`air_boltic`.`stg_airplane_models`\ngroup by manufacturer, model\nhaving count(*) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.air_boltic.test_trip_start_at_is_not_equal_to_end_at": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "test_trip_start_at_is_not_equal_to_end_at", "resource_type": "test", "package_name": "air_boltic", "path": "staging/test_trip_start_at_is_not_equal_to_end_at.sql", "original_file_path": "tests/staging/test_trip_start_at_is_not_equal_to_end_at.sql", "unique_id": "test.air_boltic.test_trip_start_at_is_not_equal_to_end_at", "fqn": ["air_boltic", "staging", "test_trip_start_at_is_not_equal_to_end_at"], "alias": "test_trip_start_at_is_not_equal_to_end_at", "checksum": {"name": "sha256", "checksum": "e2fc291a2713c598fad2808f2abbe0bf93a549279ab0037f2ef780e4871f217f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946998.94705, "relation_name": null, "raw_code": "select *\nfrom {{ ref('stg_trips') }}\nwhere start_at_utc = end_at_utc", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/tests/staging/test_trip_start_at_is_not_equal_to_end_at.sql", "compiled": true, "compiled_code": "select *\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere start_at_utc = end_at_utc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.air_boltic.not_null_stg_airplane_models_model.f83d29caeb": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_airplane_models_model", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_airplane_models_model.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_airplane_models_model.f83d29caeb", "fqn": ["air_boltic", "staging", "not_null_stg_airplane_models_model"], "alias": "not_null_stg_airplane_models_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0329118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplane_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplane_models"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_airplane_models_model.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model\nfrom `workspace`.`air_boltic`.`stg_airplane_models`\nwhere model is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "model", "file_key_name": "models.stg_airplane_models", "attached_node": "model.air_boltic.stg_airplane_models", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "model", "model": "{{ get_where_subquery(ref('stg_airplane_models')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_airplane_models_manufacturer.0f80552b0b": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_airplane_models_manufacturer", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_airplane_models_manufacturer.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_airplane_models_manufacturer.0f80552b0b", "fqn": ["air_boltic", "staging", "not_null_stg_airplane_models_manufacturer"], "alias": "not_null_stg_airplane_models_manufacturer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.034127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplane_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplane_models"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_airplane_models_manufacturer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manufacturer\nfrom `workspace`.`air_boltic`.`stg_airplane_models`\nwhere manufacturer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "manufacturer", "file_key_name": "models.stg_airplane_models", "attached_node": "model.air_boltic.stg_airplane_models", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manufacturer", "model": "{{ get_where_subquery(ref('stg_airplane_models')) }}"}, "namespace": null}}, "test.air_boltic.unique_stg_airplanes_airplane_id.c59fa67f41": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_stg_airplanes_airplane_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_stg_airplanes_airplane_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.unique_stg_airplanes_airplane_id.c59fa67f41", "fqn": ["air_boltic", "staging", "unique_stg_airplanes_airplane_id"], "alias": "unique_stg_airplanes_airplane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.035039, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/unique_stg_airplanes_airplane_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    airplane_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`stg_airplanes`\nwhere airplane_id is not null\ngroup by airplane_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.stg_airplanes", "attached_node": "model.air_boltic.stg_airplanes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "airplane_id", "model": "{{ get_where_subquery(ref('stg_airplanes')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_airplanes_airplane_id.348b9a690c": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_airplanes_airplane_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_airplanes_airplane_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_airplanes_airplane_id.348b9a690c", "fqn": ["air_boltic", "staging", "not_null_stg_airplanes_airplane_id"], "alias": "not_null_stg_airplanes_airplane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.03592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_airplanes_airplane_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect airplane_id\nfrom `workspace`.`air_boltic`.`stg_airplanes`\nwhere airplane_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.stg_airplanes", "attached_node": "model.air_boltic.stg_airplanes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "airplane_id", "model": "{{ get_where_subquery(ref('stg_airplanes')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_airplanes_model.9f927b30c2": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_airplanes_model", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_airplanes_model.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_airplanes_model.9f927b30c2", "fqn": ["air_boltic", "staging", "not_null_stg_airplanes_model"], "alias": "not_null_stg_airplanes_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0370271, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_airplanes_model.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model\nfrom `workspace`.`air_boltic`.`stg_airplanes`\nwhere model is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "model", "file_key_name": "models.stg_airplanes", "attached_node": "model.air_boltic.stg_airplanes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "model", "model": "{{ get_where_subquery(ref('stg_airplanes')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_airplanes_manufacturer.e8b031ef74": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_airplanes_manufacturer", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_airplanes_manufacturer.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_airplanes_manufacturer.e8b031ef74", "fqn": ["air_boltic", "staging", "not_null_stg_airplanes_manufacturer"], "alias": "not_null_stg_airplanes_manufacturer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.038052, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_airplanes_manufacturer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manufacturer\nfrom `workspace`.`air_boltic`.`stg_airplanes`\nwhere manufacturer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "manufacturer", "file_key_name": "models.stg_airplanes", "attached_node": "model.air_boltic.stg_airplanes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manufacturer", "model": "{{ get_where_subquery(ref('stg_airplanes')) }}"}, "namespace": null}}, "test.air_boltic.accepted_values_stg_airplanes_manufacturer__boeing__airbus__embraer__bombardier__gulfstream.4ff97a3e11": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "accepted_values_stg_airplanes_manufacturer__boeing__airbus__embraer__bombardier__gulfstream", "resource_type": "test", "package_name": "air_boltic", "path": "accepted_values_stg_airplanes_e7de65b33234352acdfde47ec3ac3564.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.accepted_values_stg_airplanes_manufacturer__boeing__airbus__embraer__bombardier__gulfstream.4ff97a3e11", "fqn": ["air_boltic", "staging", "accepted_values_stg_airplanes_manufacturer__boeing__airbus__embraer__bombardier__gulfstream"], "alias": "accepted_values_stg_airplanes_e7de65b33234352acdfde47ec3ac3564", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_airplanes_e7de65b33234352acdfde47ec3ac3564", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_stg_airplanes_e7de65b33234352acdfde47ec3ac3564"}, "created_at": 1750946999.038979, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_airplanes_e7de65b33234352acdfde47ec3ac3564\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/accepted_values_stg_airplanes_e7de65b33234352acdfde47ec3ac3564.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        manufacturer as value_field,\n        count(*) as n_records\n\n    from `workspace`.`air_boltic`.`stg_airplanes`\n    group by manufacturer\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'boeing','airbus','embraer','bombardier','gulfstream'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "manufacturer", "file_key_name": "models.stg_airplanes", "attached_node": "model.air_boltic.stg_airplanes", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["boeing", "airbus", "embraer", "bombardier", "gulfstream"], "column_name": "manufacturer", "model": "{{ get_where_subquery(ref('stg_airplanes')) }}"}, "namespace": null}}, "test.air_boltic.unique_stg_customers_customer_id.c7614daada": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_stg_customers_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_stg_customers_customer_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.unique_stg_customers_customer_id.c7614daada", "fqn": ["air_boltic", "staging", "unique_stg_customers_customer_id"], "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.050001, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customers"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/unique_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`stg_customers`\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.air_boltic.stg_customers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_customers_customer_id.e2cfb1f9aa": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_customers_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_customers_customer_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_customers_customer_id.e2cfb1f9aa", "fqn": ["air_boltic", "staging", "not_null_stg_customers_customer_id"], "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.050921, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customers"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `workspace`.`air_boltic`.`stg_customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.air_boltic.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_customers_customer_group_id.908072d583": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_customers_customer_group_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_customers_customer_group_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_customers_customer_group_id.908072d583", "fqn": ["air_boltic", "staging", "not_null_stg_customers_customer_group_id"], "alias": "not_null_stg_customers_customer_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0517912, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customers"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_customers_customer_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_group_id\nfrom `workspace`.`air_boltic`.`stg_customers`\nwhere customer_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_group_id", "file_key_name": "models.stg_customers", "attached_node": "model.air_boltic.stg_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_group_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.air_boltic.relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_.05d80c5a76": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_stg_customers_21d0e0d8c50aefe5b24c0493c5c6bdfa.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_.05d80c5a76", "fqn": ["air_boltic", "staging", "relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_"], "alias": "relationships_stg_customers_21d0e0d8c50aefe5b24c0493c5c6bdfa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_customers_21d0e0d8c50aefe5b24c0493c5c6bdfa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_customers_21d0e0d8c50aefe5b24c0493c5c6bdfa"}, "created_at": 1750946999.0527182, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_customers_21d0e0d8c50aefe5b24c0493c5c6bdfa\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_groups", "package": null, "version": null}, {"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customer_groups", "model.air_boltic.stg_customers"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/relationships_stg_customers_21d0e0d8c50aefe5b24c0493c5c6bdfa.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_group_id as from_field\n    from `workspace`.`air_boltic`.`stg_customers`\n    where customer_group_id is not null\n),\n\nparent as (\n    select customer_group_id as to_field\n    from `workspace`.`air_boltic`.`stg_customer_groups`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_group_id", "file_key_name": "models.stg_customers", "attached_node": "model.air_boltic.stg_customers", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_customer_groups')", "field": "customer_group_id", "column_name": "customer_group_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}}, "test.air_boltic.unique_stg_customer_groups_customer_group_id.581355d426": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_stg_customer_groups_customer_group_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_stg_customer_groups_customer_group_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.unique_stg_customer_groups_customer_group_id.581355d426", "fqn": ["air_boltic", "staging", "unique_stg_customer_groups_customer_group_id"], "alias": "unique_stg_customer_groups_customer_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0570052, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customer_groups"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/unique_stg_customer_groups_customer_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_group_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`stg_customer_groups`\nwhere customer_group_id is not null\ngroup by customer_group_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_group_id", "file_key_name": "models.stg_customer_groups", "attached_node": "model.air_boltic.stg_customer_groups", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_group_id", "model": "{{ get_where_subquery(ref('stg_customer_groups')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_customer_groups_customer_group_id.9f90ecdf19": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_customer_groups_customer_group_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_customer_groups_customer_group_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_customer_groups_customer_group_id.9f90ecdf19", "fqn": ["air_boltic", "staging", "not_null_stg_customer_groups_customer_group_id"], "alias": "not_null_stg_customer_groups_customer_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.058553, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customer_groups"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_customer_groups_customer_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_group_id\nfrom `workspace`.`air_boltic`.`stg_customer_groups`\nwhere customer_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_group_id", "file_key_name": "models.stg_customer_groups", "attached_node": "model.air_boltic.stg_customer_groups", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_group_id", "model": "{{ get_where_subquery(ref('stg_customer_groups')) }}"}, "namespace": null}}, "test.air_boltic.accepted_values_stg_customer_groups_type__company__private_group__organisation__individual.15fbe45834": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "accepted_values_stg_customer_groups_type__company__private_group__organisation__individual", "resource_type": "test", "package_name": "air_boltic", "path": "accepted_values_stg_customer_g_6c2d339379f5b2354846f397c54a9075.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.accepted_values_stg_customer_groups_type__company__private_group__organisation__individual.15fbe45834", "fqn": ["air_boltic", "staging", "accepted_values_stg_customer_groups_type__company__private_group__organisation__individual"], "alias": "accepted_values_stg_customer_g_6c2d339379f5b2354846f397c54a9075", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_customer_g_6c2d339379f5b2354846f397c54a9075", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_stg_customer_g_6c2d339379f5b2354846f397c54a9075"}, "created_at": 1750946999.0594702, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_customer_g_6c2d339379f5b2354846f397c54a9075\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_groups", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customer_groups"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/accepted_values_stg_customer_g_6c2d339379f5b2354846f397c54a9075.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from `workspace`.`air_boltic`.`stg_customer_groups`\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'company','private group','organisation','individual'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "type", "file_key_name": "models.stg_customer_groups", "attached_node": "model.air_boltic.stg_customer_groups", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["company", "private group", "organisation", "individual"], "column_name": "type", "model": "{{ get_where_subquery(ref('stg_customer_groups')) }}"}, "namespace": null}}, "test.air_boltic.unique_stg_orders_order_id.e3b841c71a": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_stg_orders_order_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_stg_orders_order_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.unique_stg_orders_order_id.e3b841c71a", "fqn": ["air_boltic", "staging", "unique_stg_orders_order_id"], "alias": "unique_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.062476, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/unique_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`stg_orders`\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_orders_order_id.81cfe2fe64": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_orders_order_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_orders_order_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_orders_order_id.81cfe2fe64", "fqn": ["air_boltic", "staging", "not_null_stg_orders_order_id"], "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.063375, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `workspace`.`air_boltic`.`stg_orders`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_orders_customer_id.af79d5e4b5": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_orders_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_orders_customer_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_orders_customer_id.af79d5e4b5", "fqn": ["air_boltic", "staging", "not_null_stg_orders_customer_id"], "alias": "not_null_stg_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0644789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_orders_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `workspace`.`air_boltic`.`stg_orders`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.relationships_stg_orders_customer_id__customer_id__ref_stg_customers_.430bf21500": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_stg_orders_customer_id__customer_id__ref_stg_customers_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_stg_orders_96411fe0c89b49c3f4da955dfd358ba0.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.relationships_stg_orders_customer_id__customer_id__ref_stg_customers_.430bf21500", "fqn": ["air_boltic", "staging", "relationships_stg_orders_customer_id__customer_id__ref_stg_customers_"], "alias": "relationships_stg_orders_96411fe0c89b49c3f4da955dfd358ba0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_orders_96411fe0c89b49c3f4da955dfd358ba0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_orders_96411fe0c89b49c3f4da955dfd358ba0"}, "created_at": 1750946999.065521, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_orders_96411fe0c89b49c3f4da955dfd358ba0\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}, {"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_customers", "model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/relationships_stg_orders_96411fe0c89b49c3f4da955dfd358ba0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `workspace`.`air_boltic`.`stg_orders`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `workspace`.`air_boltic`.`stg_customers`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_orders_trip_id.89c7368716": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_orders_trip_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_orders_trip_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_orders_trip_id.89c7368716", "fqn": ["air_boltic", "staging", "not_null_stg_orders_trip_id"], "alias": "not_null_stg_orders_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.068088, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_orders_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom `workspace`.`air_boltic`.`stg_orders`\nwhere trip_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.8a07f8c423": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_stg_orders_trip_id__trip_id__ref_stg_trips_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.8a07f8c423", "fqn": ["air_boltic", "staging", "relationships_stg_orders_trip_id__trip_id__ref_stg_trips_"], "alias": "relationships_stg_orders_trip_id__trip_id__ref_stg_trips_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0691981, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}, {"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips", "model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select trip_id as from_field\n    from `workspace`.`air_boltic`.`stg_orders`\n    where trip_id is not null\n),\n\nparent as (\n    select trip_id as to_field\n    from `workspace`.`air_boltic`.`stg_trips`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_trips')", "field": "trip_id", "column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_orders_price.7079003a04": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_orders_price", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_orders_price.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_orders_price.7079003a04", "fqn": ["air_boltic", "staging", "not_null_stg_orders_price"], "alias": "not_null_stg_orders_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.071434, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_orders_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `workspace`.`air_boltic`.`stg_orders`\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.accepted_values_stg_orders_price__EUR.a2b8ce6262": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "accepted_values_stg_orders_price__EUR", "resource_type": "test", "package_name": "air_boltic", "path": "accepted_values_stg_orders_price__EUR.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.accepted_values_stg_orders_price__EUR.a2b8ce6262", "fqn": ["air_boltic", "staging", "accepted_values_stg_orders_price__EUR"], "alias": "accepted_values_stg_orders_price__EUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0724611, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/accepted_values_stg_orders_price__EUR.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        price as value_field,\n        count(*) as n_records\n\n    from `workspace`.`air_boltic`.`stg_orders`\n    group by price\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'EUR'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["EUR"], "column_name": "price", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_orders_currency.42f3ec9cf1": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_orders_currency", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_orders_currency.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_orders_currency.42f3ec9cf1", "fqn": ["air_boltic", "staging", "not_null_stg_orders_currency"], "alias": "not_null_stg_orders_currency", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.074838, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_orders_currency.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency\nfrom `workspace`.`air_boltic`.`stg_orders`\nwhere currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.accepted_values_stg_orders_status__finished__booked__cancelled.3c7e1d0186": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "accepted_values_stg_orders_status__finished__booked__cancelled", "resource_type": "test", "package_name": "air_boltic", "path": "accepted_values_stg_orders_status__finished__booked__cancelled.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.accepted_values_stg_orders_status__finished__booked__cancelled.3c7e1d0186", "fqn": ["air_boltic", "staging", "accepted_values_stg_orders_status__finished__booked__cancelled"], "alias": "accepted_values_stg_orders_status__finished__booked__cancelled", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.075822, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/accepted_values_stg_orders_status__finished__booked__cancelled.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from `workspace`.`air_boltic`.`stg_orders`\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'finished','booked','cancelled'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["finished", "booked", "cancelled"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.accepted_values_stg_orders_order_category__first__business__economy.4b4298f708": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "accepted_values_stg_orders_order_category__first__business__economy", "resource_type": "test", "package_name": "air_boltic", "path": "accepted_values_stg_orders_35487ca42fd3c54ef07ecb11e2fac056.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.accepted_values_stg_orders_order_category__first__business__economy.4b4298f708", "fqn": ["air_boltic", "staging", "accepted_values_stg_orders_order_category__first__business__economy"], "alias": "accepted_values_stg_orders_35487ca42fd3c54ef07ecb11e2fac056", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_orders_35487ca42fd3c54ef07ecb11e2fac056", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_stg_orders_35487ca42fd3c54ef07ecb11e2fac056"}, "created_at": 1750946999.078283, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_35487ca42fd3c54ef07ecb11e2fac056\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_orders"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/accepted_values_stg_orders_35487ca42fd3c54ef07ecb11e2fac056.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        order_category as value_field,\n        count(*) as n_records\n\n    from `workspace`.`air_boltic`.`stg_orders`\n    group by order_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'first','business','economy'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_category", "file_key_name": "models.stg_orders", "attached_node": "model.air_boltic.stg_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["first", "business", "economy"], "column_name": "order_category", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.air_boltic.unique_stg_trips_trip_id.748f5076fb": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_stg_trips_trip_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_stg_trips_trip_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.unique_stg_trips_trip_id.748f5076fb", "fqn": ["air_boltic", "staging", "unique_stg_trips_trip_id"], "alias": "unique_stg_trips_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0812259, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/unique_stg_trips_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    trip_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere trip_id is not null\ngroup by trip_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "unique", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_trips_trip_id.159f524fc2": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_trips_trip_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_trips_trip_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_trips_trip_id.159f524fc2", "fqn": ["air_boltic", "staging", "not_null_stg_trips_trip_id"], "alias": "not_null_stg_trips_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0823529, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_trips_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere trip_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_trips_airplane_id.d93f4ac91b": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_trips_airplane_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_trips_airplane_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_trips_airplane_id.d93f4ac91b", "fqn": ["air_boltic", "staging", "not_null_stg_trips_airplane_id"], "alias": "not_null_stg_trips_airplane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0832481, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_trips_airplane_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect airplane_id\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere airplane_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "airplane_id", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_.eb96b4e4eb": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_stg_trips_02bdb0b70e1a8bad70a2fb241892ed86.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_.eb96b4e4eb", "fqn": ["air_boltic", "staging", "relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_"], "alias": "relationships_stg_trips_02bdb0b70e1a8bad70a2fb241892ed86", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_trips_02bdb0b70e1a8bad70a2fb241892ed86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_trips_02bdb0b70e1a8bad70a2fb241892ed86"}, "created_at": 1750946999.0841632, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_trips_02bdb0b70e1a8bad70a2fb241892ed86\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_airplanes", "package": null, "version": null}, {"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_airplanes", "model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/relationships_stg_trips_02bdb0b70e1a8bad70a2fb241892ed86.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select airplane_id as from_field\n    from `workspace`.`air_boltic`.`stg_trips`\n    where airplane_id is not null\n),\n\nparent as (\n    select airplane_id as to_field\n    from `workspace`.`air_boltic`.`stg_airplanes`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_airplanes')", "field": "airplane_id", "column_name": "airplane_id", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_trips_route.cd0a1ece30": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_trips_route", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_trips_route.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_trips_route.cd0a1ece30", "fqn": ["air_boltic", "staging", "not_null_stg_trips_route"], "alias": "not_null_stg_trips_route", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0865788, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_trips_route.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere route is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_trips_start_at_utc.8f92a4b654": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_trips_start_at_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_trips_start_at_utc.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_trips_start_at_utc.8f92a4b654", "fqn": ["air_boltic", "staging", "not_null_stg_trips_start_at_utc"], "alias": "not_null_stg_trips_start_at_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0874372, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_trips_start_at_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_at_utc\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere start_at_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_at_utc", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_at_utc", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_trips_end_at_utc.497c03ef64": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_trips_end_at_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_trips_end_at_utc.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_trips_end_at_utc.497c03ef64", "fqn": ["air_boltic", "staging", "not_null_stg_trips_end_at_utc"], "alias": "not_null_stg_trips_end_at_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.0884109, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_trips_end_at_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_at_utc\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere end_at_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_at_utc", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_at_utc", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_trips_duration_hours.7355b13f61": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_trips_duration_hours", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_trips_duration_hours.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_trips_duration_hours.7355b13f61", "fqn": ["air_boltic", "staging", "not_null_stg_trips_duration_hours"], "alias": "not_null_stg_trips_duration_hours", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.089464, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_trips_duration_hours.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect duration_hours\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere duration_hours is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "duration_hours", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "duration_hours", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_stg_trips_duration_category.51682fdcdf": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_stg_trips_duration_category", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_stg_trips_duration_category.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.not_null_stg_trips_duration_category.51682fdcdf", "fqn": ["air_boltic", "staging", "not_null_stg_trips_duration_category"], "alias": "not_null_stg_trips_duration_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.090338, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/not_null_stg_trips_duration_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect duration_category\nfrom `workspace`.`air_boltic`.`stg_trips`\nwhere duration_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "duration_category", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "duration_category", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.accepted_values_stg_trips_duration_category__short__medium__long.2f87b4d135": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "accepted_values_stg_trips_duration_category__short__medium__long", "resource_type": "test", "package_name": "air_boltic", "path": "accepted_values_stg_trips_a5d6d9321a531cae48d890a63509b7f2.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.air_boltic.accepted_values_stg_trips_duration_category__short__medium__long.2f87b4d135", "fqn": ["air_boltic", "staging", "accepted_values_stg_trips_duration_category__short__medium__long"], "alias": "accepted_values_stg_trips_a5d6d9321a531cae48d890a63509b7f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_trips_a5d6d9321a531cae48d890a63509b7f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_stg_trips_a5d6d9321a531cae48d890a63509b7f2"}, "created_at": 1750946999.091243, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_trips_a5d6d9321a531cae48d890a63509b7f2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_trips", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.stg_trips"]}, "compiled_path": "target/compiled/air_boltic/models/staging/schema.yml/accepted_values_stg_trips_a5d6d9321a531cae48d890a63509b7f2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        duration_category as value_field,\n        count(*) as n_records\n\n    from `workspace`.`air_boltic`.`stg_trips`\n    group by duration_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'short','medium','long'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "duration_category", "file_key_name": "models.stg_trips", "attached_node": "model.air_boltic.stg_trips", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["short", "medium", "long"], "column_name": "duration_category", "model": "{{ get_where_subquery(ref('stg_trips')) }}"}, "namespace": null}}, "test.air_boltic.not_null_daily_active_customers_activity_date_utc.6866700bc0": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_daily_active_customers_activity_date_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_daily_active_customers_activity_date_utc.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_daily_active_customers_activity_date_utc.6866700bc0", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_daily_active_customers_activity_date_utc"], "alias": "not_null_daily_active_customers_activity_date_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.13478, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "daily_active_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.daily_active_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/schema.yml/not_null_daily_active_customers_activity_date_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect activity_date_utc\nfrom `workspace`.`air_boltic`.`daily_active_customers`\nwhere activity_date_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_date_utc", "file_key_name": "models.daily_active_customers", "attached_node": "model.air_boltic.daily_active_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "activity_date_utc", "model": "{{ get_where_subquery(ref('daily_active_customers')) }}"}, "namespace": null}}, "test.air_boltic.unique_daily_active_customers_activity_date_utc.ab0622c784": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_daily_active_customers_activity_date_utc", "resource_type": "test", "package_name": "air_boltic", "path": "unique_daily_active_customers_activity_date_utc.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.unique_daily_active_customers_activity_date_utc.ab0622c784", "fqn": ["air_boltic", "marts", "metrics", "customers", "unique_daily_active_customers_activity_date_utc"], "alias": "unique_daily_active_customers_activity_date_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.135744, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "daily_active_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.daily_active_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/schema.yml/unique_daily_active_customers_activity_date_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    activity_date_utc as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`daily_active_customers`\nwhere activity_date_utc is not null\ngroup by activity_date_utc\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_date_utc", "file_key_name": "models.daily_active_customers", "attached_node": "model.air_boltic.daily_active_customers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "activity_date_utc", "model": "{{ get_where_subquery(ref('daily_active_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_daily_active_customers_daily_active_customers.3c011594a7": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_daily_active_customers_daily_active_customers", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_daily_active_customers_daily_active_customers.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_daily_active_customers_daily_active_customers.3c011594a7", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_daily_active_customers_daily_active_customers"], "alias": "not_null_daily_active_customers_daily_active_customers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1366131, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "daily_active_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.daily_active_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/schema.yml/not_null_daily_active_customers_daily_active_customers.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect daily_active_customers\nfrom `workspace`.`air_boltic`.`daily_active_customers`\nwhere daily_active_customers is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "daily_active_customers", "file_key_name": "models.daily_active_customers", "attached_node": "model.air_boltic.daily_active_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "daily_active_customers", "model": "{{ get_where_subquery(ref('daily_active_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_monthly_active_customers_activity_month_utc.07047545fc": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_monthly_active_customers_activity_month_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_monthly_active_customers_activity_month_utc.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_monthly_active_customers_activity_month_utc.07047545fc", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_monthly_active_customers_activity_month_utc"], "alias": "not_null_monthly_active_customers_activity_month_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.137465, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "monthly_active_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.monthly_active_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/schema.yml/not_null_monthly_active_customers_activity_month_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect activity_month_utc\nfrom `workspace`.`air_boltic`.`monthly_active_customers`\nwhere activity_month_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_month_utc", "file_key_name": "models.monthly_active_customers", "attached_node": "model.air_boltic.monthly_active_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "activity_month_utc", "model": "{{ get_where_subquery(ref('monthly_active_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_monthly_active_customers_monthly_active_customers.2c4c455c1a": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_monthly_active_customers_monthly_active_customers", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_monthly_active_customers_monthly_active_customers.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_monthly_active_customers_monthly_active_customers.2c4c455c1a", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_monthly_active_customers_monthly_active_customers"], "alias": "not_null_monthly_active_customers_monthly_active_customers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.138457, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "monthly_active_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.monthly_active_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/schema.yml/not_null_monthly_active_customers_monthly_active_customers.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect monthly_active_customers\nfrom `workspace`.`air_boltic`.`monthly_active_customers`\nwhere monthly_active_customers is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "monthly_active_customers", "file_key_name": "models.monthly_active_customers", "attached_node": "model.air_boltic.monthly_active_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "monthly_active_customers", "model": "{{ get_where_subquery(ref('monthly_active_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_weekly_active_customers_activity_week_utc.b44dcc54c9": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_weekly_active_customers_activity_week_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_weekly_active_customers_activity_week_utc.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_weekly_active_customers_activity_week_utc.b44dcc54c9", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_weekly_active_customers_activity_week_utc"], "alias": "not_null_weekly_active_customers_activity_week_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.139532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "weekly_active_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.weekly_active_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/schema.yml/not_null_weekly_active_customers_activity_week_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect activity_week_utc\nfrom `workspace`.`air_boltic`.`weekly_active_customers`\nwhere activity_week_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_week_utc", "file_key_name": "models.weekly_active_customers", "attached_node": "model.air_boltic.weekly_active_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "activity_week_utc", "model": "{{ get_where_subquery(ref('weekly_active_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_weekly_active_customers_weekly_active_customers.a4188d5240": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_weekly_active_customers_weekly_active_customers", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_weekly_active_customers_weekly_active_customers.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_weekly_active_customers_weekly_active_customers.a4188d5240", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_weekly_active_customers_weekly_active_customers"], "alias": "not_null_weekly_active_customers_weekly_active_customers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.140408, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "weekly_active_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.weekly_active_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/customers/schema.yml/not_null_weekly_active_customers_weekly_active_customers.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect weekly_active_customers\nfrom `workspace`.`air_boltic`.`weekly_active_customers`\nwhere weekly_active_customers is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weekly_active_customers", "file_key_name": "models.weekly_active_customers", "attached_node": "model.air_boltic.weekly_active_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "weekly_active_customers", "model": "{{ get_where_subquery(ref('weekly_active_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_orders_by_customer_group_type_customer_group_type.2f85b13739": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_orders_by_customer_group_type_customer_group_type", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_orders_by_customer_group_type_customer_group_type.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_orders_by_customer_group_type_customer_group_type.2f85b13739", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_orders_by_customer_group_type_customer_group_type"], "alias": "not_null_orders_by_customer_group_type_customer_group_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.141323, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "orders_by_customer_group_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_group_type", "file_key_name": "models.orders_by_customer_group_type", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_group_type", "model": "{{ get_where_subquery(ref('orders_by_customer_group_type')) }}"}, "namespace": null}}, "test.air_boltic.not_null_orders_by_customer_group_type_orders_count.0121e70a59": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_orders_by_customer_group_type_orders_count", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_orders_by_customer_group_type_orders_count.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_orders_by_customer_group_type_orders_count.0121e70a59", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_orders_by_customer_group_type_orders_count"], "alias": "not_null_orders_by_customer_group_type_orders_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.142198, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "orders_by_customer_group_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "orders_count", "file_key_name": "models.orders_by_customer_group_type", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "orders_count", "model": "{{ get_where_subquery(ref('orders_by_customer_group_type')) }}"}, "namespace": null}}, "test.air_boltic.not_null_orders_by_price_category_order_price_category.b54f80cf51": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_orders_by_price_category_order_price_category", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_orders_by_price_category_order_price_category.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_orders_by_price_category_order_price_category.b54f80cf51", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_orders_by_price_category_order_price_category"], "alias": "not_null_orders_by_price_category_order_price_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.143103, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "orders_by_price_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_price_category", "file_key_name": "models.orders_by_price_category", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_price_category", "model": "{{ get_where_subquery(ref('orders_by_price_category')) }}"}, "namespace": null}}, "test.air_boltic.not_null_orders_by_price_category_orders_count.e7f9b32eab": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_orders_by_price_category_orders_count", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_orders_by_price_category_orders_count.sql", "original_file_path": "models/marts/metrics/customers/schema.yml", "unique_id": "test.air_boltic.not_null_orders_by_price_category_orders_count.e7f9b32eab", "fqn": ["air_boltic", "marts", "metrics", "customers", "not_null_orders_by_price_category_orders_count"], "alias": "not_null_orders_by_price_category_orders_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.143968, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "orders_by_price_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "orders_count", "file_key_name": "models.orders_by_price_category", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "orders_count", "model": "{{ get_where_subquery(ref('orders_by_price_category')) }}"}, "namespace": null}}, "test.air_boltic.not_null_monthly_revenue_revenue_recognition_month_utc.b32f905377": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_monthly_revenue_revenue_recognition_month_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_monthly_revenue_revenue_recognition_month_utc.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_monthly_revenue_revenue_recognition_month_utc.b32f905377", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_monthly_revenue_revenue_recognition_month_utc"], "alias": "not_null_monthly_revenue_revenue_recognition_month_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.14847, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "monthly_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.monthly_revenue"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_monthly_revenue_revenue_recognition_month_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_recognition_month_utc\nfrom `workspace`.`air_boltic`.`monthly_revenue`\nwhere revenue_recognition_month_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_recognition_month_utc", "file_key_name": "models.monthly_revenue", "attached_node": "model.air_boltic.monthly_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_recognition_month_utc", "model": "{{ get_where_subquery(ref('monthly_revenue')) }}"}, "namespace": null}}, "test.air_boltic.not_null_monthly_revenue_revenue_eur.003aa77f75": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_monthly_revenue_revenue_eur", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_monthly_revenue_revenue_eur.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_monthly_revenue_revenue_eur.003aa77f75", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_monthly_revenue_revenue_eur"], "alias": "not_null_monthly_revenue_revenue_eur", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1495838, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "monthly_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.monthly_revenue"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_monthly_revenue_revenue_eur.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_eur\nfrom `workspace`.`air_boltic`.`monthly_revenue`\nwhere revenue_eur is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_eur", "file_key_name": "models.monthly_revenue", "attached_node": "model.air_boltic.monthly_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_eur", "model": "{{ get_where_subquery(ref('monthly_revenue')) }}"}, "namespace": null}}, "test.air_boltic.not_null_quarterly_revenue_revenue_recognition_quarter_utc.dba07b2d4a": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_quarterly_revenue_revenue_recognition_quarter_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_quarterly_revenue_revenue_recognition_quarter_utc.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_quarterly_revenue_revenue_recognition_quarter_utc.dba07b2d4a", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_quarterly_revenue_revenue_recognition_quarter_utc"], "alias": "not_null_quarterly_revenue_revenue_recognition_quarter_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.150514, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "quarterly_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.quarterly_revenue"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_quarterly_revenue_revenue_recognition_quarter_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_recognition_quarter_utc\nfrom `workspace`.`air_boltic`.`quarterly_revenue`\nwhere revenue_recognition_quarter_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_recognition_quarter_utc", "file_key_name": "models.quarterly_revenue", "attached_node": "model.air_boltic.quarterly_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_recognition_quarter_utc", "model": "{{ get_where_subquery(ref('quarterly_revenue')) }}"}, "namespace": null}}, "test.air_boltic.not_null_quarterly_revenue_revenue_eur.1a5c9143b7": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_quarterly_revenue_revenue_eur", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_quarterly_revenue_revenue_eur.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_quarterly_revenue_revenue_eur.1a5c9143b7", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_quarterly_revenue_revenue_eur"], "alias": "not_null_quarterly_revenue_revenue_eur", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.151434, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "quarterly_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.quarterly_revenue"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_quarterly_revenue_revenue_eur.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_eur\nfrom `workspace`.`air_boltic`.`quarterly_revenue`\nwhere revenue_eur is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_eur", "file_key_name": "models.quarterly_revenue", "attached_node": "model.air_boltic.quarterly_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_eur", "model": "{{ get_where_subquery(ref('quarterly_revenue')) }}"}, "namespace": null}}, "test.air_boltic.not_null_yearly_revenue_revenue_recognition_year_utc.1c7d9da201": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_yearly_revenue_revenue_recognition_year_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_yearly_revenue_revenue_recognition_year_utc.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_yearly_revenue_revenue_recognition_year_utc.1c7d9da201", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_yearly_revenue_revenue_recognition_year_utc"], "alias": "not_null_yearly_revenue_revenue_recognition_year_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.152288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "yearly_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.yearly_revenue"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_yearly_revenue_revenue_recognition_year_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_recognition_year_utc\nfrom `workspace`.`air_boltic`.`yearly_revenue`\nwhere revenue_recognition_year_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_recognition_year_utc", "file_key_name": "models.yearly_revenue", "attached_node": "model.air_boltic.yearly_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_recognition_year_utc", "model": "{{ get_where_subquery(ref('yearly_revenue')) }}"}, "namespace": null}}, "test.air_boltic.not_null_yearly_revenue_revenue_eur.142ca97735": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_yearly_revenue_revenue_eur", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_yearly_revenue_revenue_eur.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_yearly_revenue_revenue_eur.142ca97735", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_yearly_revenue_revenue_eur"], "alias": "not_null_yearly_revenue_revenue_eur", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.153141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "yearly_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.yearly_revenue"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_yearly_revenue_revenue_eur.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_eur\nfrom `workspace`.`air_boltic`.`yearly_revenue`\nwhere revenue_eur is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_eur", "file_key_name": "models.yearly_revenue", "attached_node": "model.air_boltic.yearly_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_eur", "model": "{{ get_where_subquery(ref('yearly_revenue')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_by_customer_group_customer_group_type.91e698a5c5": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_by_customer_group_customer_group_type", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_by_customer_group_customer_group_type.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_by_customer_group_customer_group_type.91e698a5c5", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_by_customer_group_customer_group_type"], "alias": "not_null_revenue_by_customer_group_customer_group_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.153991, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_by_customer_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_group_type", "file_key_name": "models.revenue_by_customer_group", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_group_type", "model": "{{ get_where_subquery(ref('revenue_by_customer_group')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_by_customer_group_revenue_eur.6c8618c326": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_by_customer_group_revenue_eur", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_by_customer_group_revenue_eur.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_by_customer_group_revenue_eur.6c8618c326", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_by_customer_group_revenue_eur"], "alias": "not_null_revenue_by_customer_group_revenue_eur", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1550012, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_by_customer_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_eur", "file_key_name": "models.revenue_by_customer_group", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_eur", "model": "{{ get_where_subquery(ref('revenue_by_customer_group')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_by_route_route.259da291ae": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_by_route_route", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_by_route_route.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_by_route_route.259da291ae", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_by_route_route"], "alias": "not_null_revenue_by_route_route", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.156084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_by_route", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.revenue_by_route"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_revenue_by_route_route.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route\nfrom `workspace`.`air_boltic`.`revenue_by_route`\nwhere route is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route", "file_key_name": "models.revenue_by_route", "attached_node": "model.air_boltic.revenue_by_route", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route", "model": "{{ get_where_subquery(ref('revenue_by_route')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_by_route_revenue_eur.b466edc3d9": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_by_route_revenue_eur", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_by_route_revenue_eur.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_by_route_revenue_eur.b466edc3d9", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_by_route_revenue_eur"], "alias": "not_null_revenue_by_route_revenue_eur", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1569889, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_by_route", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.revenue_by_route"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/revenue/schema.yml/not_null_revenue_by_route_revenue_eur.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_eur\nfrom `workspace`.`air_boltic`.`revenue_by_route`\nwhere revenue_eur is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_eur", "file_key_name": "models.revenue_by_route", "attached_node": "model.air_boltic.revenue_by_route", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_eur", "model": "{{ get_where_subquery(ref('revenue_by_route')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_per_seat_trip_id.168cfa8f44": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_per_seat_trip_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_per_seat_trip_id.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_per_seat_trip_id.168cfa8f44", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_per_seat_trip_id"], "alias": "not_null_revenue_per_seat_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1579149, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_per_seat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.revenue_per_seat", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('revenue_per_seat')) }}"}, "namespace": null}}, "test.air_boltic.relationships_revenue_per_seat_trip_id__trip_id__ref_dim_orders_.8cbfe73daa": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_revenue_per_seat_trip_id__trip_id__ref_dim_orders_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_revenue_per_seat_d0ec54026baa2016c7f39b570249cb11.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.relationships_revenue_per_seat_trip_id__trip_id__ref_dim_orders_.8cbfe73daa", "fqn": ["air_boltic", "marts", "metrics", "revenue", "relationships_revenue_per_seat_trip_id__trip_id__ref_dim_orders_"], "alias": "relationships_revenue_per_seat_d0ec54026baa2016c7f39b570249cb11", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_revenue_per_seat_d0ec54026baa2016c7f39b570249cb11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_revenue_per_seat_d0ec54026baa2016c7f39b570249cb11"}, "created_at": 1750946999.1588, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_revenue_per_seat_d0ec54026baa2016c7f39b570249cb11\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_orders", "package": null, "version": null}, {"name": "revenue_per_seat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.revenue_per_seat", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_orders')", "field": "trip_id", "column_name": "trip_id", "model": "{{ get_where_subquery(ref('revenue_per_seat')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_per_seat_airplane_id.8565d675c7": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_per_seat_airplane_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_per_seat_airplane_id.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_per_seat_airplane_id.8565d675c7", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_per_seat_airplane_id"], "alias": "not_null_revenue_per_seat_airplane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.161324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_per_seat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.revenue_per_seat", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "airplane_id", "model": "{{ get_where_subquery(ref('revenue_per_seat')) }}"}, "namespace": null}}, "test.air_boltic.relationships_revenue_per_seat_airplane_id__airplane_id__ref_dim_airplanes_.f300dbdfd3": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_revenue_per_seat_airplane_id__airplane_id__ref_dim_airplanes_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_revenue_per_seat_20ae1fb077f48e78700b44582515c16e.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.relationships_revenue_per_seat_airplane_id__airplane_id__ref_dim_airplanes_.f300dbdfd3", "fqn": ["air_boltic", "marts", "metrics", "revenue", "relationships_revenue_per_seat_airplane_id__airplane_id__ref_dim_airplanes_"], "alias": "relationships_revenue_per_seat_20ae1fb077f48e78700b44582515c16e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_revenue_per_seat_20ae1fb077f48e78700b44582515c16e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_revenue_per_seat_20ae1fb077f48e78700b44582515c16e"}, "created_at": 1750946999.162218, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_revenue_per_seat_20ae1fb077f48e78700b44582515c16e\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_airplanes", "package": null, "version": null}, {"name": "revenue_per_seat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_airplanes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.revenue_per_seat", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_airplanes')", "field": "airplane_id", "column_name": "airplane_id", "model": "{{ get_where_subquery(ref('revenue_per_seat')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_per_seat_max_seats.ffed1cdcf8": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_per_seat_max_seats", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_per_seat_max_seats.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_per_seat_max_seats.ffed1cdcf8", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_per_seat_max_seats"], "alias": "not_null_revenue_per_seat_max_seats", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.165411, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_per_seat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "max_seats", "file_key_name": "models.revenue_per_seat", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "max_seats", "model": "{{ get_where_subquery(ref('revenue_per_seat')) }}"}, "namespace": null}}, "test.air_boltic.not_null_revenue_per_seat_revenue_per_seat_eur.08f04d526c": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_revenue_per_seat_revenue_per_seat_eur", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_revenue_per_seat_revenue_per_seat_eur.sql", "original_file_path": "models/marts/metrics/revenue/schema.yml", "unique_id": "test.air_boltic.not_null_revenue_per_seat_revenue_per_seat_eur.08f04d526c", "fqn": ["air_boltic", "marts", "metrics", "revenue", "not_null_revenue_per_seat_revenue_per_seat_eur"], "alias": "not_null_revenue_per_seat_revenue_per_seat_eur", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.166302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "revenue_per_seat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_per_seat_eur", "file_key_name": "models.revenue_per_seat", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_per_seat_eur", "model": "{{ get_where_subquery(ref('revenue_per_seat')) }}"}, "namespace": null}}, "test.air_boltic.not_null_avg_trip_duration_route.2f38cee8fb": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_avg_trip_duration_route", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_avg_trip_duration_route.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_avg_trip_duration_route.2f38cee8fb", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_avg_trip_duration_route"], "alias": "not_null_avg_trip_duration_route", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.169656, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "avg_trip_duration", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route", "file_key_name": "models.avg_trip_duration", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route", "model": "{{ get_where_subquery(ref('avg_trip_duration')) }}"}, "namespace": null}}, "test.air_boltic.not_null_avg_trip_duration_avg_trip_duration_hours.36056714cd": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_avg_trip_duration_avg_trip_duration_hours", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_avg_trip_duration_avg_trip_duration_hours.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_avg_trip_duration_avg_trip_duration_hours.36056714cd", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_avg_trip_duration_avg_trip_duration_hours"], "alias": "not_null_avg_trip_duration_avg_trip_duration_hours", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1705759, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "avg_trip_duration", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_trip_duration_hours", "file_key_name": "models.avg_trip_duration", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_trip_duration_hours", "model": "{{ get_where_subquery(ref('avg_trip_duration')) }}"}, "namespace": null}}, "test.air_boltic.not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate.5793da6e9b": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate.5793da6e9b", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate"], "alias": "not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1714828, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "avg_trip_cancellation_rate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.avg_trip_cancellation_rate"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_trip_cancellation_rate\nfrom `workspace`.`air_boltic`.`avg_trip_cancellation_rate`\nwhere avg_trip_cancellation_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_trip_cancellation_rate", "file_key_name": "models.avg_trip_cancellation_rate", "attached_node": "model.air_boltic.avg_trip_cancellation_rate", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_trip_cancellation_rate", "model": "{{ get_where_subquery(ref('avg_trip_cancellation_rate')) }}"}, "namespace": null}}, "test.air_boltic.not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate.3cf9e6b037": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate.3cf9e6b037", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate"], "alias": "not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.172559, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "avg_trip_occupancy_rate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.avg_trip_occupancy_rate"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_trip_occupancy_rate\nfrom `workspace`.`air_boltic`.`avg_trip_occupancy_rate`\nwhere avg_trip_occupancy_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_trip_occupancy_rate", "file_key_name": "models.avg_trip_occupancy_rate", "attached_node": "model.air_boltic.avg_trip_occupancy_rate", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_trip_occupancy_rate", "model": "{{ get_where_subquery(ref('avg_trip_occupancy_rate')) }}"}, "namespace": null}}, "test.air_boltic.not_null_trips_by_plane_manufacturer_airplane_manufacturer.4c00ad991a": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_trips_by_plane_manufacturer_airplane_manufacturer", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_trips_by_plane_manufacturer_airplane_manufacturer.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_trips_by_plane_manufacturer_airplane_manufacturer.4c00ad991a", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_trips_by_plane_manufacturer_airplane_manufacturer"], "alias": "not_null_trips_by_plane_manufacturer_airplane_manufacturer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.173667, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "trips_by_plane_manufacturer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.trips_by_plane_manufacturer"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_trips_by_plane_manufacturer_airplane_manufacturer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect airplane_manufacturer\nfrom `workspace`.`air_boltic`.`trips_by_plane_manufacturer`\nwhere airplane_manufacturer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_manufacturer", "file_key_name": "models.trips_by_plane_manufacturer", "attached_node": "model.air_boltic.trips_by_plane_manufacturer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "airplane_manufacturer", "model": "{{ get_where_subquery(ref('trips_by_plane_manufacturer')) }}"}, "namespace": null}}, "test.air_boltic.not_null_trips_by_plane_manufacturer_trips_count.4e33e6a6b7": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_trips_by_plane_manufacturer_trips_count", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_trips_by_plane_manufacturer_trips_count.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_trips_by_plane_manufacturer_trips_count.4e33e6a6b7", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_trips_by_plane_manufacturer_trips_count"], "alias": "not_null_trips_by_plane_manufacturer_trips_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.17504, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "trips_by_plane_manufacturer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.trips_by_plane_manufacturer"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_trips_by_plane_manufacturer_trips_count.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trips_count\nfrom `workspace`.`air_boltic`.`trips_by_plane_manufacturer`\nwhere trips_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trips_count", "file_key_name": "models.trips_by_plane_manufacturer", "attached_node": "model.air_boltic.trips_by_plane_manufacturer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trips_count", "model": "{{ get_where_subquery(ref('trips_by_plane_manufacturer')) }}"}, "namespace": null}}, "test.air_boltic.not_null_trips_by_plane_size_category_airplane_size_category.66b5a8d743": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_trips_by_plane_size_category_airplane_size_category", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_trips_by_plane_size_category_airplane_size_category.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_trips_by_plane_size_category_airplane_size_category.66b5a8d743", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_trips_by_plane_size_category_airplane_size_category"], "alias": "not_null_trips_by_plane_size_category_airplane_size_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.17595, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "trips_by_plane_size_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.trips_by_plane_size_category"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_trips_by_plane_size_category_airplane_size_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect airplane_size_category\nfrom `workspace`.`air_boltic`.`trips_by_plane_size_category`\nwhere airplane_size_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_size_category", "file_key_name": "models.trips_by_plane_size_category", "attached_node": "model.air_boltic.trips_by_plane_size_category", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "airplane_size_category", "model": "{{ get_where_subquery(ref('trips_by_plane_size_category')) }}"}, "namespace": null}}, "test.air_boltic.not_null_trips_by_plane_size_category_trips_count.28b6ce8f8c": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_trips_by_plane_size_category_trips_count", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_trips_by_plane_size_category_trips_count.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_trips_by_plane_size_category_trips_count.28b6ce8f8c", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_trips_by_plane_size_category_trips_count"], "alias": "not_null_trips_by_plane_size_category_trips_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.176935, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "trips_by_plane_size_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.trips_by_plane_size_category"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_trips_by_plane_size_category_trips_count.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trips_count\nfrom `workspace`.`air_boltic`.`trips_by_plane_size_category`\nwhere trips_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trips_count", "file_key_name": "models.trips_by_plane_size_category", "attached_node": "model.air_boltic.trips_by_plane_size_category", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trips_count", "model": "{{ get_where_subquery(ref('trips_by_plane_size_category')) }}"}, "namespace": null}}, "test.air_boltic.not_null_trips_by_route_route.c53b6d8b47": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_trips_by_route_route", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_trips_by_route_route.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_trips_by_route_route.c53b6d8b47", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_trips_by_route_route"], "alias": "not_null_trips_by_route_route", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.177844, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "trips_by_route", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.trips_by_route"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_trips_by_route_route.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route\nfrom `workspace`.`air_boltic`.`trips_by_route`\nwhere route is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "route", "file_key_name": "models.trips_by_route", "attached_node": "model.air_boltic.trips_by_route", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "route", "model": "{{ get_where_subquery(ref('trips_by_route')) }}"}, "namespace": null}}, "test.air_boltic.not_null_trips_by_route_trips_count.11db13b119": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_trips_by_route_trips_count", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_trips_by_route_trips_count.sql", "original_file_path": "models/marts/metrics/trips/schema.yml", "unique_id": "test.air_boltic.not_null_trips_by_route_trips_count.11db13b119", "fqn": ["air_boltic", "marts", "metrics", "trips", "not_null_trips_by_route_trips_count"], "alias": "not_null_trips_by_route_trips_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.178707, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "trips_by_route", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.trips_by_route"]}, "compiled_path": "target/compiled/air_boltic/models/marts/metrics/trips/schema.yml/not_null_trips_by_route_trips_count.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trips_count\nfrom `workspace`.`air_boltic`.`trips_by_route`\nwhere trips_count is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trips_count", "file_key_name": "models.trips_by_route", "attached_node": "model.air_boltic.trips_by_route", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trips_count", "model": "{{ get_where_subquery(ref('trips_by_route')) }}"}, "namespace": null}}, "test.air_boltic.not_null_dim_airplanes_airplane_id.599e9915fc": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_dim_airplanes_airplane_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_dim_airplanes_airplane_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_dim_airplanes_airplane_id.599e9915fc", "fqn": ["air_boltic", "marts", "core", "not_null_dim_airplanes_airplane_id"], "alias": "not_null_dim_airplanes_airplane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.181834, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_dim_airplanes_airplane_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect airplane_id\nfrom `workspace`.`air_boltic`.`dim_airplanes`\nwhere airplane_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.dim_airplanes", "attached_node": "model.air_boltic.dim_airplanes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "airplane_id", "model": "{{ get_where_subquery(ref('dim_airplanes')) }}"}, "namespace": null}}, "test.air_boltic.unique_dim_airplanes_airplane_id.dbefb700af": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_dim_airplanes_airplane_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_dim_airplanes_airplane_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.unique_dim_airplanes_airplane_id.dbefb700af", "fqn": ["air_boltic", "marts", "core", "unique_dim_airplanes_airplane_id"], "alias": "unique_dim_airplanes_airplane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.182849, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_airplanes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_airplanes"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/unique_dim_airplanes_airplane_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    airplane_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`dim_airplanes`\nwhere airplane_id is not null\ngroup by airplane_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.dim_airplanes", "attached_node": "model.air_boltic.dim_airplanes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "airplane_id", "model": "{{ get_where_subquery(ref('dim_airplanes')) }}"}, "namespace": null}}, "test.air_boltic.not_null_dim_customers_customer_id.dd91cd1c8d": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_dim_customers_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_dim_customers_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_dim_customers_customer_id.dd91cd1c8d", "fqn": ["air_boltic", "marts", "core", "not_null_dim_customers_customer_id"], "alias": "not_null_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.183701, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_dim_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `workspace`.`air_boltic`.`dim_customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.dim_customers", "attached_node": "model.air_boltic.dim_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}}, "test.air_boltic.unique_dim_customers_customer_id.15c9f1e2fd": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_dim_customers_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_dim_customers_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.unique_dim_customers_customer_id.15c9f1e2fd", "fqn": ["air_boltic", "marts", "core", "unique_dim_customers_customer_id"], "alias": "unique_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.1845682, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/unique_dim_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`dim_customers`\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.dim_customers", "attached_node": "model.air_boltic.dim_customers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_dim_customers_group_type.0b528c4b8a": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_dim_customers_group_type", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_dim_customers_group_type.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_dim_customers_group_type.0b528c4b8a", "fqn": ["air_boltic", "marts", "core", "not_null_dim_customers_group_type"], "alias": "not_null_dim_customers_group_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.185418, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_customers"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_dim_customers_group_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect group_type\nfrom `workspace`.`air_boltic`.`dim_customers`\nwhere group_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "group_type", "file_key_name": "models.dim_customers", "attached_node": "model.air_boltic.dim_customers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "group_type", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}}, "test.air_boltic.not_null_fct_orders_order_id.4e687af8d0": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_fct_orders_order_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_fct_orders_order_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_fct_orders_order_id.4e687af8d0", "fqn": ["air_boltic", "marts", "core", "not_null_fct_orders_order_id"], "alias": "not_null_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.186261, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_fct_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.unique_fct_orders_order_id.523ddb6ce5": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_fct_orders_order_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_fct_orders_order_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.unique_fct_orders_order_id.523ddb6ce5", "fqn": ["air_boltic", "marts", "core", "unique_fct_orders_order_id"], "alias": "unique_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.187157, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/unique_fct_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_fct_orders_customer_id.16fe324f7b": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_fct_orders_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_fct_orders_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_fct_orders_customer_id.16fe324f7b", "fqn": ["air_boltic", "marts", "core", "not_null_fct_orders_customer_id"], "alias": "not_null_fct_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.188062, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_fct_orders_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4", "fqn": ["air_boltic", "marts", "core", "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_"], "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c"}, "created_at": 1750946999.189194, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_customers", "model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `workspace`.`air_boltic`.`fct_orders`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `workspace`.`air_boltic`.`dim_customers`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_fct_orders_airplane_id.fbf7fae39c": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_fct_orders_airplane_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_fct_orders_airplane_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_fct_orders_airplane_id.fbf7fae39c", "fqn": ["air_boltic", "marts", "core", "not_null_fct_orders_airplane_id"], "alias": "not_null_fct_orders_airplane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.191749, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_fct_orders_airplane_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect airplane_id\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere airplane_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "airplane_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_.c0299d113e": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_fct_orders_8fc48002ab66eda56e7e5fd9f886f1aa.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_.c0299d113e", "fqn": ["air_boltic", "marts", "core", "relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_"], "alias": "relationships_fct_orders_8fc48002ab66eda56e7e5fd9f886f1aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_8fc48002ab66eda56e7e5fd9f886f1aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_orders_8fc48002ab66eda56e7e5fd9f886f1aa"}, "created_at": 1750946999.1926122, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_8fc48002ab66eda56e7e5fd9f886f1aa\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_airplanes", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_airplanes", "model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/relationships_fct_orders_8fc48002ab66eda56e7e5fd9f886f1aa.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select airplane_id as from_field\n    from `workspace`.`air_boltic`.`fct_orders`\n    where airplane_id is not null\n),\n\nparent as (\n    select airplane_id as to_field\n    from `workspace`.`air_boltic`.`dim_airplanes`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "airplane_id", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_airplanes')", "field": "airplane_id", "column_name": "airplane_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_fct_orders_trip_id.94af7c2e45": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_fct_orders_trip_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_fct_orders_trip_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_fct_orders_trip_id.94af7c2e45", "fqn": ["air_boltic", "marts", "core", "not_null_fct_orders_trip_id"], "alias": "not_null_fct_orders_trip_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.194846, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_fct_orders_trip_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere trip_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "trip_id", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.not_null_fct_orders_revenue_recognition_date_utc.d3e2b0cb81": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_fct_orders_revenue_recognition_date_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_fct_orders_revenue_recognition_date_utc.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_fct_orders_revenue_recognition_date_utc.d3e2b0cb81", "fqn": ["air_boltic", "marts", "core", "not_null_fct_orders_revenue_recognition_date_utc"], "alias": "not_null_fct_orders_revenue_recognition_date_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.195696, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_orders"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_fct_orders_revenue_recognition_date_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect revenue_recognition_date_utc\nfrom `workspace`.`air_boltic`.`fct_orders`\nwhere revenue_recognition_date_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "revenue_recognition_date_utc", "file_key_name": "models.fct_orders", "attached_node": "model.air_boltic.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "revenue_recognition_date_utc", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.air_boltic.unique_fct_customer_activity_customer_id.4522255ca8": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_fct_customer_activity_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "unique_fct_customer_activity_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.unique_fct_customer_activity_customer_id.4522255ca8", "fqn": ["air_boltic", "marts", "core", "unique_fct_customer_activity_customer_id"], "alias": "unique_fct_customer_activity_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.196655, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/unique_fct_customer_activity_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`fct_customer_activity`\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_customer_activity", "attached_node": "model.air_boltic.fct_customer_activity", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_customer_activity')) }}"}, "namespace": null}}, "test.air_boltic.not_null_fct_customer_activity_customer_id.5368e5afe7": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_fct_customer_activity_customer_id", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_fct_customer_activity_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_fct_customer_activity_customer_id.5368e5afe7", "fqn": ["air_boltic", "marts", "core", "not_null_fct_customer_activity_customer_id"], "alias": "not_null_fct_customer_activity_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.19778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_fct_customer_activity_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `workspace`.`air_boltic`.`fct_customer_activity`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_customer_activity", "attached_node": "model.air_boltic.fct_customer_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_customer_activity')) }}"}, "namespace": null}}, "test.air_boltic.relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_.b5a355b9eb": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_", "resource_type": "test", "package_name": "air_boltic", "path": "relationships_fct_customer_act_dec603d50151f74f0620a1803c96f60d.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_.b5a355b9eb", "fqn": ["air_boltic", "marts", "core", "relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_"], "alias": "relationships_fct_customer_act_dec603d50151f74f0620a1803c96f60d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_customer_act_dec603d50151f74f0620a1803c96f60d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_customer_act_dec603d50151f74f0620a1803c96f60d"}, "created_at": 1750946999.1986601, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_customer_act_dec603d50151f74f0620a1803c96f60d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers", "package": null, "version": null}, {"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.dim_customers", "model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/relationships_fct_customer_act_dec603d50151f74f0620a1803c96f60d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `workspace`.`air_boltic`.`fct_customer_activity`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `workspace`.`air_boltic`.`dim_customers`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_customer_activity", "attached_node": "model.air_boltic.fct_customer_activity", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_customer_activity')) }}"}, "namespace": null}}, "test.air_boltic.not_null_fct_customer_activity_activity_date_utc.3692e0e1d7": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "not_null_fct_customer_activity_activity_date_utc", "resource_type": "test", "package_name": "air_boltic", "path": "not_null_fct_customer_activity_activity_date_utc.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.not_null_fct_customer_activity_activity_date_utc.3692e0e1d7", "fqn": ["air_boltic", "marts", "core", "not_null_fct_customer_activity_activity_date_utc"], "alias": "not_null_fct_customer_activity_activity_date_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.201289, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/not_null_fct_customer_activity_activity_date_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect activity_date_utc\nfrom `workspace`.`air_boltic`.`fct_customer_activity`\nwhere activity_date_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_date_utc", "file_key_name": "models.fct_customer_activity", "attached_node": "model.air_boltic.fct_customer_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "activity_date_utc", "model": "{{ get_where_subquery(ref('fct_customer_activity')) }}"}, "namespace": null}}, "test.air_boltic.unique_fct_customer_activity_activity_date_utc.d188345dd4": {"database": "workspace", "schema": "air_boltic_dbt_test__audit", "name": "unique_fct_customer_activity_activity_date_utc", "resource_type": "test", "package_name": "air_boltic", "path": "unique_fct_customer_activity_activity_date_utc.sql", "original_file_path": "models/marts/core/schema.yml", "unique_id": "test.air_boltic.unique_fct_customer_activity_activity_date_utc.d188345dd4", "fqn": ["air_boltic", "marts", "core", "unique_fct_customer_activity_activity_date_utc"], "alias": "unique_fct_customer_activity_activity_date_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1750946999.202136, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.air_boltic.fct_customer_activity"]}, "compiled_path": "target/compiled/air_boltic/models/marts/core/schema.yml/unique_fct_customer_activity_activity_date_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    activity_date_utc as unique_field,\n    count(*) as n_records\n\nfrom `workspace`.`air_boltic`.`fct_customer_activity`\nwhere activity_date_utc is not null\ngroup by activity_date_utc\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "activity_date_utc", "file_key_name": "models.fct_customer_activity", "attached_node": "model.air_boltic.fct_customer_activity", "test_metadata": {"name": "unique", "kwargs": {"column_name": "activity_date_utc", "model": "{{ get_where_subquery(ref('fct_customer_activity')) }}"}, "namespace": null}}}, "sources": {"source.air_boltic.raw.aeroplane_models": {"database": "workspace", "schema": "air_boltic_raw", "name": "aeroplane_models", "resource_type": "source", "package_name": "air_boltic", "path": "models/staging/schema.yml", "original_file_path": "models/staging/schema.yml", "unique_id": "source.air_boltic.raw.aeroplane_models", "fqn": ["air_boltic", "staging", "raw", "aeroplane_models"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "aeroplane_models", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`workspace`.`air_boltic_raw`.`aeroplane_models`", "created_at": 1750946999.210381, "unrendered_database": null, "unrendered_schema": "air_boltic_raw", "doc_blocks": []}, "source.air_boltic.raw.aeroplanes": {"database": "workspace", "schema": "air_boltic_raw", "name": "aeroplanes", "resource_type": "source", "package_name": "air_boltic", "path": "models/staging/schema.yml", "original_file_path": "models/staging/schema.yml", "unique_id": "source.air_boltic.raw.aeroplanes", "fqn": ["air_boltic", "staging", "raw", "aeroplanes"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "aeroplanes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`workspace`.`air_boltic_raw`.`aeroplanes`", "created_at": 1750946999.211137, "unrendered_database": null, "unrendered_schema": "air_boltic_raw", "doc_blocks": []}, "source.air_boltic.raw.cities": {"database": "workspace", "schema": "air_boltic_raw", "name": "cities", "resource_type": "source", "package_name": "air_boltic", "path": "models/staging/schema.yml", "original_file_path": "models/staging/schema.yml", "unique_id": "source.air_boltic.raw.cities", "fqn": ["air_boltic", "staging", "raw", "cities"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "cities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`workspace`.`air_boltic_raw`.`cities`", "created_at": 1750946999.211327, "unrendered_database": null, "unrendered_schema": "air_boltic_raw", "doc_blocks": []}, "source.air_boltic.raw.customers": {"database": "workspace", "schema": "air_boltic_raw", "name": "customers", "resource_type": "source", "package_name": "air_boltic", "path": "models/staging/schema.yml", "original_file_path": "models/staging/schema.yml", "unique_id": "source.air_boltic.raw.customers", "fqn": ["air_boltic", "staging", "raw", "customers"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`workspace`.`air_boltic_raw`.`customers`", "created_at": 1750946999.2115111, "unrendered_database": null, "unrendered_schema": "air_boltic_raw", "doc_blocks": []}, "source.air_boltic.raw.customer_groups": {"database": "workspace", "schema": "air_boltic_raw", "name": "customer_groups", "resource_type": "source", "package_name": "air_boltic", "path": "models/staging/schema.yml", "original_file_path": "models/staging/schema.yml", "unique_id": "source.air_boltic.raw.customer_groups", "fqn": ["air_boltic", "staging", "raw", "customer_groups"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "customer_groups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`workspace`.`air_boltic_raw`.`customer_groups`", "created_at": 1750946999.211694, "unrendered_database": null, "unrendered_schema": "air_boltic_raw", "doc_blocks": []}, "source.air_boltic.raw.orders": {"database": "workspace", "schema": "air_boltic_raw", "name": "orders", "resource_type": "source", "package_name": "air_boltic", "path": "models/staging/schema.yml", "original_file_path": "models/staging/schema.yml", "unique_id": "source.air_boltic.raw.orders", "fqn": ["air_boltic", "staging", "raw", "orders"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`workspace`.`air_boltic_raw`.`orders`", "created_at": 1750946999.211877, "unrendered_database": null, "unrendered_schema": "air_boltic_raw", "doc_blocks": []}, "source.air_boltic.raw.trips": {"database": "workspace", "schema": "air_boltic_raw", "name": "trips", "resource_type": "source", "package_name": "air_boltic", "path": "models/staging/schema.yml", "original_file_path": "models/staging/schema.yml", "unique_id": "source.air_boltic.raw.trips", "fqn": ["air_boltic", "staging", "raw", "trips"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "trips", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`workspace`.`air_boltic_raw`.`trips`", "created_at": 1750946999.212061, "unrendered_database": null, "unrendered_schema": "air_boltic_raw", "doc_blocks": []}}, "macros": {"macro.dbt_databricks.materialization_materialized_view_databricks": {"name": "materialization_materialized_view_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_databricks.materialization_materialized_view_databricks", "macro_sql": "{% materialization materialized_view, adapter = 'databricks' %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ execute_no_op(target_relation) }}\n    {% else %}\n        {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_databricks.materialized_view_get_build_sql", "macro.dbt_databricks.execute_no_op", "macro.dbt_databricks.materialized_view_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1422348, "supported_languages": ["sql"]}, "macro.dbt_databricks.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_databricks.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation) %}\n    {% set sql = adapter.clean_sql(sql) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_configuration_changes(existing_relation) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, None, None) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = \"\" %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.get_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt_databricks.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.143372, "supported_languages": null}, "macro.dbt_databricks.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_databricks.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {{ execute_multiple_statements(build_sql) }}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model, for_relation=False) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_databricks.execute_multiple_statements", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.143879, "supported_languages": null}, "macro.dbt_databricks.materialization_view_databricks": {"name": "materialization_view_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_databricks.materialization_view_databricks", "macro_sql": "{% materialization view, adapter='databricks' -%}\n  {{ log(\"MATERIALIZING VIEW\") }}\n  {%- set existing_relation = load_relation_with_metadata(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {% set grant_config = config.get('grants') %}\n  {% set tags = config.get('databricks_tags') %}\n  {% set sql = adapter.clean_sql(sql) %}\n\n  {% if adapter.behavior.use_materialization_v2 %}\n    {{ run_pre_hooks() }}\n    {% if existing_relation %}\n      {% if relation_should_be_altered(existing_relation) %}\n        {% set configuration_changes = get_configuration_changes(existing_relation) %}\n        {% if configuration_changes and configuration_changes.changes %}\n          {% if configuration_changes.requires_full_refresh %}\n            {{ log('Using replace_with_view') }}\n            {{ replace_with_view(existing_relation, target_relation) }}\n          {% else %}\n            {{ log('Using alter_view') }}\n            {{ log(configuration_changes.changes) }}\n            {{ alter_view(target_relation, configuration_changes.changes) }}\n          {% endif %}\n        {% else %}\n          {{ execute_no_op(target_relation) }}\n        {% endif %}\n      {% else %}\n        {{ replace_with_view(existing_relation, target_relation) }}\n      {% endif %}\n    {% else %}\n      {% call statement('main') -%}\n        {{ get_create_view_as_sql(target_relation, sql) }}\n      {%- endcall %}\n      {{ apply_tags(target_relation, tags) }}\n    {% endif %}\n    {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n    {{ run_post_hooks() }}\n\n  {% else %}\n    {{ run_hooks(pre_hooks) }}\n\n    -- If there's a table with the same name and we weren't told to full refresh,\n    -- that's an error. If we were told to full refresh, drop it. This behavior differs\n    -- for Snowflake and BigQuery, so multiple dispatch is used.\n    {%- if existing_relation is not none and not existing_relation.is_view -%}\n      {{ handle_existing_table(should_full_refresh(), existing_relation) }}\n    {%- endif -%}\n\n    -- build model\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(target_relation, sql) }}\n    {%- endcall %}\n\n    {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n    {%- do apply_tags(target_relation, tags) -%}\n\n    {{ run_hooks(post_hooks) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_databricks.load_relation_with_metadata", "macro.dbt_databricks.run_pre_hooks", "macro.dbt_databricks.relation_should_be_altered", "macro.dbt_databricks.get_configuration_changes", "macro.dbt_databricks.replace_with_view", "macro.dbt_databricks.alter_view", "macro.dbt_databricks.execute_no_op", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt_databricks.apply_tags", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt_databricks.run_post_hooks", "macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.146517, "supported_languages": ["sql"]}, "macro.dbt_databricks.replace_with_view": {"name": "replace_with_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_databricks.replace_with_view", "macro_sql": "{% macro replace_with_view(existing_relation, target_relation) %}\n  {% set sql = adapter.clean_sql(sql) %}\n  {% set tags = config.get('databricks_tags') %}\n  {{ execute_multiple_statements(get_replace_sql(existing_relation, target_relation, sql)) }}\n  {%- do apply_tags(target_relation, tags) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.execute_multiple_statements", "macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.apply_tags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.146915, "supported_languages": null}, "macro.dbt_databricks.relation_should_be_altered": {"name": "relation_should_be_altered", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_databricks.relation_should_be_altered", "macro_sql": "{% macro relation_should_be_altered(existing_relation) %}\n  {% set update_via_alter = config.get('view_update_via_alter', False) | as_bool %}\n  {% if existing_relation.is_view and update_via_alter %}\n    {% if existing_relation.is_hive_metastore() %}\n      {{ exceptions.raise_compiler_error(\"Cannot update a view in the Hive metastore via ALTER VIEW. Please set `view_update_via_alter: false` in your model configuration.\") }}\n    {% endif %}\n    {{ return(True) }}\n  {% endif %}\n  {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.147292, "supported_languages": null}, "macro.dbt_databricks.materialization_table_databricks": {"name": "materialization_table_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_databricks.materialization_table_databricks", "macro_sql": "{% materialization table, adapter = 'databricks', supported_languages=['sql', 'python'] %}\n  {{ log(\"MATERIALIZING TABLE\") }}\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set tblproperties = config.get('tblproperties') -%}\n  {%- set tags = config.get('databricks_tags') -%}\n  {%- set safe_create = config.get('use_safer_relation_operations', False) %}\n  {% set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier, needs_information=True) %}\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set compiled_code = adapter.clean_sql(compiled_code) %}\n\n  {% if adapter.behavior.use_materialization_v2 %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set staging_relation = make_staging_relation(target_relation) %}\n\n    {{ run_pre_hooks() }}\n    \n    {% call statement('main', language=language) %}\n      {{ get_create_intermediate_table(intermediate_relation, compiled_code, language) }}\n    {% endcall %}\n    {% if not existing_relation %}\n      {{ create_table_at(target_relation, intermediate_relation, compiled_code) }}\n    {% else %}\n      {% if safe_create and existing_relation.can_be_renamed %}\n        {{ safe_relation_replace(existing_relation, staging_relation, intermediate_relation, compiled_code) }}\n      {% else %}\n        {% if existing_relation and (existing_relation.type != 'table' or not (existing_relation.can_be_replaced and config.get('file_format', default='delta') == 'delta')) -%}\n          {{ adapter.drop_relation(existing_relation) }}\n        {%- endif %}\n        {{ create_table_at(target_relation, intermediate_relation, compiled_code) }}\n      {% endif %}\n    {% endif %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {{ apply_grants(target_relation, grant_config, should_revoke) }}\n\n    {% if language == 'python' %}\n      {{ drop_relation_if_exists(intermediate_relation) }}\n    {% endif %}\n    \n    {{ run_post_hooks() }}\n  {% else %}\n    {{ run_hooks(pre_hooks) }}\n    -- setup: if the target relation already exists, drop it\n    -- in case if the existing and future table is delta, we want to do a\n    -- create or replace table instead of dropping, so we don't have the table unavailable\n    {% if existing_relation and (existing_relation.type != 'table' or not (existing_relation.can_be_replaced and config.get('file_format', default='delta') == 'delta')) -%}\n      {{ adapter.drop_relation(existing_relation) }}\n    {%- endif %}\n\n    -- build model\n\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke) %}\n    {% if language==\"python\" %}\n      {% do apply_tblproperties(target_relation, tblproperties) %}\n    {% endif %}\n    {%- do apply_tags(target_relation, tags) -%}\n\n    {% do persist_docs(target_relation, model, for_relation=language=='python') %}\n\n    {% do persist_constraints(target_relation, model) %}\n\n    {% do optimize(target_relation) %}\n\n    {{ run_hooks(post_hooks) }}\n\n  {% endif %}\n  {{ return({'relations': [target_relation]})}}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt_databricks.make_staging_relation", "macro.dbt_databricks.run_pre_hooks", "macro.dbt.statement", "macro.dbt_databricks.get_create_intermediate_table", "macro.dbt_databricks.create_table_at", "macro.dbt_databricks.safe_relation_replace", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.drop_relation_if_exists", "macro.dbt_databricks.run_post_hooks", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt_databricks.apply_tblproperties", "macro.dbt_databricks.apply_tags", "macro.dbt.persist_docs", "macro.dbt_databricks.persist_constraints", "macro.dbt_databricks.optimize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.150406, "supported_languages": ["sql", "python"]}, "macro.dbt_databricks.run_pre_hooks": {"name": "run_pre_hooks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt_databricks.run_pre_hooks", "macro_sql": "{% macro run_pre_hooks() %}\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.150662, "supported_languages": null}, "macro.dbt_databricks.run_post_hooks": {"name": "run_post_hooks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt_databricks.run_post_hooks", "macro_sql": "{% macro run_post_hooks() %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1508532, "supported_languages": null}, "macro.dbt_databricks.materialization_snapshot_databricks": {"name": "materialization_snapshot_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_databricks.materialization_snapshot_databricks", "macro_sql": "{% materialization snapshot, adapter='databricks' %}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n  {% set sql = adapter.clean_sql(sql) %}\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'delta') -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = databricks__get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table',\n          needs_information=True) -%}\n\n  {%- if file_format not in ['delta', 'hudi'] -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta' or 'hudi'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta and not target_relation.is_hudi -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta' or 'hudi'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, adapter.clean_sql(model['compiled_code'])) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot", "macro.dbt_databricks.persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.154895, "supported_languages": ["sql"]}, "macro.dbt_databricks.materialization_streaming_table_databricks": {"name": "materialization_streaming_table_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/streaming_table.sql", "original_file_path": "macros/materializations/streaming_table.sql", "unique_id": "macro.dbt_databricks.materialization_streaming_table_databricks", "macro_sql": "{% materialization streaming_table, adapter='databricks' %}\n  {% set existing_relation = load_cached_relation(this) %}\n  {% set target_relation = this.incorporate(type=this.StreamingTable) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% set build_sql = streaming_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ execute_no_op(target_relation) }}\n    {% else %}\n        {{ streaming_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_databricks.streaming_table_get_build_sql", "macro.dbt_databricks.execute_no_op", "macro.dbt_databricks.streaming_table_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.155956, "supported_languages": ["sql"]}, "macro.dbt_databricks.streaming_table_get_build_sql": {"name": "streaming_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/streaming_table.sql", "original_file_path": "macros/materializations/streaming_table.sql", "unique_id": "macro.dbt_databricks.streaming_table_get_build_sql", "macro_sql": "{% macro streaming_table_get_build_sql(existing_relation, target_relation) %}\n    {% set sql = adapter.clean_sql(sql) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_streaming_table_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_streaming_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_configuration_changes(existing_relation) %}\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_streaming_table(target_relation, sql) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_streaming_table_as_sql(target_relation, configuration_changes, sql, existing_relation, None, None) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = \"\" %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt_databricks.get_create_streaming_table_as_sql", "macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.get_configuration_changes", "macro.dbt_databricks.refresh_streaming_table", "macro.dbt_databricks.get_alter_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1570182, "supported_languages": null}, "macro.dbt_databricks.streaming_table_execute_build_sql": {"name": "streaming_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/streaming_table.sql", "original_file_path": "macros/materializations/streaming_table.sql", "unique_id": "macro.dbt_databricks.streaming_table_execute_build_sql", "macro_sql": "{% macro streaming_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {{ execute_multiple_statements(build_sql) }}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model, for_relation=False) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_databricks.execute_multiple_statements", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.157494, "supported_languages": null}, "macro.dbt_databricks.databricks__can_clone_table": {"name": "databricks__can_clone_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_databricks.databricks__can_clone_table", "macro_sql": "{% macro databricks__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1579862, "supported_languages": null}, "macro.dbt_databricks.databricks__create_or_replace_clone": {"name": "databricks__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_databricks.databricks__create_or_replace_clone", "macro_sql": "{% macro databricks__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n    table {{ this_relation }}\n    shallow clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.158099, "supported_languages": null}, "macro.dbt_databricks.materialization_clone_databricks": {"name": "materialization_clone_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_databricks.materialization_clone_databricks", "macro_sql": "\n\n{%- materialization clone, adapter='databricks' -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n  {% endif %}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1596959, "supported_languages": ["sql"]}, "macro.dbt_databricks.dbt_databricks_validate_get_file_format": {"name": "dbt_databricks_validate_get_file_format", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_databricks.dbt_databricks_validate_get_file_format", "macro_sql": "{% macro dbt_databricks_validate_get_file_format(raw_file_format) %}\n  {#-- Validate the file format #}\n\n  {% set accepted_formats = ['text', 'csv', 'json', 'jdbc', 'parquet', 'orc', 'hive', 'delta', 'libsvm', 'hudi'] %}\n\n  {% set invalid_file_format_msg -%}\n    Invalid file format provided: {{ raw_file_format }}\n    Expected one of: {{ accepted_formats | join(', ') }}\n  {%- endset %}\n\n  {% if raw_file_format not in accepted_formats %}\n    {% do exceptions.raise_compiler_error(invalid_file_format_msg) %}\n  {% endif %}\n\n  {% do return(raw_file_format) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.160449, "supported_languages": null}, "macro.dbt_databricks.dbt_databricks_validate_get_incremental_strategy": {"name": "dbt_databricks_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_databricks.dbt_databricks_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_databricks_validate_get_incremental_strategy(raw_strategy, file_format) %}\n  {#-- Validate the incremental strategy #}\n\n  {% set invalid_delta_only_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You can only choose this strategy when file_format is set to 'delta'\n  {%- endset %}\n\n  {% set invalid_insert_overwrite_endpoint_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when connecting via warehouse\n    Use the 'merge' or 'replace_where' strategy instead\n  {%- endset %}\n\n  {% if raw_strategy not in adapter.valid_incremental_strategies() %}\n    {{ log(\"WARNING - You are using an unsupported incremental strategy: \" ~ raw_strategy) }}\n    {{ log(\"You can ignore this warning if you are using a custom incremental strategy\") }}\n  {%-else %}\n    {% if raw_strategy == 'merge' and file_format not in ['delta', 'hudi'] %}\n      {% do exceptions.raise_compiler_error(invalid_delta_only_msg) %}\n    {% endif %}\n    {% if raw_strategy in ('replace_where', 'microbatch') and file_format not in ['delta'] %}\n      {% do exceptions.raise_compiler_error(invalid_delta_only_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1611352, "supported_languages": null}, "macro.dbt_databricks.get_incremental_strategy": {"name": "get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_incremental_strategy", "macro_sql": "{% macro get_incremental_strategy(file_format) %}\n  {% set raw_strategy = config.get('incremental_strategy') or 'merge' %}\n  {% do return(dbt_databricks_validate_get_incremental_strategy(raw_strategy, file_format)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.dbt_databricks_validate_get_incremental_strategy"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.162656, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_default_sql": {"name": "databricks__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_default_sql", "macro_sql": "{% macro databricks__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.162781, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_append_sql": {"name": "databricks__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_append_sql", "macro_sql": "{% macro databricks__get_incremental_append_sql(arg_dict) %}\n  {% do return(get_insert_into_sql(arg_dict[\"temp_relation\"], arg_dict[\"target_relation\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.162944, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_replace_where_sql": {"name": "databricks__get_incremental_replace_where_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_replace_where_sql", "macro_sql": "{% macro databricks__get_incremental_replace_where_sql(arg_dict) %}\n  {% do return(get_replace_where_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_replace_where_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.163074, "supported_languages": null}, "macro.dbt_databricks.get_incremental_replace_where_sql": {"name": "get_incremental_replace_where_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_incremental_replace_where_sql", "macro_sql": "{% macro get_incremental_replace_where_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_replace_where_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_replace_where_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1632361, "supported_languages": null}, "macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql": {"name": "databricks__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql", "macro_sql": "{% macro databricks__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n    {{ return(get_insert_overwrite_sql(source, target)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.163407, "supported_languages": null}, "macro.dbt_databricks.get_insert_overwrite_sql": {"name": "get_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_insert_overwrite_sql", "macro_sql": "{% macro get_insert_overwrite_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert overwrite table {{ target_relation }}\n    {{ partition_cols(label=\"partition\") }}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.163702, "supported_languages": null}, "macro.dbt_databricks.get_replace_where_sql": {"name": "get_replace_where_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_replace_where_sql", "macro_sql": "{% macro get_replace_where_sql(args_dict) -%}\n  {%- set predicates = args_dict['incremental_predicates'] -%}\n  {%- set target_relation = args_dict['target_relation'] -%}\n  {%- set temp_relation = args_dict['temp_relation'] -%}\nINSERT INTO {{ target_relation.render() }}\n{% if predicates %}\n  {% if predicates is sequence and predicates is not string %}\nREPLACE WHERE {{ predicates | join(' and ') }}\n  {% else %}\nREPLACE WHERE {{ predicates }}\n  {% endif %}\n{% endif %}\nTABLE {{ temp_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.164275, "supported_languages": null}, "macro.dbt_databricks.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(source_relation, target_relation) %}\n    {%- set source_columns = adapter.get_columns_in_relation(source_relation) | map(attribute=\"quoted\") | list -%}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) | map(attribute=\"quoted\") | list -%}\n    {{ insert_into_sql_impl(target_relation, dest_columns, source_relation, source_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.insert_into_sql_impl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.164604, "supported_languages": null}, "macro.dbt_databricks.insert_into_sql_impl": {"name": "insert_into_sql_impl", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.insert_into_sql_impl", "macro_sql": "{% macro insert_into_sql_impl(target_relation, dest_columns, source_relation, source_columns) %}\n    {%- set common_columns = [] -%}\n    {%- for dest_col in dest_columns -%}\n      {%- if dest_col in source_columns -%}\n        {%- do common_columns.append(dest_col) -%}\n      {%- else -%}\n        {%- do common_columns.append('DEFAULT') -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- set dest_cols_csv = dest_columns | join(', ') -%}\n    {%- set source_cols_csv = common_columns | join(', ') -%}\ninsert into table {{ target_relation }} ({{ dest_cols_csv }})\nselect {{source_cols_csv}} from {{ source_relation }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1650681, "supported_languages": null}, "macro.dbt_databricks.databricks__get_merge_sql": {"name": "databricks__get_merge_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_merge_sql", "macro_sql": "{% macro databricks__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n  {# need dest_columns for merge_exclude_columns, default to use \"*\" #}\n\n  {%- set target_alias = config.get('target_alias', 'DBT_INTERNAL_DEST') -%}\n  {%- set source_alias = config.get('source_alias', 'DBT_INTERNAL_SOURCE') -%}\n\n  {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n  {%- set dest_columns = adapter.get_columns_in_relation(target) -%}\n  {%- set source_columns = (adapter.get_columns_in_relation(source) | map(attribute='quoted') | list)-%}\n  {%- set merge_update_columns = config.get('merge_update_columns') -%}\n  {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n  {%- set merge_with_schema_evolution = (config.get('merge_with_schema_evolution') | lower == 'true') -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n  {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n  {%- set skip_matched_step = (config.get('skip_matched_step') | lower == 'true') -%}\n  {%- set skip_not_matched_step = (config.get('skip_not_matched_step') | lower == 'true') -%}\n\n  {%- set matched_condition = config.get('matched_condition') -%}\n  {%- set not_matched_condition = config.get('not_matched_condition') -%}\n\n  {%- set not_matched_by_source_action = config.get('not_matched_by_source_action') -%}\n  {%- set not_matched_by_source_condition = config.get('not_matched_by_source_condition') -%}\n\n  {%- set not_matched_by_source_action_trimmed = not_matched_by_source_action | lower | trim(' \\n\\t') %}\n  {%- set not_matched_by_source_action_is_set = (\n      not_matched_by_source_action_trimmed == 'delete'\n      or not_matched_by_source_action_trimmed.startswith('update')\n    )\n  %}\n  \n  \n  {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n          {% for key in unique_key %}\n              {% set this_key_match %}\n                  {{ source_alias }}.{{ key }} <=> {{ target_alias }}.{{ key }}\n              {% endset %}\n              {% do predicates.append(this_key_match) %}\n          {% endfor %}\n      {% else %}\n          {% set unique_key_match %}\n              {{ source_alias }}.{{ unique_key }} <=> {{ target_alias }}.{{ unique_key }}\n          {% endset %}\n          {% do predicates.append(unique_key_match) %}\n      {% endif %}\n  {% else %}\n      {% do predicates.append('FALSE') %}\n  {% endif %}\n\n    merge\n        {%- if merge_with_schema_evolution %}\n        with schema evolution\n        {%- endif %}\n    into\n        {{ target }} as {{ target_alias }}\n    using\n        {{ source }} as {{ source_alias }}\n    on\n        {{ predicates | join('\\n    and ') }}\n    {%- if not skip_matched_step %}\n    when matched\n        {%- if matched_condition %}\n        and ({{ matched_condition }})\n        {%- endif %}\n        then update set\n            {{ get_merge_update_set(update_columns, on_schema_change, source_columns, source_alias) }}\n    {%- endif %}\n    {%- if not skip_not_matched_step %}\n    when not matched\n        {%- if not_matched_condition %}\n        and ({{ not_matched_condition }})\n        {%- endif %}\n        then insert\n            {{ get_merge_insert(on_schema_change, source_columns, source_alias) }}\n    {%- endif %}\n    {%- if not_matched_by_source_action_is_set %}\n    when not matched by source\n        {%- if not_matched_by_source_condition %}\n        and ({{ not_matched_by_source_condition }})\n        {%- endif %}\n        then {{ not_matched_by_source_action }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.incremental_validate_on_schema_change", "macro.dbt.get_merge_update_columns", "macro.dbt_databricks.get_merge_update_set", "macro.dbt_databricks.get_merge_insert"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1674602, "supported_languages": null}, "macro.dbt_databricks.get_merge_update_set": {"name": "get_merge_update_set", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_merge_update_set", "macro_sql": "{% macro get_merge_update_set(update_columns, on_schema_change, source_columns, source_alias='DBT_INTERNAL_SOURCE') %}\n  {%- if update_columns -%}\n    {%- for column_name in update_columns -%}\n      {{ column_name }} = {{ source_alias }}.{{ column_name }}{%- if not loop.last %}, {% endif -%}\n    {%- endfor %}\n  {%- elif on_schema_change == 'ignore' -%}\n    *\n  {%- else -%}\n    {%- for column in source_columns -%}\n      {{ column }} = {{ source_alias }}.{{ column }}{%- if not loop.last %}, {% endif -%}\n    {%- endfor %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.167923, "supported_languages": null}, "macro.dbt_databricks.get_merge_insert": {"name": "get_merge_insert", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.get_merge_insert", "macro_sql": "{% macro get_merge_insert(on_schema_change, source_columns, source_alias='DBT_INTERNAL_SOURCE') %}\n  {%- if on_schema_change == 'ignore' -%}\n    *\n  {%- else -%}\n    ({{ source_columns | join(\", \") }}) VALUES (\n    {%- for column in source_columns -%}\n      {{ source_alias }}.{{ column }}{%- if not loop.last %}, {% endif -%}\n    {%- endfor %})\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.168253, "supported_languages": null}, "macro.dbt_databricks.databricks__get_incremental_microbatch_sql": {"name": "databricks__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_databricks.databricks__get_incremental_microbatch_sql", "macro_sql": "{% macro databricks__get_incremental_microbatch_sql(arg_dict) %}\n  {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n  {%- set event_time = model.config.event_time -%}\n  {%- set start_time = config.get(\"__dbt_internal_microbatch_event_time_start\") -%}\n  {%- set end_time = config.get(\"__dbt_internal_microbatch_event_time_end\") -%}\n  {%- if start_time -%}\n    {%- do incremental_predicates.append(\"cast(\" ~ event_time ~ \" as TIMESTAMP) >= '\" ~ start_time ~ \"'\") -%}\n  {%- endif -%}\n  {%- if end_time -%}\n    {%- do incremental_predicates.append(\"cast(\" ~ event_time ~ \" as TIMESTAMP) < '\" ~ end_time ~ \"'\") -%}\n  {%- endif -%}\n  {%- do arg_dict.update({'incremental_predicates': incremental_predicates}) -%}\n  {{ return(get_replace_where_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_replace_where_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.168896, "supported_languages": null}, "macro.dbt_databricks.materialization_incremental_databricks": {"name": "materialization_incremental_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_databricks.materialization_incremental_databricks", "macro_sql": "{% materialization incremental, adapter='databricks', supported_languages=['sql', 'python'] -%}\n  {{ log(\"MATERIALIZING INCREMENTAL\") }}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {% set existing_relation = load_relation_with_metadata(this) %}\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set incremental_strategy = get_incremental_strategy(catalog_relation.file_format) %}\n  {% set grant_config = config.get('grants') %}\n  {% set full_refresh = should_full_refresh() %}\n  {% set partition_by = config.get('partition_by') %}\n  {% set language = model['language'] %}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set is_delta = (catalog_relation.file_format == 'delta' and existing_relation.is_delta) %}\n  {% set compiled_code = adapter.clean_sql(model['compiled_code']) %}\n\n  {% if adapter.behavior.use_materialization_v2 %}\n    {{ log(\"USING V2 MATERIALIZATION\") }}\n    {#-- Set vars --#}\n    {% set safe_create = config.get('use_safer_relation_operations', False) | as_bool  %}\n    {{ log(\"Safe create: \" ~ safe_create) }}\n    {% set should_replace = existing_relation.is_dlt or existing_relation.is_view or full_refresh %}\n    {% set is_replaceable = existing_relation.can_be_replaced and is_delta and config.get(\"location_root\") %}\n\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set staging_relation = make_staging_relation(target_relation) %}\n\n    {{ run_pre_hooks() }}\n\n    {% call statement('main', language=language) %}\n      {{ get_create_intermediate_table(intermediate_relation, compiled_code, language) }}\n    {% endcall %}\n\n    {#-- Incremental run logic --#}\n    {%- if existing_relation is none -%}\n      {{ log(\"No existing relation found\") }}\n      {{ create_table_at(target_relation, intermediate_relation, compiled_code) }}\n    {%- elif should_replace -%}\n      {{ log(\"Existing relation found that requires replacement\") }}\n      {% if safe_create and existing_relation.can_be_renamed %}\n        {{ log(\"Safe create enabled and relation can be renamed\") }}\n        {{ safe_relation_replace(existing_relation, staging_relation, intermediate_relation, compiled_code) }}\n      {% else %}\n        {#-- Relation must be dropped & recreated --#}\n        {% if not is_replaceable %} {#-- If Delta, we will `create or replace` below, so no need to drop --#}\n          {{ log(\"Dropping existing relation, as it is not replaceable\") }}\n          {% do adapter.drop_relation(existing_relation) %}\n        {% endif %}\n        {{ log(\"Replacing target relation\") }}\n        {{ create_table_at(target_relation, intermediate_relation, compiled_code) }}\n      {% endif %}\n    {%- else -%}\n      {{ log(\"Existing relation found, proceeding with incremental work\")}}\n      {#-- Set Overwrite Mode to DYNAMIC for subsequent incremental operations --#}\n      {%- if incremental_strategy == 'insert_overwrite' and partition_by -%}\n        {{ set_overwrite_mode('DYNAMIC') }}\n      {%- endif -%}\n      {#-- Relation must be merged --#}\n      {%- do process_schema_changes(on_schema_change, intermediate_relation, existing_relation) -%}\n      {{ process_config_changes(target_relation) }}\n      {% set build_sql = get_build_sql(incremental_strategy, target_relation, intermediate_relation) %}\n      {%- if language == 'sql' -%}\n        {%- call statement('main') -%}\n          {{ build_sql }}\n        {%- endcall -%}\n      {%- elif language == 'python' -%}\n        {%- call statement_with_staging_table('main', intermediate_relation) -%}\n          {{ build_sql }}\n        {%- endcall -%}\n      {%- endif -%}\n    {%- endif -%}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke) %}\n    {% do optimize(target_relation) %}\n\n    {% if language == 'python' %}\n      {{ drop_relation_if_exists(intermediate_relation) }}\n    {% endif %}\n\n    {{ run_post_hooks() }}\n\n  {% else %}\n    {%- set tblproperties = config.get('tblproperties') -%}\n    {%- set tags = config.get('databricks_tags') -%}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n    {% set incremental_predicates = config.get('predicates') or config.get('incremental_predicates') %}\n    {%- set unique_key = config.get('unique_key') -%}\n\n    {#-- Run pre-hooks --#}\n    {{ run_hooks(pre_hooks) }}\n    {#-- Incremental run logic --#}\n    {%- if existing_relation is none -%}\n      {#-- Relation must be created --#}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% do persist_constraints(target_relation, model) %}\n      {% do apply_tags(target_relation, tags) %}\n      {%- if language == 'python' -%}\n        {%- do apply_tblproperties(target_relation, tblproperties) %}\n      {%- endif -%}\n\n      {% do persist_docs(target_relation, model, for_relation=language=='python') %}\n    {%- elif existing_relation.is_view or existing_relation.is_materialized_view or existing_relation.is_streaming_table or should_full_refresh() -%}\n      {#-- Relation must be dropped & recreated --#}\n      {% if not is_delta %} {#-- If Delta, we will `create or replace` below, so no need to drop --#}\n        {% do adapter.drop_relation(existing_relation) %}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n      {% if not existing_relation.is_view %}\n        {% do persist_constraints(target_relation, model) %}\n      {% endif %}\n      {% do apply_tags(target_relation, tags) %}\n      {% do persist_docs(target_relation, model, for_relation=language=='python') %}\n    {%- else -%}\n      {#-- Set Overwrite Mode to DYNAMIC for subsequent incremental operations --#}\n      {%- if incremental_strategy == 'insert_overwrite' and partition_by -%}\n        {{ set_overwrite_mode('DYNAMIC') }}\n      {%- endif -%}\n      {#-- Relation must be merged --#}\n      {%- set _existing_config = adapter.get_relation_config(existing_relation) -%}\n      {%- set model_config = adapter.get_config_from_model(config.model) -%}\n      {%- set _configuration_changes = model_config.get_changeset(_existing_config) -%}\n      {%- call statement('create_temp_relation', language=language) -%}\n        {{ create_table_as(True, temp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {%- do process_schema_changes(on_schema_change, temp_relation, existing_relation) -%}\n      {%- set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) -%}\n      {%- set strategy_arg_dict = ({\n              'target_relation': target_relation,\n              'temp_relation': temp_relation,\n              'unique_key': unique_key,\n              'dest_columns': none,\n              'incremental_predicates': incremental_predicates}) -%}\n      {%- set build_sql = strategy_sql_macro_func(strategy_arg_dict) -%}\n      {%- if language == 'sql' -%}\n        {%- call statement('main') -%}\n          {{ build_sql }}\n        {%- endcall -%}\n      {%- elif language == 'python' -%}\n        {%- call statement_with_staging_table('main', temp_relation) -%}\n          {{ build_sql }}\n        {%- endcall -%}\n        {#--\n        This is yucky.\n        See note in dbt-spark/dbt/include/spark/macros/adapters.sql\n        re: python models and temporary views.\n\n        Also, why does not either drop_relation or adapter.drop_relation work here?!\n        --#}\n      {%- endif -%}\n      {% if _configuration_changes is not none %}\n        {% set tags = _configuration_changes.changes.get(\"tags\", None) %}\n        {% set tblproperties = _configuration_changes.changes.get(\"tblproperties\", None) %}\n        {% set liquid_clustering = _configuration_changes.changes.get(\"liquid_clustering\") %}\n        {% if tags is not none %}\n          {% do apply_tags(target_relation, tags.set_tags, tags.unset_tags) %}\n        {%- endif -%}\n        {% if tblproperties is not none %}\n          {% do apply_tblproperties(target_relation, tblproperties.tblproperties) %}\n        {%- endif -%}\n        {% if liquid_clustering is not none %}\n          {% do apply_liquid_clustered_cols(target_relation, liquid_clustering) %}\n        {% endif %}\n      {%- endif -%}\n      {% do persist_docs(target_relation, model, for_relation=True) %}\n    {%- endif -%}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke) %}\n    {% do optimize(target_relation) %}\n\n    {{ run_hooks(post_hooks) }}\n  {%- endif -%}\n\n  {%- if incremental_strategy == 'insert_overwrite' and not full_refresh -%}\n    {{ set_overwrite_mode('STATIC') }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_databricks.load_relation_with_metadata", "macro.dbt_databricks.get_incremental_strategy", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.make_intermediate_relation", "macro.dbt_databricks.make_staging_relation", "macro.dbt_databricks.run_pre_hooks", "macro.dbt.statement", "macro.dbt_databricks.get_create_intermediate_table", "macro.dbt_databricks.create_table_at", "macro.dbt_databricks.safe_relation_replace", "macro.dbt_databricks.set_overwrite_mode", "macro.dbt.process_schema_changes", "macro.dbt_databricks.process_config_changes", "macro.dbt_databricks.get_build_sql", "macro.dbt_databricks.statement_with_staging_table", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt_databricks.optimize", "macro.dbt.drop_relation_if_exists", "macro.dbt_databricks.run_post_hooks", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt_databricks.persist_constraints", "macro.dbt_databricks.apply_tags", "macro.dbt_databricks.apply_tblproperties", "macro.dbt.persist_docs", "macro.dbt_databricks.apply_liquid_clustered_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.176152, "supported_languages": ["sql", "python"]}, "macro.dbt_databricks.set_overwrite_mode": {"name": "set_overwrite_mode", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_databricks.set_overwrite_mode", "macro_sql": "{% macro set_overwrite_mode(value) %}\n  {% if adapter.is_cluster() %}\n    {%- call statement('Setting partitionOverwriteMode: ' ~ value) -%}\n      set spark.sql.sources.partitionOverwriteMode = {{ value }}\n    {%- endcall -%}\n  {% else %}\n    {{ exceptions.raise_compiler_error('INSERT OVERWRITE is only properly supported on all-purpose clusters.  On SQL Warehouses, this strategy would be equivalent to using the table materialization.') }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.176458, "supported_languages": null}, "macro.dbt_databricks.get_build_sql": {"name": "get_build_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_databricks.get_build_sql", "macro_sql": "{% macro get_build_sql(incremental_strategy, target_relation, intermediate_relation) %}\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set incremental_predicates = config.get('predicates') or config.get('incremental_predicates') -%}\n  {%- set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) -%}\n  {%- set strategy_arg_dict = ({\n          'target_relation': target_relation,\n          'temp_relation': intermediate_relation,\n          'unique_key': unique_key,\n          'dest_columns': none,\n          'incremental_predicates': incremental_predicates}) -%}\n  {{ strategy_sql_macro_func(strategy_arg_dict) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.176911, "supported_languages": null}, "macro.dbt_databricks.process_config_changes": {"name": "process_config_changes", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_databricks.process_config_changes", "macro_sql": "{% macro process_config_changes(target_relation) %}\n  {% set apply_config_changes = config.get('incremental_apply_config_changes', True) | as_bool %}\n  {% if apply_config_changes %}\n    {%- set existing_config = adapter.get_relation_config(target_relation) -%}\n    {%- set model_config = adapter.get_config_from_model(config.model) -%}\n    {%- set configuration_changes = model_config.get_changeset(existing_config) -%}\n    {{ apply_config_changeset(target_relation, model, configuration_changes) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.apply_config_changeset"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.177291, "supported_languages": null}, "macro.dbt_databricks.databricks__get_binding_char": {"name": "databricks__get_binding_char", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__get_binding_char", "macro_sql": "{% macro databricks__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.17822, "supported_languages": null}, "macro.dbt_databricks.databricks__load_csv_rows": {"name": "databricks__load_csv_rows", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__load_csv_rows", "macro_sql": "{% macro databricks__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n  {% set must_cast = model['config'].get('file_format', 'delta') == 'parquet' %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert {% if loop.index0 == 0 -%} overwrite {% else -%} into {% endif -%} {{ this.render() }} values\n          {% for row in chunk -%}\n              ({%- for col_name in agate_table.column_names -%}\n                  {%- if must_cast -%}\n                    {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                    {%- set type = column_override.get(col_name, inferred_type) -%}\n                    cast({{ get_binding_char() }} as {{type}})\n                  {%- else -%}\n                    {{ get_binding_char() }}\n                  {%- endif -%}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True, close_cursor=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.179492, "supported_languages": null}, "macro.dbt_databricks.databricks__reset_csv_table": {"name": "databricks__reset_csv_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__reset_csv_table", "macro_sql": "{% macro databricks__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% if old_relation %}\n      {% if old_relation.is_delta and config.get('file_format', default='delta') == 'delta' %}\n        {% set sql = create_or_replace_csv_table(model, agate_table, True) %}\n      {% else %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n      {% endif %}\n    {% else %}\n      {% set sql = create_csv_table(model, agate_table) %}\n    {% endif %}\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.create_or_replace_csv_table", "macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.180012, "supported_languages": null}, "macro.dbt_databricks.create_or_replace_csv_table": {"name": "create_or_replace_csv_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.create_or_replace_csv_table", "macro_sql": "{% macro create_or_replace_csv_table(model, agate_table, replace=False) %}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n  {%- set column_comment = config.persist_column_docs() and model.columns %}\n  {%- set identifier = model['alias'] -%}\n  {%- set relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set replace_clause = \"\" -%}\n  {%- if replace -%}\n    {%- set replace_clause = \"or replace\" -%}\n  {%- endif -%}\n\n  {% set sql %}\n    create {{replace_clause}} table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {%- set column_comment_clause = \"\" -%}\n            {%- if column_comment and col_name in model.columns.keys() -%}   \n              {%- set comment = model.columns[col_name]['description'] | replace(\"'\", \"\\\\'\") -%}\n              {%- if comment and comment != \"\" -%}\n                {%- set column_comment_clause = \"comment '\" ~ comment ~ \"'\" -%}\n              {%- endif -%}\n            {%- endif -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {{ column_comment_clause }}{%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause(catalog_relation) }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause(catalog_relation) }}\n    {{ comment_clause() }}\n    {{ tblproperties_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_databricks.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_databricks.tblproperties_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1815429, "supported_languages": null}, "macro.dbt_databricks.databricks__create_csv_table": {"name": "databricks__create_csv_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.databricks__create_csv_table", "macro_sql": "{% macro databricks__create_csv_table(model, agate_table) %}\n  {{ return(create_or_replace_csv_table(model, agate_table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.create_or_replace_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.181689, "supported_languages": null}, "macro.dbt_databricks.log_seed_operation": {"name": "log_seed_operation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_databricks.log_seed_operation", "macro_sql": "{% macro log_seed_operation(agate_table, full_refresh_mode, create_table_sql, sql) %}\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.noop_statement", "macro.dbt.get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1820319, "supported_languages": null}, "macro.dbt_databricks.materialization_seed_databricks": {"name": "materialization_seed_databricks", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/seeds.sql", "original_file_path": "macros/materializations/seeds/seeds.sql", "unique_id": "macro.dbt_databricks.materialization_seed_databricks", "macro_sql": "{% materialization seed, adapter='databricks' %}\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% if adapter.behavior.use_materialization_v2 %}\n    {{ create_seed_v2(target_relation) }}\n  {% else %}\n    {{ create_seed_v1(target_relation) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_databricks.create_seed_v2", "macro.dbt_databricks.create_seed_v1"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.182935, "supported_languages": ["sql"]}, "macro.dbt_databricks.create_seed_v2": {"name": "create_seed_v2", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/seeds.sql", "original_file_path": "macros/materializations/seeds/seeds.sql", "unique_id": "macro.dbt_databricks.create_seed_v2", "macro_sql": "{% macro create_seed_v2(target_relation) %}\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier, needs_information=True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and (old_relation.is_view or old_relation.is_materialized_view)) -%}\n  {%- set exists_as_streaming_table = (old_relation is not none and old_relation.is_streaming_table) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_pre_hooks() }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view or a materialized view\".format(old_relation)) }}\n  {% elif exists_as_streaming_table %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a streaming table\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {{ log_seed_operation(agate_table, full_refresh_mode, create_table_sql, sql) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  -- No need to persist docs, already handled in seed create\n\n  {{ run_post_hooks() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt_databricks.run_pre_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt_databricks.log_seed_operation", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt_databricks.run_post_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1842718, "supported_languages": null}, "macro.dbt_databricks.create_seed_v1": {"name": "create_seed_v1", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/materializations/seeds/seeds.sql", "original_file_path": "macros/materializations/seeds/seeds.sql", "unique_id": "macro.dbt_databricks.create_seed_v1", "macro_sql": "{% macro create_seed_v1(target_relation) %}\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier, needs_information=True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and (old_relation.is_view or old_relation.is_materialized_view)) -%}\n  {%- set exists_as_streaming_table = (old_relation is not none and old_relation.is_streaming_table) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view or a materialized view\".format(old_relation)) }}\n  {% elif exists_as_streaming_table %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a streaming table\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  -- No need to persist docs, already handled in seed create\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.186032, "supported_languages": null}, "macro.dbt_databricks.databricks__generate_database_name": {"name": "databricks__generate_database_name", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt_databricks.databricks__generate_database_name", "macro_sql": "{% macro databricks__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n        {{ return(default_database) }}\n    {%- else -%}\n        {{ return(custom_database_name) }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1863492, "supported_languages": null}, "macro.dbt_databricks.databricks__get_drop_sql": {"name": "databricks__get_drop_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_databricks.databricks__get_drop_sql", "macro_sql": "{% macro databricks__get_drop_sql(relation) -%}\n    {%- if relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n    {%- elif relation.is_streaming_table-%}\n        {{ drop_streaming_table(relation) }}\n    {%- elif relation.is_view -%}\n        {{ drop_view(relation) }}\n    {%- else -%}\n        {{ drop_table(relation) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_materialized_view", "macro.dbt_databricks.drop_streaming_table", "macro.dbt.drop_view", "macro.dbt.drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.186743, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_relation": {"name": "databricks__drop_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_relation", "macro_sql": "{% macro databricks__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1869051, "supported_languages": null}, "macro.dbt_databricks.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n  {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n  {% do return(adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1876411, "supported_languages": null}, "macro.dbt_databricks.databricks__get_replace_sql": {"name": "databricks__get_replace_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.databricks__get_replace_sql", "macro_sql": "{% macro databricks__get_replace_sql(existing_relation, target_relation, sql) %}\n  {# /* if safe_relation_replace, prefer renaming */ #}\n  {% if target_relation.type == \"table\" %}\n    {{ exceptions.raise_not_implemented('get_replace_sql not implemented for target of table') }}\n  {% endif %}\n\n  {% set safe_replace = config.get('use_safer_relation_operations', False) | as_bool  %}\n  {% set file_format = config.get('file_format', default='delta') %}\n  {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced and file_format == \"delta\" %}\n\n  {% if not safe_replace %}\n    {# Prioritize 'create or replace' for speed #}\n    {% if is_replaceable and existing_relation.is_view %}\n      {{ return(get_replace_view_sql(target_relation, sql)) }}\n    {% elif is_replaceable and existing_relation.is_table %}\n      {{ return(get_replace_table_sql(target_relation, sql)) }}\n    {% endif %}\n  {% endif %}\n\n  {# If safe_replace, then we know that anything that would have been caught above is instead caught here #}\n  {% if target_relation.can_be_renamed and existing_relation.can_be_renamed %}\n    {{ return(safely_replace(existing_relation, target_relation, sql)) }}\n  {% elif target_relation.can_be_renamed %}\n    {{ return(stage_then_replace(existing_relation, target_relation, sql)) }}\n  {% elif existing_relation.can_be_renamed %}\n    {{ return(backup_and_create_in_place(existing_relation, target_relation, sql)) }}\n  {% else %}\n    {{ return(drop_and_create(existing_relation, target_relation, sql)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt_databricks.safely_replace", "macro.dbt_databricks.stage_then_replace", "macro.dbt_databricks.backup_and_create_in_place", "macro.dbt_databricks.drop_and_create"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.188715, "supported_languages": null}, "macro.dbt_databricks.safely_replace": {"name": "safely_replace", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.safely_replace", "macro_sql": "{% macro safely_replace(existing_relation, target_relation, sql) %}\n  {{ log('Using safely_replace') }}\n  {% set staging_relation = make_staging_relation(target_relation, type='view') %}\n  {{ drop_relation_if_exists(staging_relation) }}\n  {% call statement(name=\"main\") %}\n    {{ get_create_sql(staging_relation, sql) }}\n  {% endcall %}\n  {{ create_backup(existing_relation) }}\n  {{ return([\n    get_rename_sql(staging_relation, existing_relation.render()),\n    get_drop_backup_sql(existing_relation)\n  ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.make_staging_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt_databricks.create_backup", "macro.dbt.get_rename_sql", "macro.dbt.get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.189163, "supported_languages": null}, "macro.dbt_databricks.stage_then_replace": {"name": "stage_then_replace", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.stage_then_replace", "macro_sql": "{% macro stage_then_replace(existing_relation, target_relation, sql) %}\n  {{ log('Using stage_then_replace') }}\n  {% set staging_relation = make_staging_relation(target_relation, type='view') %}\n  {{ drop_relation_if_exists(staging_relation) }}\n  {% call statement(name=\"main\") %}\n    {{ get_create_sql(staging_relation, sql) }}\n  {% endcall %}\n\n  {{ return([\n    get_drop_sql(existing_relation),\n    get_rename_sql(staging_relation, existing_relation.render()),\n  ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.make_staging_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.189575, "supported_languages": null}, "macro.dbt_databricks.backup_and_create_in_place": {"name": "backup_and_create_in_place", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.backup_and_create_in_place", "macro_sql": "{% macro backup_and_create_in_place(existing_relation, target_relation, sql) %}\n  {{ log('Using backup_and_create_in_place') }}\n  {{ create_backup(existing_relation) }}\n  {{ return([\n    get_create_sql(target_relation, sql),\n    get_drop_backup_sql(existing_relation)\n  ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.create_backup", "macro.dbt.get_create_sql", "macro.dbt.get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.189825, "supported_languages": null}, "macro.dbt_databricks.drop_and_create": {"name": "drop_and_create", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_databricks.drop_and_create", "macro_sql": "{% macro drop_and_create(existing_relation, target_relation, sql) %}\n  {{ log('Using drop_and_create') }}\n  {{ return([\n    get_drop_sql(existing_relation),\n    get_create_sql(target_relation, sql)\n  ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.190037, "supported_languages": null}, "macro.dbt_databricks.databricks__comment_clause": {"name": "databricks__comment_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/comment.sql", "original_file_path": "macros/relations/comment.sql", "unique_id": "macro.dbt_databricks.databricks__comment_clause", "macro_sql": "{% macro databricks__comment_clause() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n  {%- if raw_persist_docs is mapping -%}\n    {%- set raw_relation = raw_persist_docs.get('relation', false) -%}\n      {%- if raw_relation and model.description -%}\n      comment '{{ model.description | replace(\"'\", \"\\\\'\") }}'\n      {%- endif -%}\n  {%- elif raw_persist_docs -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.190542, "supported_languages": null}, "macro.dbt_databricks.fetch_tags": {"name": "fetch_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.fetch_tags", "macro_sql": "{% macro fetch_tags(relation) -%}\n  {% if relation.is_hive_metastore() %}\n    {{ exceptions.raise_compiler_error(\"Tags are only supported for Unity Catalog\") }}\n  {%- endif %}\n  {% call statement('list_tags', fetch_result=True) -%}\n    {{ fetch_tags_sql(relation) }}\n  {% endcall %}\n  {% do return(load_result('list_tags').table) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.fetch_tags_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1911879, "supported_languages": null}, "macro.dbt_databricks.fetch_tags_sql": {"name": "fetch_tags_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.fetch_tags_sql", "macro_sql": "{% macro fetch_tags_sql(relation) -%}\n  SELECT tag_name, tag_value\n  FROM `system`.`information_schema`.`table_tags`\n  WHERE catalog_name = '{{ relation.database|lower }}' \n    AND schema_name = '{{ relation.schema|lower }}'\n    AND table_name = '{{ relation.identifier|lower }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1913521, "supported_languages": null}, "macro.dbt_databricks.apply_tags": {"name": "apply_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.apply_tags", "macro_sql": "{% macro apply_tags(relation, set_tags, unset_tags=[]) -%}\n  {{ log(\"Applying tags to relation \" ~ set_tags ~ \" \" ~ unset_tags) }}\n  {%- if (set_tags or unset_tags) and relation.is_hive_metastore() -%}\n    {{ exceptions.raise_compiler_error(\"Tags are only supported for Unity Catalog\") }}\n  {%- endif -%}\n  {%- if set_tags %}\n    {%- call statement('main') -%}\n       {{ alter_set_tags(relation, set_tags) }}\n    {%- endcall -%}\n  {%- endif %}\n  {%- if unset_tags %}\n    {%- call statement('main') -%}\n       {{ alter_unset_tags(relation, unset_tags) }}\n    {%- endcall -%}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.alter_set_tags", "macro.dbt_databricks.alter_unset_tags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1918342, "supported_languages": null}, "macro.dbt_databricks.alter_set_tags": {"name": "alter_set_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.alter_set_tags", "macro_sql": "{% macro alter_set_tags(relation, tags) -%}\n  ALTER {{ relation.type }} {{ relation.render() }} SET TAGS (\n    {% for tag in tags -%}\n      '{{ tag }}' = '{{ tags[tag] }}' {%- if not loop.last %}, {% endif -%}\n    {%- endfor %}\n  )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.192097, "supported_languages": null}, "macro.dbt_databricks.alter_unset_tags": {"name": "alter_unset_tags", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tags.sql", "original_file_path": "macros/relations/tags.sql", "unique_id": "macro.dbt_databricks.alter_unset_tags", "macro_sql": "{% macro alter_unset_tags(relation, tags) -%}\n  ALTER {{ relation.type }} {{ relation.render() }} UNSET TAGS (\n    {% for tag in tags -%}\n      '{{ tag }}' {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n  )\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.192331, "supported_languages": null}, "macro.dbt_databricks.databricks__get_create_intermediate_sql": {"name": "databricks__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt_databricks.databricks__get_create_intermediate_sql", "macro_sql": "{%- macro databricks__get_create_intermediate_sql(relation, sql) -%}\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ drop_relation(intermediate_relation) }}\n\n    {{ return(get_create_sql(intermediate_relation, sql)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.drop_relation", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.19259, "supported_languages": null}, "macro.dbt_databricks.location_clause": {"name": "location_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/location.sql", "original_file_path": "macros/relations/location.sql", "unique_id": "macro.dbt_databricks.location_clause", "macro_sql": "{% macro location_clause(relation) %}\n  {#--\n    Moving forward, `relation` should be a `CatalogRelation`, which is covered by the first condition.\n    However, there could be existing macros that are still passing in a `BaseRelation`, including user macros.\n    Hence, we need to support the old code still, which is covered by the second condition.\n  --#}\n  {%- if relation.catalog_type is not none -%}\n\n    {%- if relation.location is not none -%}\n    location '{{ relation.location }}{% if is_incremental() %}_tmp{% endif %}'\n    {%- endif -%}\n\n  {%- else -%}\n\n  {%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n  {%- set file_format = config.get('file_format', default='delta') -%}\n  {%- set identifier = model['alias'] -%}\n  {%- if location_root is not none %}\n  {%- set model_path = adapter.compute_external_path(config, model, is_incremental()) %}\n    location '{{ model_path }}'\n  {%- elif (not relation.is_hive_metastore()) and file_format != 'delta' -%}\n    {{ exceptions.raise_compiler_error(\n        'Incompatible configuration: `location_root` must be set when using a non-delta file format with Unity Catalog'\n    ) }}\n  {%- endif %}\n\n  {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.193517, "supported_languages": null}, "macro.dbt_databricks.optimize": {"name": "optimize", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/optimize.sql", "original_file_path": "macros/relations/optimize.sql", "unique_id": "macro.dbt_databricks.optimize", "macro_sql": "{% macro optimize(relation) %}\n  {{ return(adapter.dispatch('optimize', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__optimize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1939762, "supported_languages": null}, "macro.dbt_databricks.databricks__optimize": {"name": "databricks__optimize", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/optimize.sql", "original_file_path": "macros/relations/optimize.sql", "unique_id": "macro.dbt_databricks.databricks__optimize", "macro_sql": "\n\n{%- macro databricks__optimize(relation) -%}\n  {%- if var('DATABRICKS_SKIP_OPTIMIZE', 'false')|lower != 'true' and\n        var('databricks_skip_optimize', 'false')|lower != 'true' and\n        config.get('file_format', 'delta') == 'delta' -%}\n    {%- if (config.get('zorder', False) or config.get('liquid_clustered_by', False)) or config.get('auto_liquid_cluster', False) -%}\n      {%- call statement('run_optimize_stmt') -%}\n        {{ get_optimize_sql(relation) }}\n      {%- endcall -%}\n    {%- endif -%}\n  {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.get_optimize_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1944478, "supported_languages": null}, "macro.dbt_databricks.get_optimize_sql": {"name": "get_optimize_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/optimize.sql", "original_file_path": "macros/relations/optimize.sql", "unique_id": "macro.dbt_databricks.get_optimize_sql", "macro_sql": "{%- macro get_optimize_sql(relation) %}\n  optimize {{ relation.render() }}\n  {%- if config.get('zorder', False) and config.get('file_format', 'delta') == 'delta' %}\n    {%- if config.get('liquid_clustered_by', False) or config.get('auto_liquid_cluster', False) %}\n      {{ exceptions.warn(\"Both zorder and liquid_clustering are set but they are incompatible. zorder will be ignored.\") }}\n    {%- else %}\n      {%- set zorder = config.get('zorder', none) %}\n      {# TODO: predicates here? WHERE ...  #}\n      {%- if zorder is sequence and zorder is not string %}\n        zorder by (\n        {%- for col in zorder %}\n        {{ col }}{% if not loop.last %}, {% endif %}\n        {%- endfor %}\n        )\n      {%- else %}\n        zorder by ({{zorder}})\n      {%- endif %}\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.195086, "supported_languages": null}, "macro.dbt_databricks.file_format_clause": {"name": "file_format_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/file_format.sql", "original_file_path": "macros/relations/file_format.sql", "unique_id": "macro.dbt_databricks.file_format_clause", "macro_sql": "{% macro file_format_clause(catalog_relation=none) %}\n  {#--\n    Moving forward, this macro should require a `catalog_relation`, which is covered by the first condition.\n    However, there could be existing macros that is still passing no arguments, including user macros.\n    Hence, we need to support the old code still, which is covered by the second condition.\n  --#}\n  {% if catalog_relation is not none %}\n    {%- set file_format = catalog_relation.file_format -%}\n  {% else %}\n    {%- set file_format = config.get('file_format', default='delta') -%}\n  {% endif %}\n  using {{ file_format }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.195509, "supported_languages": null}, "macro.dbt_databricks.get_file_format": {"name": "get_file_format", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/file_format.sql", "original_file_path": "macros/relations/file_format.sql", "unique_id": "macro.dbt_databricks.get_file_format", "macro_sql": "{% macro get_file_format(catalog_relation=none) %}\n  {#-\n    Moving forward, this macro should require a `catalog_relation`, which is covered by the first condition.\n    However, there could be existing macros that is still passing no arguments, including user macros.\n    Hence, we need to support the old code still, which is covered by the second condition.\n  -#}\n  {% if catalog_relation is not none %}\n    {%- set raw_file_format = catalog_relation.file_format -%}\n  {% else %}\n    {%- set raw_file_format = config.get('file_format', default='delta') -%}\n  {% endif %}\n  {% do return(dbt_databricks_validate_get_file_format(raw_file_format)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.dbt_databricks_validate_get_file_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.195806, "supported_languages": null}, "macro.dbt_databricks.liquid_clustered_cols": {"name": "liquid_clustered_cols", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/liquid_clustering.sql", "original_file_path": "macros/relations/liquid_clustering.sql", "unique_id": "macro.dbt_databricks.liquid_clustered_cols", "macro_sql": "{% macro liquid_clustered_cols() -%}\n  {%- set cols = config.get('liquid_clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- set auto_cluster = config.get('auto_liquid_cluster', validator=validation.any[boolean]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    CLUSTER BY ({{ cols | join(', ') }})\n    {%- elif auto_cluster -%}\n    CLUSTER BY AUTO\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.196461, "supported_languages": null}, "macro.dbt_databricks.apply_liquid_clustered_cols": {"name": "apply_liquid_clustered_cols", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/liquid_clustering.sql", "original_file_path": "macros/relations/liquid_clustering.sql", "unique_id": "macro.dbt_databricks.apply_liquid_clustered_cols", "macro_sql": "{% macro apply_liquid_clustered_cols(target_relation, liquid_clustering) -%}\n  {%- set cols = liquid_clustering.cluster_by -%}\n  {%- set auto_cluster = liquid_clustering.auto_cluster -%}\n  {%- if cols and cols != [] %}\n    {%- call statement('set_cluster_by_columns') -%}\n      ALTER {{ target_relation.type }} {{ target_relation.render() }} CLUSTER BY ({{ cols | join(', ') }})\n    {%- endcall -%}\n  {%- elif auto_cluster -%}\n    {%- call statement('set_cluster_by_auto') -%}\n      ALTER {{ target_relation.type }} {{ target_relation.render() }} CLUSTER BY AUTO\n    {%- endcall -%}\n  {% else %}\n    {%- call statement('unset_cluster_by') -%}\n      ALTER {{ target_relation.type }} {{ target_relation.render() }} CLUSTER BY NONE\n    {%- endcall -%}\n  {%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.197008, "supported_languages": null}, "macro.dbt_databricks.tblproperties_clause": {"name": "tblproperties_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tblproperties.sql", "original_file_path": "macros/relations/tblproperties.sql", "unique_id": "macro.dbt_databricks.tblproperties_clause", "macro_sql": "{% macro tblproperties_clause() -%}\n  {{ return(adapter.dispatch('tblproperties_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.19731, "supported_languages": null}, "macro.dbt_databricks.databricks__tblproperties_clause": {"name": "databricks__tblproperties_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tblproperties.sql", "original_file_path": "macros/relations/tblproperties.sql", "unique_id": "macro.dbt_databricks.databricks__tblproperties_clause", "macro_sql": "{% macro databricks__tblproperties_clause(tblproperties=None) -%}\n  {%- set tblproperties = adapter.update_tblproperties_for_iceberg(config, tblproperties) -%}\n  {%- if tblproperties != {} %}\n    tblproperties (\n      {%- for prop in tblproperties -%}\n      '{{ prop }}' = '{{ tblproperties[prop] }}' {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.197624, "supported_languages": null}, "macro.dbt_databricks.apply_tblproperties": {"name": "apply_tblproperties", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/tblproperties.sql", "original_file_path": "macros/relations/tblproperties.sql", "unique_id": "macro.dbt_databricks.apply_tblproperties", "macro_sql": "{% macro apply_tblproperties(relation, tblproperties) -%}\n  {% set tblproperty_statment = databricks__tblproperties_clause(tblproperties) %}\n  {% if tblproperty_statment %}\n    {%- call statement('main') -%}\n      ALTER {{ relation.type }} {{ relation.render() }} SET {{ tblproperty_statment}}\n    {%- endcall -%}\n  {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__tblproperties_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1978822, "supported_languages": null}, "macro.dbt_databricks.execute_no_op": {"name": "execute_no_op", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/execute.sql", "original_file_path": "macros/relations/execute.sql", "unique_id": "macro.dbt_databricks.execute_no_op", "macro_sql": "{% macro execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.1981068, "supported_languages": null}, "macro.dbt_databricks.persist_constraints": {"name": "persist_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.persist_constraints", "macro_sql": "{% macro persist_constraints(relation, model) %}\n  {{ return(adapter.dispatch('persist_constraints', 'dbt')(relation, model)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2007182, "supported_languages": null}, "macro.dbt_databricks.databricks__persist_constraints": {"name": "databricks__persist_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks__persist_constraints", "macro_sql": "{% macro databricks__persist_constraints(relation, model) %}\n  {%- set contract_config = config.get('contract') -%}\n  {% set has_model_contract = contract_config and contract_config.enforced %}\n  {% set has_databricks_constraints = config.get('persist_constraints', False) %}\n\n  {% if (has_model_contract or has_databricks_constraints) %}\n    {% if config.get('file_format', 'delta') != 'delta' %}\n      {# Constraints are only supported for delta tables #}\n      {{ exceptions.warn(\"Constraints not supported for file format: \" ~ config.get('file_format')) }}\n    {% elif relation.is_view %}\n      {# Constraints are not supported for views. This point in the code should not have been reached. #}\n      {{ exceptions.raise_compiler_error(\"Constraints not supported for views.\") }}\n    {% elif is_incremental() %}\n      {# Constraints are not applied for incremental updates. This point in the code should not have been reached #}\n      {{ exceptions.raise_compiler_error(\"Constraints are not applied for incremental updates. Full refresh is required to update constraints.\") }}\n    {% else %}\n      {% do alter_column_set_constraints(relation, model) %}\n      {% do alter_table_add_constraints(relation, model) %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_databricks.alter_column_set_constraints", "macro.dbt_databricks.alter_table_add_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.20148, "supported_languages": null}, "macro.dbt_databricks.apply_alter_constraints": {"name": "apply_alter_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.apply_alter_constraints", "macro_sql": "{% macro apply_alter_constraints(relation) %}\n  {%- for constraint in relation.alter_constraints -%}\n    {% call statement('add constraint') %}\n      ALTER TABLE {{ relation.render() }} ADD {{ constraint.render() }}\n    {% endcall %}\n  {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.201718, "supported_languages": null}, "macro.dbt_databricks.alter_table_add_constraints": {"name": "alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.alter_table_add_constraints", "macro_sql": "{% macro alter_table_add_constraints(relation, constraints) %}\n  {{ return(adapter.dispatch('alter_table_add_constraints', 'dbt')(relation, constraints)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_table_add_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2018821, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_table_add_constraints": {"name": "databricks__alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks__alter_table_add_constraints", "macro_sql": "{% macro databricks__alter_table_add_constraints(relation, model) %}\n    {% set constraints = get_model_constraints(model) %}\n    {% set statements = get_constraints_sql(relation, constraints, model) %}\n    {% for stmt in statements %}\n      {% call statement() %}\n        {{ stmt }}\n      {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_model_constraints", "macro.dbt_databricks.get_constraints_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2021718, "supported_languages": null}, "macro.dbt_databricks.get_model_constraints": {"name": "get_model_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_model_constraints", "macro_sql": "{% macro get_model_constraints(model) %}\n  {% set constraints = model.get('constraints', []) %}\n  {% if config.get('persist_constraints', False) and model.get('meta', {}).get('constraints') is sequence %}\n    {# Databricks constraints implementation.  Constraints are in the meta property. #}\n    {% set db_constraints = model.get('meta', {}).get('constraints', []) %}\n    {% set constraints = databricks_constraints_to_dbt(db_constraints) %}\n  {% endif %}\n  {{ return(constraints) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks_constraints_to_dbt"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.202631, "supported_languages": null}, "macro.dbt_databricks.get_column_constraints": {"name": "get_column_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_column_constraints", "macro_sql": "{% macro get_column_constraints(column) %}\n  {% set constraints = column.get('constraints', []) %}\n  {% if config.get('persist_constraints', False) and column.get('meta', {}).get('constraint') %}\n    {# Databricks constraints implementation.  Constraint is in the meta property. #}\n    {% set db_constraints = [column.get('meta', {}).get('constraint')] %}\n    {% set constraints = databricks_constraints_to_dbt(db_constraints, column) %}\n  {% endif %}\n  {{ return(constraints) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks_constraints_to_dbt"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.203095, "supported_languages": null}, "macro.dbt_databricks.alter_column_set_constraints": {"name": "alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.alter_column_set_constraints", "macro_sql": "{% macro alter_column_set_constraints(relation, column_dict) %}\n  {{ return(adapter.dispatch('alter_column_set_constraints', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.203264, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_column_set_constraints": {"name": "databricks__alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks__alter_column_set_constraints", "macro_sql": "{% macro databricks__alter_column_set_constraints(relation, model) %}\n  {% set column_dict = model.columns %}\n  {% for column_name in column_dict %}\n    {% set column = column_dict[column_name] %}\n    {% set constraints = get_column_constraints(column)  %}\n    {% set statements = get_constraints_sql(relation, constraints, model, column) %}\n    {% for stmt in statements %}\n      {% call statement() %}\n        {{ stmt }}\n      {% endcall %}\n    {% endfor %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_column_constraints", "macro.dbt_databricks.get_constraints_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.203696, "supported_languages": null}, "macro.dbt_databricks.get_constraints_sql": {"name": "get_constraints_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_constraints_sql", "macro_sql": "{% macro get_constraints_sql(relation, constraints, model, column={}) %}\n  {% set statements = [] %}\n  -- Hack so that not null constraints will be applied before other constraints\n  {% for constraint in constraints|selectattr('type', 'eq', 'not_null') %}\n    {% if constraint %}\n      {% set constraint_statements = get_constraint_sql(relation, constraint, model, column) %}\n      {% for statement in constraint_statements %}\n        {% if statement %}\n          {% do statements.append(statement) %}\n        {% endif %}\n      {% endfor %}\n    {% endif %}\n  {% endfor %}\n  {% for constraint in constraints|rejectattr('type', 'eq', 'not_null') %}\n    {% if constraint %}\n      {% set constraint_statements = get_constraint_sql(relation, constraint, model, column) %}\n      {% for statement in constraint_statements %}\n        {% if statement %}\n          {% do statements.append(statement) %}\n        {% endif %}\n      {% endfor %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(statements) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_constraint_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2045681, "supported_languages": null}, "macro.dbt_databricks.get_constraint_sql": {"name": "get_constraint_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.get_constraint_sql", "macro_sql": "{% macro get_constraint_sql(relation, constraint, model, column={}) %}\n  {% set statements = [] %}\n  {% set type = constraint.get('type', '') %}\n\n  {% if type == 'check' %}\n    {% set expression = constraint.get('expression', '') %}\n    {% if not expression %}\n      {{ exceptions.raise_compiler_error('Invalid check constraint expression') }}\n    {% endif %}\n\n    {% set name = constraint.get('name') %}\n    {% if not name %}\n      {% if local_md5 %}\n        {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n        {%- set name = local_md5 (relation.identifier ~ \";\" ~ column.get('name', '') ~ \";\" ~ expression ~ \";\") -%}\n      {% else %}\n        {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n      {% endif %}\n    {% endif %}\n    {% set stmt = \"alter table \" ~ relation.render() ~ \" add constraint \" ~ name ~ \" check (\" ~ expression ~ \");\" %}\n    {% do statements.append(stmt) %}\n  {% elif type == 'not_null' %}\n    {% set column_names = constraint.get('columns', []) %}\n    {% if column and not column_names %}\n      {% set column_names = [column['name']] %}\n    {% endif %}\n    {% for column_name in column_names %}\n      {% set column = model.get('columns', {}).get(column_name) %}\n      {% if column %}\n        {% set quoted_name = api.Column.get_name(column) %}\n        {% set stmt = \"alter table \" ~ relation.render() ~ \" change column \" ~ quoted_name ~ \" set not null \" ~ (constraint.expression or \"\") ~ \";\" %}\n        {% do statements.append(stmt) %}\n      {% else %}\n        {{ exceptions.warn('not_null constraint on invalid column: ' ~ column_name) }}\n      {% endif %}\n    {% endfor %}\n  {% elif type == 'primary_key' %}\n    {% if constraint.get('warn_unenforced') %}\n      {{ exceptions.warn(\"unenforced constraint type: \" ~ type)}}\n    {% endif %}\n    {% set column_names = constraint.get('columns', []) %}\n    {% if column and not column_names %}\n      {% set column_names = [column['name']] %}\n    {% endif %}\n    {% set quoted_names = [] %}\n    {% for column_name in column_names %}\n      {% set column = model.get('columns', {}).get(column_name) %}\n      {% if not column %}\n        {{ exceptions.warn('Invalid primary key column: ' ~ column_name) }}\n      {% else %}\n        {% set quoted_name = api.Column.get_name(column) %}\n        {% do quoted_names.append(quoted_name) %}\n      {% endif %}\n    {% endfor %}\n\n    {% set joined_names = quoted_names|join(\", \") %}\n\n    {% set name = constraint.get('name') %}\n    {% if not name %}\n      {% if local_md5 %}\n        {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n        {%- set name = local_md5(\"primary_key;\" ~ relation.identifier ~ \";\" ~ column_names ~ \";\") -%}\n      {% else %}\n        {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n      {% endif %}\n    {% endif %}\n    {% set stmt = \"alter table \" ~ relation.render() ~ \" add constraint \" ~ name ~ \" primary key(\" ~ joined_names ~ \");\" %}\n    {% do statements.append(stmt) %}\n  {% elif type == 'foreign_key' %}\n\n    {% if constraint.get('warn_unenforced') %}\n      {{ exceptions.warn(\"unenforced constraint type: \" ~ constraint.type)}}\n    {% endif %}\n\n    {% set name = constraint.get('name') %}\n    \n    {% if constraint.get('expression') %}\n\n      {% if not name %}\n        {% if local_md5 %}\n          {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n          {%- set name = local_md5(\"foreign_key;\" ~ relation.identifier ~ \";\" ~ constraint.get('expression') ~ \";\") -%}\n        {% else %}\n          {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n        {% endif %}    \n      {% endif %}\n\n      {% set stmt = \"alter table \" ~ relation.render() ~ \" add constraint \" ~ name ~ \" foreign key\" ~ constraint.get('expression') %}\n    {% else %}\n      {% set column_names = constraint.get('columns', []) %}\n      {% if column and not column_names %}\n        {% set column_names = [column['name']] %}\n      {% endif %}\n      {% set quoted_names = [] %}\n      {% for column_name in column_names %}\n        {% set column = model.get('columns', {}).get(column_name) %}\n        {% if not column %}\n          {{ exceptions.warn('Invalid foreign key column: ' ~ column_name) }}\n        {% else %}\n          {% set quoted_name = api.Column.get_name(column) %}\n          {% do quoted_names.append(quoted_name) %}\n        {% endif %}\n      {% endfor %}\n\n      {% set joined_names = quoted_names|join(\", \") %}\n\n      {% set parent = constraint.get('to') %}\n      {% if not parent %}\n        {{ exceptions.raise_compiler_error('No parent table defined for foreign key: ' ~ expression) }}\n      {% endif %}\n      {% if not \".\" in parent %}\n        {% set parent = relation.schema ~ \".\" ~ parent%}\n      {% endif %}\n\n      {% if not name %}\n        {% if local_md5 %}\n          {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n          {%- set name = local_md5(\"foreign_key;\" ~ relation.identifier ~ \";\" ~ column_names ~ \";\" ~ parent ~ \";\") -%}\n        {% else %}\n          {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n        {% endif %}    \n      {% endif %}\n\n      {% set stmt = \"alter table \" ~ relation.render() ~ \" add constraint \" ~ name ~ \" foreign key(\" ~ joined_names ~ \") references \" ~ parent %}\n      {% set parent_columns = constraint.get('to_columns') %}\n      {% if parent_columns %}\n        {% set stmt = stmt ~ \"(\" ~ parent_columns|join(\", \") ~ \")\"%}\n      {% endif %}\n    {% endif %}\n    {% set stmt = stmt ~ \";\" %}\n    {% do statements.append(stmt) %}\n  {% elif type == 'custom' %}\n    {% set expression = constraint.get('expression', '') %}\n    {% if not expression %}\n      {{ exceptions.raise_compiler_error('Missing custom constraint expression') }}\n    {% endif %}\n\n    {% set name = constraint.get('name') %}\n    {% set expression = constraint.get('expression') %}\n    {% if not name %}\n      {% if local_md5 %}\n        {{ exceptions.warn(\"Constraint of type \" ~ type ~ \" with no `name` provided. Generating hash instead for relation \" ~ relation.identifier) }}\n        {%- set name = local_md5 (relation.identifier ~ \";\" ~ expression ~ \";\") -%}\n      {% else %}\n        {{ exceptions.raise_compiler_error(\"Constraint of type \" ~ type ~ \" with no `name` provided, and no md5 utility.\") }}\n      {% endif %}\n    {% endif %}\n    {% set stmt = \"alter table \" ~ relation.render() ~ \" add constraint \" ~ name ~ \" \" ~ expression ~ \";\" %}\n    {% do statements.append(stmt) %}\n  {% elif constraint.get('warn_unsupported') %}\n    {{ exceptions.warn(\"unsupported constraint type: \" ~ constraint.type)}}\n  {% endif %}\n\n  {{ return(statements) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.21083, "supported_languages": null}, "macro.dbt_databricks.databricks_constraints_to_dbt": {"name": "databricks_constraints_to_dbt", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/constraints.sql", "original_file_path": "macros/relations/constraints.sql", "unique_id": "macro.dbt_databricks.databricks_constraints_to_dbt", "macro_sql": "{% macro databricks_constraints_to_dbt(constraints, column) %}\n  {# convert constraints defined using the original databricks format #}\n  {% set dbt_constraints = [] %}\n  {% for constraint in constraints %}\n    {% if constraint.get and constraint.get('type') %}\n      {# already in model contract format #}\n      {% do dbt_constraints.append(constraint) %}\n    {% else %}\n      {% if column %}\n        {% if constraint == \"not_null\" %}\n          {% do dbt_constraints.append({\"type\": \"not_null\", \"columns\": [column.get('name')]}) %}\n        {% else %}\n          {{ exceptions.raise_compiler_error('Invalid constraint for column ' ~ column.get('name', \"\") ~ '. Only `not_null` is supported.') }}\n        {% endif %}\n      {% else %}\n        {% set name = constraint['name'] %}\n        {% if not name %}\n          {{ exceptions.raise_compiler_error('Invalid check constraint name') }}\n        {% endif %}\n        {% set condition = constraint['condition'] %}\n        {% if not condition %}\n          {{ exceptions.raise_compiler_error('Invalid check constraint condition') }}\n        {% endif %}\n        {% do dbt_constraints.append({\"name\": name, \"type\": \"check\", \"expression\": condition}) %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(dbt_constraints) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.211894, "supported_languages": null}, "macro.dbt_databricks.create_backup": {"name": "create_backup", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_databricks.create_backup", "macro_sql": "{%- macro create_backup(relation) -%}\n  -- get the standard backup name\n  {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n  -- drop any pre-existing backup\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ adapter.rename_relation(relation, backup_relation) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2121768, "supported_languages": null}, "macro.dbt_databricks.databricks__get_create_sql": {"name": "databricks__get_create_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_databricks.databricks__get_create_sql", "macro_sql": "{%- macro databricks__get_create_sql(relation, sql) -%}\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_streaming_table -%}\n        {{ get_create_streaming_table_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt_databricks.get_create_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.21271, "supported_languages": null}, "macro.dbt_databricks.get_configuration_changes": {"name": "get_configuration_changes", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/config.sql", "original_file_path": "macros/relations/config.sql", "unique_id": "macro.dbt_databricks.get_configuration_changes", "macro_sql": "{%- macro get_configuration_changes(existing_relation) -%}\n    {%- set existing_config = adapter.get_relation_config(existing_relation) -%}\n    {%- set model_config = adapter.get_config_from_model(config.model) -%}\n    {%- set configuration_changes = model_config.get_changeset(existing_config) -%}\n    {% do return(configuration_changes) %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.213026, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_materialized_view": {"name": "databricks__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_materialized_view", "macro_sql": "{% macro databricks__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.213185, "supported_languages": null}, "macro.dbt_databricks.databricks__refresh_materialized_view": {"name": "databricks__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_databricks.databricks__refresh_materialized_view", "macro_sql": "{% macro databricks__refresh_materialized_view(relation) -%}\n  refresh materialized view {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2133162, "supported_languages": null}, "macro.dbt_databricks.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {%- do return(adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    )) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2137809, "supported_languages": null}, "macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql": {"name": "databricks__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql", "macro_sql": "{% macro databricks__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n        {% do return(get_replace_sql(existing_relation, relation,  sql)) %}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n        {% do return(get_alter_mv_internal(relation, configuration_changes)) %}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.get_alter_mv_internal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.214103, "supported_languages": null}, "macro.dbt_databricks.get_alter_mv_internal": {"name": "get_alter_mv_internal", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_mv_internal", "macro_sql": "{% macro get_alter_mv_internal(relation, configuration_changes) %}\n    {%- set refresh = configuration_changes.changes[\"refresh\"] -%}\n    -- Currently only schedule can be altered\n    ALTER MATERIALIZED VIEW {{ relation.render() }}\n        {{ get_alter_sql_refresh_schedule(refresh.cron, refresh.time_zone_value, refresh.is_altered) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_alter_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.214329, "supported_languages": null}, "macro.dbt_databricks.databricks__get_create_materialized_view_as_sql": {"name": "databricks__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_databricks.databricks__get_create_materialized_view_as_sql", "macro_sql": "{% macro databricks__get_create_materialized_view_as_sql(relation, sql) -%}\n  {%- set materialized_view = adapter.get_config_from_model(config.model) -%}\n  {%- set partition_by = materialized_view.config[\"partition_by\"].partition_by -%}\n  {%- set tblproperties = materialized_view.config[\"tblproperties\"].tblproperties -%}\n  {%- set comment = materialized_view.config[\"comment\"].comment -%}\n  {%- set refresh = materialized_view.config[\"refresh\"] -%}\n  create materialized view {{ relation.render() }}\n    {{ get_create_sql_partition_by(partition_by) }}\n    {{ get_create_sql_comment(comment) }}\n    {{ get_create_sql_tblproperties(tblproperties) }}\n    {{ get_create_sql_refresh_schedule(refresh.cron, refresh.time_zone_value) }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_create_sql_partition_by", "macro.dbt_databricks.get_create_sql_comment", "macro.dbt_databricks.get_create_sql_tblproperties", "macro.dbt_databricks.get_create_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2149801, "supported_languages": null}, "macro.dbt_databricks.drop_streaming_table": {"name": "drop_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/drop.sql", "original_file_path": "macros/relations/streaming_table/drop.sql", "unique_id": "macro.dbt_databricks.drop_streaming_table", "macro_sql": "{% macro drop_streaming_table(relation) -%}\n    {{ return(adapter.dispatch('drop_streaming_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.default__drop_streaming_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.215188, "supported_languages": null}, "macro.dbt_databricks.default__drop_streaming_table": {"name": "default__drop_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/drop.sql", "original_file_path": "macros/relations/streaming_table/drop.sql", "unique_id": "macro.dbt_databricks.default__drop_streaming_table", "macro_sql": "{% macro default__drop_streaming_table(relation) -%}\n    drop table if exists {{ relation.render() }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.215285, "supported_languages": null}, "macro.dbt_databricks.refresh_streaming_table": {"name": "refresh_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/refresh.sql", "original_file_path": "macros/relations/streaming_table/refresh.sql", "unique_id": "macro.dbt_databricks.refresh_streaming_table", "macro_sql": "{% macro refresh_streaming_table(relation, sql) -%}\n  {{ adapter.dispatch('refresh_streaming_table', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__refresh_streaming_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.215498, "supported_languages": null}, "macro.dbt_databricks.databricks__refresh_streaming_table": {"name": "databricks__refresh_streaming_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/refresh.sql", "original_file_path": "macros/relations/streaming_table/refresh.sql", "unique_id": "macro.dbt_databricks.databricks__refresh_streaming_table", "macro_sql": "{% macro databricks__refresh_streaming_table(relation, sql) -%}\n  create or refresh streaming table {{ relation.render() }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.215622, "supported_languages": null}, "macro.dbt_databricks.get_alter_streaming_table_as_sql": {"name": "get_alter_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_streaming_table_as_sql", "macro_sql": "{% macro get_alter_streaming_table_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {%- do return(adapter.dispatch('get_alter_streaming_table_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    )) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_alter_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.216248, "supported_languages": null}, "macro.dbt_databricks.databricks__get_alter_streaming_table_as_sql": {"name": "databricks__get_alter_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.databricks__get_alter_streaming_table_as_sql", "macro_sql": "{% macro databricks__get_alter_streaming_table_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n        {% do return(get_replace_sql(existing_relation, relation,  sql)) %}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n        {%- set alter_statement = get_alter_st_internal(relation, configuration_changes) -%}\n        {%- set create_statement = get_create_st_internal(relation, configuration_changes, sql) -%}\n        {%- set return_statements = [] -%}\n        {%- if create_statement -%}\n            {{ return_statements.append(create_statement) }}\n        {%- endif -%}\n        {%- if alter_statement -%}\n            {{ return_statements.append(alter_statement) }}\n        {%- endif -%}\n        {% do return(return_statements) %}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_replace_sql", "macro.dbt_databricks.get_alter_st_internal", "macro.dbt_databricks.get_create_st_internal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2168589, "supported_languages": null}, "macro.dbt_databricks.get_create_st_internal": {"name": "get_create_st_internal", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.get_create_st_internal", "macro_sql": "{% macro get_create_st_internal(relation, configuration_changes, sql) %}\n  {%- set partition_by = configuration_changes.changes[\"partition_by\"].partition_by -%}\n  {%- set tblproperties = configuration_changes.changes[\"tblproperties\"].tblproperties -%}\n  {%- set comment = configuration_changes.changes[\"comment\"].comment -%}\n  CREATE OR REFRESH STREAMING TABLE {{ relation.render() }}\n    {% if partition_by -%}\n        {{ get_create_sql_partition_by(partition_by) }}\n    {%- endif %}\n    {% if comment -%}\n        {{ get_create_sql_comment(comment) }}\n    {%- endif %}\n    {% if tblproperties -%}\n        {{ get_create_sql_tblproperties(tblproperties) }}\n    {%- endif %}\n    AS {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_create_sql_partition_by", "macro.dbt_databricks.get_create_sql_comment", "macro.dbt_databricks.get_create_sql_tblproperties"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.217354, "supported_languages": null}, "macro.dbt_databricks.get_alter_st_internal": {"name": "get_alter_st_internal", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/alter.sql", "original_file_path": "macros/relations/streaming_table/alter.sql", "unique_id": "macro.dbt_databricks.get_alter_st_internal", "macro_sql": "{% macro get_alter_st_internal(relation, configuration_changes) %}\n  {%- set refresh = configuration_changes.changes[\"refresh\"] -%}\n  {%- if refresh and refresh.cron -%}\n    ALTER STREAMING TABLE {{ relation.render() }}\n        {{ get_alter_sql_refresh_schedule(refresh.cron, refresh.time_zone_value, False) -}}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_alter_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.217624, "supported_languages": null}, "macro.dbt_databricks.get_create_streaming_table_as_sql": {"name": "get_create_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/create.sql", "original_file_path": "macros/relations/streaming_table/create.sql", "unique_id": "macro.dbt_databricks.get_create_streaming_table_as_sql", "macro_sql": "{% macro get_create_streaming_table_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_streaming_table_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_create_streaming_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.21793, "supported_languages": null}, "macro.dbt_databricks.databricks__get_create_streaming_table_as_sql": {"name": "databricks__get_create_streaming_table_as_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/streaming_table/create.sql", "original_file_path": "macros/relations/streaming_table/create.sql", "unique_id": "macro.dbt_databricks.databricks__get_create_streaming_table_as_sql", "macro_sql": "{% macro databricks__get_create_streaming_table_as_sql(relation, sql) -%}\n  {%- set streaming_table = adapter.get_config_from_model(config.model) -%}\n  {%- set partition_by = streaming_table.config[\"partition_by\"].partition_by -%}\n  {%- set tblproperties = streaming_table.config[\"tblproperties\"].tblproperties -%}\n  {%- set comment = streaming_table.config[\"comment\"].comment -%}\n  {%- set refresh = streaming_table.config[\"refresh\"] -%}\n\n  CREATE STREAMING TABLE {{ relation.render() }}\n    {{ get_create_sql_partition_by(partition_by) }}\n    {{ get_create_sql_comment(comment) }}\n    {{ get_create_sql_tblproperties(tblproperties) }}\n    {{ get_create_sql_refresh_schedule(refresh.cron, refresh.time_zone_value) }}\n    AS {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_create_sql_partition_by", "macro.dbt_databricks.get_create_sql_comment", "macro.dbt_databricks.get_create_sql_tblproperties", "macro.dbt_databricks.get_create_sql_refresh_schedule"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.218461, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_comment": {"name": "get_create_sql_comment", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/comment.sql", "original_file_path": "macros/relations/components/comment.sql", "unique_id": "macro.dbt_databricks.get_create_sql_comment", "macro_sql": "{%- macro get_create_sql_comment(comment) -%}\n{% if comment is string -%}\n  COMMENT '{{ comment }}'\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.218633, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_refresh_schedule": {"name": "get_create_sql_refresh_schedule", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/refresh_schedule.sql", "original_file_path": "macros/relations/components/refresh_schedule.sql", "unique_id": "macro.dbt_databricks.get_create_sql_refresh_schedule", "macro_sql": "{% macro get_create_sql_refresh_schedule(cron, time_zone_value) %}\n  {%- if cron -%}\n    SCHEDULE CRON '{{ cron }}'{%- if time_zone_value %} AT TIME ZONE '{{ time_zone_value }}'{%- endif -%}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.21898, "supported_languages": null}, "macro.dbt_databricks.get_alter_sql_refresh_schedule": {"name": "get_alter_sql_refresh_schedule", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/refresh_schedule.sql", "original_file_path": "macros/relations/components/refresh_schedule.sql", "unique_id": "macro.dbt_databricks.get_alter_sql_refresh_schedule", "macro_sql": "{% macro get_alter_sql_refresh_schedule(cron, time_zone_value, is_altered) %}\n  {%- if cron -%}\n    {%- if is_altered -%}\n      ALTER SCHEDULE CRON '{{ cron }}'{%- if time_zone_value %} AT TIME ZONE '{{ time_zone_value }}'{%- endif -%}\n    {%- else -%}\n      ADD SCHEDULE CRON '{{ cron }}'{%- if time_zone_value %} AT TIME ZONE '{{ time_zone_value }}'{%- endif -%}\n    {%- endif -%}\n  {%- else -%}\n    DROP SCHEDULE\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.219285, "supported_languages": null}, "macro.dbt_databricks.alter_query": {"name": "alter_query", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/query.sql", "original_file_path": "macros/relations/components/query.sql", "unique_id": "macro.dbt_databricks.alter_query", "macro_sql": "{% macro alter_query(target_relation, query) %}\n  {{ log(\"Altering query\") }}\n  {% if query %}\n    {% call statement('main') %}\n      {{- get_alter_query_sql(target_relation, query) }}\n    {% endcall %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.get_alter_query_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.219651, "supported_languages": null}, "macro.dbt_databricks.get_alter_query_sql": {"name": "get_alter_query_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/query.sql", "original_file_path": "macros/relations/components/query.sql", "unique_id": "macro.dbt_databricks.get_alter_query_sql", "macro_sql": "{% macro get_alter_query_sql(target_relation, query) -%}\n  ALTER {{ target_relation.type|upper }} {{ target_relation.render() }} AS (\n    {{ query }}\n  )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2198038, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_partition_by": {"name": "get_create_sql_partition_by", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/partitioning.sql", "original_file_path": "macros/relations/components/partitioning.sql", "unique_id": "macro.dbt_databricks.get_create_sql_partition_by", "macro_sql": "{% macro get_create_sql_partition_by(partition_by) -%}\n{%- if partition_by -%}\n  PARTITIONED BY ({%- for col in partition_by -%}{{ col }}{% if not loop.last %}, {% endif %}{%- endfor %})\n{%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2200801, "supported_languages": null}, "macro.dbt_databricks.get_create_sql_tblproperties": {"name": "get_create_sql_tblproperties", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/tblproperties.sql", "original_file_path": "macros/relations/components/tblproperties.sql", "unique_id": "macro.dbt_databricks.get_create_sql_tblproperties", "macro_sql": "{% macro get_create_sql_tblproperties(tblproperties) %}\n  {{ databricks__tblproperties_clause(tblproperties)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.220216, "supported_languages": null}, "macro.dbt_databricks.fetch_non_null_constraint_columns": {"name": "fetch_non_null_constraint_columns", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.fetch_non_null_constraint_columns", "macro_sql": "{% macro fetch_non_null_constraint_columns(relation) -%}\n  {% if relation.is_hive_metastore() %}\n    {{ exceptions.raise_compiler_error(\"Incremental application of constraints is not supported for Hive Metastore\") }}\n  {%- endif %}\n  {% call statement('list_non_null_constraint_columns', fetch_result=True) -%}\n    {{ fetch_non_null_constraint_columns_sql(relation) }}\n  {% endcall %}\n  {% do return(load_result('list_non_null_constraint_columns').table) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.fetch_non_null_constraint_columns_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.221334, "supported_languages": null}, "macro.dbt_databricks.fetch_non_null_constraint_columns_sql": {"name": "fetch_non_null_constraint_columns_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.fetch_non_null_constraint_columns_sql", "macro_sql": "{% macro fetch_non_null_constraint_columns_sql(relation) -%}\n  SELECT column_name\n  FROM `{{ relation.database|lower }}`.`information_schema`.`columns`\n  WHERE table_catalog = '{{ relation.database|lower }}' \n    AND table_schema = '{{ relation.schema|lower }}'\n    AND table_name = '{{ relation.identifier|lower }}'\n    AND is_nullable = 'NO';\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.221528, "supported_languages": null}, "macro.dbt_databricks.fetch_primary_key_constraints": {"name": "fetch_primary_key_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.fetch_primary_key_constraints", "macro_sql": "{% macro fetch_primary_key_constraints(relation) -%}\n  {% if relation.is_hive_metastore() %}\n    {{ exceptions.raise_compiler_error(\"Incremental application of constraints is not supported for Hive Metastore\") }}\n  {%- endif %}\n  {% call statement('list_primary_key_constraints', fetch_result=True) -%}\n    {{ fetch_primary_key_constraints_sql(relation) }}\n  {% endcall %}\n  {% do return(load_result('list_primary_key_constraints').table) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.fetch_primary_key_constraints_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2218509, "supported_languages": null}, "macro.dbt_databricks.fetch_primary_key_constraints_sql": {"name": "fetch_primary_key_constraints_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.fetch_primary_key_constraints_sql", "macro_sql": "{% macro fetch_primary_key_constraints_sql(relation) -%}\n  SELECT kcu.constraint_name, kcu.column_name\n  FROM `{{ relation.database|lower }}`.information_schema.key_column_usage kcu\n  WHERE kcu.table_catalog = '{{ relation.database|lower }}' \n    AND kcu.table_schema = '{{ relation.schema|lower }}'\n    AND kcu.table_name = '{{ relation.identifier|lower }}' \n    AND kcu.constraint_name = (\n      SELECT constraint_name\n      FROM `{{ relation.database|lower }}`.information_schema.table_constraints\n      WHERE table_catalog = '{{ relation.database|lower }}'\n        AND table_schema = '{{ relation.schema|lower }}'\n        AND table_name = '{{ relation.identifier|lower }}' \n        AND constraint_type = 'PRIMARY KEY'\n    )\n  ORDER BY kcu.ordinal_position;\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.222167, "supported_languages": null}, "macro.dbt_databricks.fetch_foreign_key_constraints": {"name": "fetch_foreign_key_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.fetch_foreign_key_constraints", "macro_sql": "{% macro fetch_foreign_key_constraints(relation) -%}\n  {% if relation.is_hive_metastore() %}\n    {{ exceptions.raise_compiler_error(\"Incremental application of constraints is not supported for Hive Metastore\") }}\n  {%- endif %}\n  {% call statement('list_foreign_key_constraints', fetch_result=True) -%}\n    {{ fetch_foreign_key_constraints_sql(relation) }}\n  {% endcall %}\n  {% do return(load_result('list_foreign_key_constraints').table) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.fetch_foreign_key_constraints_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.222475, "supported_languages": null}, "macro.dbt_databricks.fetch_foreign_key_constraints_sql": {"name": "fetch_foreign_key_constraints_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.fetch_foreign_key_constraints_sql", "macro_sql": "{% macro fetch_foreign_key_constraints_sql(relation) -%}\n  SELECT\n    kcu.constraint_name,\n    kcu.column_name AS from_column,\n    ukcu.table_catalog AS to_catalog,\n    ukcu.table_schema AS to_schema,\n    ukcu.table_name AS to_table,\n    ukcu.column_name AS to_column\n  FROM `{{ relation.database|lower }}`.information_schema.key_column_usage kcu\n  JOIN `{{ relation.database|lower }}`.information_schema.referential_constraints rc\n    ON kcu.constraint_name = rc.constraint_name\n  JOIN `{{ relation.database|lower }}`.information_schema.key_column_usage ukcu\n    ON rc.unique_constraint_name = ukcu.constraint_name\n    AND kcu.ordinal_position = ukcu.ordinal_position\n  WHERE kcu.table_catalog = '{{ relation.database|lower }}'\n    AND kcu.table_schema = '{{ relation.schema|lower }}'\n    AND kcu.table_name = '{{ relation.identifier|lower }}'\n    AND kcu.constraint_name = (\n      SELECT constraint_name\n      FROM `{{ relation.database|lower }}`.information_schema.table_constraints\n      WHERE table_catalog = '{{ relation.database|lower }}'\n        AND table_schema = '{{ relation.schema|lower }}'\n        AND table_name = '{{ relation.identifier|lower }}'\n        AND constraint_type = 'FOREIGN KEY'\n    )\n  ORDER BY kcu.ordinal_position;\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2228632, "supported_languages": null}, "macro.dbt_databricks.apply_constraints": {"name": "apply_constraints", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.apply_constraints", "macro_sql": "{% macro apply_constraints(relation, constraints) -%}\n  {{ log(\"Applying constraints to relation \" ~ constraints) }}\n  {%- if constraints and relation.is_hive_metastore() -%}\n    {{ exceptions.raise_compiler_error(\"Constraints are only supported for Unity Catalog\") }}\n  {%- endif -%}\n  {# Order matters here because key constraints depend on non-null constraints #} \n  {%- if constraints.unset_constraints %}\n    {%- for constraint in constraints.unset_constraints -%}\n      {%- call statement('main') -%}\n        {{ alter_unset_constraint(relation, constraint) }}\n      {%- endcall -%}\n    {%- endfor -%}\n  {%- endif %}\n  {%- if constraints.unset_non_nulls %}\n    {%- for column in constraints.unset_non_nulls -%}\n      {%- call statement('main') -%}\n        {{ alter_unset_non_null_constraint(relation, column) }}\n      {%- endcall -%}\n    {%- endfor -%}\n  {%- endif %}\n  {%- if constraints.set_non_nulls %}\n    {%- for column in constraints.set_non_nulls -%}\n      {%- call statement('main') -%}\n        {{ alter_set_non_null_constraint(relation, column) }}\n      {%- endcall -%}\n    {%- endfor -%}\n  {%- endif %}\n  {%- if constraints.set_constraints %}\n    {%- for constraint in constraints.set_constraints -%}\n      {%- call statement('main') -%}\n        {{ alter_set_constraint(relation, constraint) }}\n      {%- endcall -%}\n    {%- endfor -%}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.alter_unset_constraint", "macro.dbt_databricks.alter_unset_non_null_constraint", "macro.dbt_databricks.alter_set_non_null_constraint", "macro.dbt_databricks.alter_set_constraint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.223797, "supported_languages": null}, "macro.dbt_databricks.alter_set_non_null_constraint": {"name": "alter_set_non_null_constraint", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.alter_set_non_null_constraint", "macro_sql": "{% macro alter_set_non_null_constraint(relation, column) -%}\n  ALTER {{ relation.type }} {{ relation.render() }} ALTER COLUMN {{ column }} SET NOT NULL;\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.223948, "supported_languages": null}, "macro.dbt_databricks.alter_unset_non_null_constraint": {"name": "alter_unset_non_null_constraint", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.alter_unset_non_null_constraint", "macro_sql": "{% macro alter_unset_non_null_constraint(relation, column) -%}\n  ALTER {{ relation.type }} {{ relation.render() }} ALTER COLUMN {{ column }} DROP NOT NULL;\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2240949, "supported_languages": null}, "macro.dbt_databricks.alter_set_constraint": {"name": "alter_set_constraint", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.alter_set_constraint", "macro_sql": "{% macro alter_set_constraint(relation, constraint) -%}\n  ALTER {{ relation.type }} {{ relation.render() }} ADD {{ constraint.render() }};\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2242482, "supported_languages": null}, "macro.dbt_databricks.alter_unset_constraint": {"name": "alter_unset_constraint", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/components/constraints.sql", "original_file_path": "macros/relations/components/constraints.sql", "unique_id": "macro.dbt_databricks.alter_unset_constraint", "macro_sql": "{% macro alter_unset_constraint(relation, constraint) -%}\n  ALTER {{ relation.type }} {{ relation.render() }} DROP CONSTRAINT {{ constraint.name }};\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.224396, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_table": {"name": "databricks__drop_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_table", "macro_sql": "{% macro databricks__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2245288, "supported_languages": null}, "macro.dbt_databricks.safe_relation_replace": {"name": "safe_relation_replace", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_databricks.safe_relation_replace", "macro_sql": "{% macro safe_relation_replace(existing_relation, staging_relation, intermediate_relation, compiled_code) %}\n  \n  {{ create_table_at(staging_relation, intermediate_relation, compiled_code) }}\n\n  {{ create_backup(existing_relation) }}\n\n  {{ adapter.rename_relation(staging_relation, existing_relation) }}\n\n  {% call statement('main') %}\n    {{ get_drop_backup_sql(existing_relation) }}\n  {% endcall %}\n  \n  {{ adapter.cache_dropped(make_backup_relation(existing_relation, existing_relation.type)) }}\n\n  {{ drop_relation_if_exists(intermediate_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.create_table_at", "macro.dbt_databricks.create_backup", "macro.dbt.statement", "macro.dbt.get_drop_backup_sql", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.225024, "supported_languages": null}, "macro.dbt_databricks.databricks__get_rename_table_sql": {"name": "databricks__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_databricks.databricks__get_rename_table_sql", "macro_sql": "{% macro databricks__get_rename_table_sql(relation, new_name) %}\n  ALTER TABLE {{ relation.render() }} RENAME TO `{{ new_name }}`\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.225187, "supported_languages": null}, "macro.dbt_databricks.apply_config_changeset": {"name": "apply_config_changeset", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/alter.sql", "original_file_path": "macros/relations/table/alter.sql", "unique_id": "macro.dbt_databricks.apply_config_changeset", "macro_sql": "{% macro apply_config_changeset(target_relation, model, configuration_changes) %}\n    {{ log(\"Applying configuration changes to relation \" ~ target_relation) }}\n    {% if configuration_changes %}\n      {% set comment = configuration_changes.changes.get(\"comment\") %}\n      {% set column_comments = configuration_changes.changes.get(\"column_comments\") %}\n      {% set tags = configuration_changes.changes.get(\"tags\") %}\n      {% set tblproperties = configuration_changes.changes.get(\"tblproperties\") %}\n      {% set liquid_clustering = configuration_changes.changes.get(\"liquid_clustering\")%}\n      {% set constraints = configuration_changes.changes.get(\"constraints\") %}\n      {% if tags is not none %}\n        {% do apply_tags(target_relation, tags.set_tags, tags.unset_tags) %}\n      {%- endif -%}\n      {% if tblproperties is not none %}\n        {% do apply_tblproperties(target_relation, tblproperties.tblproperties) %}\n      {%- endif -%}\n      {% if liquid_clustering is not none %}\n        {% do apply_liquid_clustered_cols(target_relation, liquid_clustering) %}\n      {%- endif -%}\n      {% if comment %}\n        {{ run_query_as(alter_relation_comment_sql(target_relation, comment.comment), 'alter_relation_comment', fetch_result=False) }}\n      {% endif %}\n      {% if column_comments %}\n        {{ alter_column_comments(target_relation, column_comments.comments) }}\n      {% endif %}\n      {% if constraints %}\n        {{ apply_constraints(target_relation, constraints) }}\n      {% endif %}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.apply_tags", "macro.dbt_databricks.apply_tblproperties", "macro.dbt_databricks.apply_liquid_clustered_cols", "macro.dbt_databricks.run_query_as", "macro.dbt_databricks.alter_relation_comment_sql", "macro.dbt_databricks.alter_column_comments", "macro.dbt_databricks.apply_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.226549, "supported_languages": null}, "macro.dbt_databricks.create_table_at": {"name": "create_table_at", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_databricks.create_table_at", "macro_sql": "{% macro create_table_at(relation, intermediate_relation, compiled_code) %}\n  {% set tags = config.get('databricks_tags') %}\n  {% set model_columns = model.get('columns', []) %}\n  {% set existing_columns = adapter.get_columns_in_relation(intermediate_relation) %}\n  {% set model_constraints = model.get('constraints', []) %}\n  {% set columns_and_constraints = adapter.parse_columns_and_constraints(existing_columns, model_columns, model_constraints) %}\n  {% set target_relation = relation.enrich(columns_and_constraints[1]) %}\n  \n  {% call statement('main') %}\n    {{ get_create_table_sql(target_relation, columns_and_constraints[0], compiled_code) }}\n  {% endcall %}\n\n  {{ apply_alter_constraints(target_relation) }}\n  {{ apply_tags(target_relation, tags) }}\n\n  {% call statement('merge into target') %}\n    insert into {{ target_relation }} select * from {{ intermediate_relation }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.get_create_table_sql", "macro.dbt_databricks.apply_alter_constraints", "macro.dbt_databricks.apply_tags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.228201, "supported_languages": null}, "macro.dbt_databricks.get_create_table_sql": {"name": "get_create_table_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_databricks.get_create_table_sql", "macro_sql": "{% macro get_create_table_sql(target_relation, columns, compiled_code) %}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set contract = config.get('contract') -%}\n  {%- set contract_enforced = contract and contract.enforced -%}\n  {%- if contract_enforced -%}\n    {{ get_assert_columns_equivalent(compiled_code) }}\n  {%- endif -%}\n\n  {%- if catalog_relation.file_format == 'delta' %}\n  create or replace table {{ target_relation.render() }}\n  {% else %}\n  create table {{ target_relation.render() }}\n  {% endif -%}\n  {{ get_column_and_constraints_sql(target_relation, columns) }}\n  {{ file_format_clause(catalog_relation) }}\n  {{ databricks__options_clause(catalog_relation) }}\n  {{ partition_cols(label=\"partitioned by\") }}\n  {{ liquid_clustered_cols() }}\n  {{ clustered_cols(label=\"clustered by\") }}\n  {{ location_clause(catalog_relation) }}\n  {{ comment_clause() }}\n  {{ tblproperties_clause() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt_databricks.get_column_and_constraints_sql", "macro.dbt_databricks.file_format_clause", "macro.dbt_databricks.databricks__options_clause", "macro.dbt_spark.partition_cols", "macro.dbt_databricks.liquid_clustered_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_databricks.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_databricks.tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.228943, "supported_languages": null}, "macro.dbt_databricks.databricks__create_table_as": {"name": "databricks__create_table_as", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_databricks.databricks__create_table_as", "macro_sql": "{% macro databricks__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- if language == 'sql' -%}\n    {%- if temporary -%}\n      {{ create_temporary_view(relation, compiled_code) }}\n    {%- else -%}\n      {% if catalog_relation.file_format == 'delta' %}\n        create or replace table {{ relation.render() }}\n      {% else %}\n        create table {{ relation.render() }}\n      {% endif %}\n      {%- set contract_config = config.get('contract') -%}\n      {% if contract_config and contract_config.enforced %}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% endif %}\n      {{ file_format_clause(catalog_relation) }}\n      {{ databricks__options_clause(catalog_relation) }}\n      {{ partition_cols(label=\"partitioned by\") }}\n      {{ liquid_clustered_cols() }}\n      {{ clustered_cols(label=\"clustered by\") }}\n      {{ location_clause(catalog_relation) }}\n      {{ comment_clause() }}\n      {{ tblproperties_clause() }}\n      as\n      {{ compiled_code }}\n    {%- endif -%}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ databricks__py_write_table(compiled_code=compiled_code, target_relation=relation) }}\n  {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt_databricks.file_format_clause", "macro.dbt_databricks.databricks__options_clause", "macro.dbt_spark.partition_cols", "macro.dbt_databricks.liquid_clustered_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_databricks.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_databricks.tblproperties_clause", "macro.dbt_databricks.databricks__py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.229967, "supported_languages": null}, "macro.dbt_databricks.databricks__options_clause": {"name": "databricks__options_clause", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_databricks.databricks__options_clause", "macro_sql": "{% macro databricks__options_clause(catalog_relation=none) -%}\n  {#-\n    Moving forward, this macro should require a `catalog_relation`, which is covered by the first condition.\n    However, there could be existing macros that is still passing no arguments, including user macros.\n    Hence, we need to support the old code still, which is covered by the second condition.\n    Additionally, since this rolls up to `options_clause` in `dbt-spark`, which does not have any arguments,\n    all calls to `options_clause` will take the second path. This macro needs to be called directly\n    via `databricks__options_clause`.\n  -#}\n  {%- if catalog_relation is not none -%}\n    {%- set file_format = catalog_relation.file_format -%}\n  {%- else -%}\n    {%- set file_format = config.get('file_format', default='delta') -%}\n  {%- endif -%}\n\n  {%- set options = config.get('options') -%}\n  {%- if file_format == 'hudi' -%}\n    {%- set unique_key = config.get('unique_key') -%}\n    {%- if unique_key is not none and options is none -%}\n      {%- set options = {'primaryKey': config.get('unique_key')} -%}\n    {%- elif unique_key is not none and options is not none and 'primaryKey' not in options -%}\n      {%- set _ = options.update({'primaryKey': config.get('unique_key')}) -%}\n    {%- elif options is not none and 'primaryKey' in options and options['primaryKey'] != unique_key -%}\n      {{ exceptions.raise_compiler_error(\"unique_key and options('primaryKey') should be the same column(s).\") }}\n    {%- endif %}\n  {%- endif %}\n\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.230966, "supported_languages": null}, "macro.dbt_databricks.get_create_intermediate_table": {"name": "get_create_intermediate_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_databricks.get_create_intermediate_table", "macro_sql": "{% macro get_create_intermediate_table(relation, compiled_code, language) %}\n  {%- if language == 'sql' -%}\n    {{ create_temporary_view(relation, compiled_code) }}\n  {%- else -%}\n    {{ create_python_intermediate_table(relation, compiled_code) }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt_databricks.create_python_intermediate_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2311869, "supported_languages": null}, "macro.dbt_databricks.databricks__drop_view": {"name": "databricks__drop_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_databricks.databricks__drop_view", "macro_sql": "{% macro databricks__drop_view(relation) -%}\n  DROP VIEW IF EXISTS {{ relation.render() }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.231322, "supported_languages": null}, "macro.dbt_databricks.databricks__get_replace_view_sql": {"name": "databricks__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_databricks.databricks__get_replace_view_sql", "macro_sql": "{% macro databricks__get_replace_view_sql(target_relation, sql) %}\n  {{ create_view_as(target_relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.231472, "supported_languages": null}, "macro.dbt_databricks.databricks__get_rename_view_sql": {"name": "databricks__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_databricks.databricks__get_rename_view_sql", "macro_sql": "{% macro databricks__get_rename_view_sql(relation, new_name) %}\n  ALTER VIEW {{ relation.render() }} RENAME TO {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2316318, "supported_languages": null}, "macro.dbt_databricks.alter_view": {"name": "alter_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/alter.sql", "original_file_path": "macros/relations/view/alter.sql", "unique_id": "macro.dbt_databricks.alter_view", "macro_sql": "{% macro alter_view(target_relation, changes) %}\n  {{ log(\"Updating view via ALTER\") }}\n  {{ adapter.dispatch('alter_view', 'dbt')(target_relation, changes) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.23201, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_view": {"name": "databricks__alter_view", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/alter.sql", "original_file_path": "macros/relations/view/alter.sql", "unique_id": "macro.dbt_databricks.databricks__alter_view", "macro_sql": "{% macro databricks__alter_view(target_relation, changes) %}\n  {% set tags = changes.get(\"tags\") %}\n  {% set tblproperties = changes.get(\"tblproperties\") %}\n  {% set query = changes.get(\"query\") %}\n  {% set column_comments = changes.get(\"column_comments\") %}\n  {% if tags %}\n    {{ apply_tags(target_relation, tags.set_tags, tags.unset_tags) }}\n  {% endif %}\n  {% if tblproperties %}\n    {{ apply_tblproperties(target_relation, tblproperties.tblproperties) }}\n  {% endif %}\n  {% if query %}\n    {{ alter_query(target_relation, query.query) }}\n  {% endif %}\n  {% if column_comments %}\n    {{ alter_column_comments(target_relation, column_comments.comments) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.apply_tags", "macro.dbt_databricks.apply_tblproperties", "macro.dbt_databricks.alter_query", "macro.dbt_databricks.alter_column_comments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2326899, "supported_languages": null}, "macro.dbt_databricks.databricks__create_view_as": {"name": "databricks__create_view_as", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_databricks.databricks__create_view_as", "macro_sql": "{% macro databricks__create_view_as(relation, sql) %}\n  {{ log(\"Creating view \" ~ relation) }}\n  create or replace view {{ relation.render() }}\n  {%- if config.persist_column_docs() -%}\n    {%- set model_columns = model.columns -%}\n    {%- set query_columns = get_columns_in_query(sql) -%}\n    {%- if query_columns %}\n  (\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n  )\n    {%- endif -%}\n  {%- endif %}\n  {{ comment_clause() }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config and contract_config.enforced %}\n  {{ get_assert_columns_equivalent(sql) }}\n  {%- endif -%}\n  {{ tblproperties_clause() }}\n  as (\n    {{ sql }}\n  )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_databricks.get_persist_docs_column_list", "macro.dbt_spark.comment_clause", "macro.dbt.get_assert_columns_equivalent", "macro.dbt_databricks.tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.233571, "supported_languages": null}, "macro.dbt_databricks.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_databricks.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {%- if column_name in column_dict and column_dict[column_name][\"description\"] -%}\n    {%- set escaped_description = column_dict[column_name][\"description\"] | replace(\"'\", \"\\\\'\") -%}\n    {%- set column_comment_clause = \"comment '\" ~ escaped_description ~ \"'\" -%}\n    {{ adapter.quote(column_name) }} {{ column_comment_clause }}\n  {%- else -%}\n    {{ adapter.quote(column_name) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2340028, "supported_languages": null}, "macro.dbt_databricks.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_databricks.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) -%}\n  {%- for column_name in query_columns -%}\n    {{ get_column_comment_sql(column_name, model_columns) }}{{\",\\n\\t\" if not loop.last else \"\" }}\n  {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2342222, "supported_languages": null}, "macro.dbt_databricks.statement_with_staging_table": {"name": "statement_with_staging_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt_databricks.statement_with_staging_table", "macro_sql": "{% macro statement_with_staging_table(name=None, staging_table=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result, staging_table=staging_table) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.235059, "supported_languages": null}, "macro.dbt_databricks.execute_multiple_statements": {"name": "execute_multiple_statements", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt_databricks.execute_multiple_statements", "macro_sql": "{% macro execute_multiple_statements(statements) %}\n  {%- if statements is string %}\n    {% call statement(name=\"main\") %}\n      {{ statements }}\n    {% endcall %}\n  {%- else %}\n    {%- for sql in statements %}\n      {% call statement(name=\"main\") %}\n        {{ sql }}\n      {% endcall %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2353761, "supported_languages": null}, "macro.dbt_databricks.run_query_as": {"name": "run_query_as", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt_databricks.run_query_as", "macro_sql": "{% macro run_query_as(sql, name, fetch_result=True) %}\n  {% call statement(name, fetch_result, auto_begin=False) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% if fetch_result %}\n    {{ return(load_result(name).table) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2356522, "supported_languages": null}, "macro.dbt_databricks.databricks__dateadd": {"name": "databricks__dateadd", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_databricks.databricks__dateadd", "macro_sql": "{% macro databricks__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {%- if adapter.compare_dbr_version(10, 4) >= 0 -%}\n    timestampadd({{datepart}}, {{interval}}, {{from_date_or_timestamp}})\n  {%- else -%}\n    {{ spark__dateadd(datepart, interval, from_date_or_timestamp) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.235987, "supported_languages": null}, "macro.dbt_databricks.databricks__datediff": {"name": "databricks__datediff", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_databricks.databricks__datediff", "macro_sql": "{% macro databricks__datediff(first_date, second_date, datepart) %}\n  {%- if adapter.compare_dbr_version(10, 4) >= 0 -%}\n    timestampdiff({{datepart}}, {{date_trunc(datepart, first_date)}}, {{date_trunc(datepart, second_date)}})\n  {%- else -%}\n    {{ spark__datediff(first_date, second_date, datepart) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_spark.spark__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.236376, "supported_languages": null}, "macro.dbt_databricks.databricks__split_part": {"name": "databricks__split_part", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_databricks.databricks__split_part", "macro_sql": "{% macro databricks__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n\n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n\n    {% endset %}\n\n    {% if part_number >= 0 %}\n\n        {% set split_part_expr %}\n\n        get(split(\n            {{ string_text }},\n            {{ delimiter_expr }}\n            ), {{ part_number - 1 if part_number > 0 else part_number }})\n\n        {% endset %}\n\n    {% else %}\n\n        {% set split_part_expr %}\n\n        get(split(\n            {{ string_text }},\n            {{ delimiter_expr }}\n            ), \n                length({{ string_text }})\n                - length(\n                    replace({{ string_text }},  {{ delimiter_text }}, '')\n                ) + 1 + {{ part_number }}\n            )\n\n        {% endset %}\n\n    {% endif %}\n\n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.237122, "supported_languages": null}, "macro.dbt_databricks.databricks_copy_into": {"name": "databricks_copy_into", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/copy_into.sql", "original_file_path": "macros/adapters/copy_into.sql", "unique_id": "macro.dbt_databricks.databricks_copy_into", "macro_sql": "{% macro databricks_copy_into(\n  target_table,\n  source,\n  file_format,\n  expression_list=none,\n  source_credential=none,\n  source_encryption=none,\n  validate=none,\n  files=none,\n  pattern=none,\n  format_options=none,\n  copy_options=none) -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n        database=target.database,\n        schema=target.schema,\n        identifier=target_table,\n        type='table') -%}\n\n  {%- set source_clause -%}\n    {%- if expression_list -%}\n      ( select {{ expression_list }} from '{{ source }}' )\n    {%- else -%}\n      '{{ source }}'\n    {%- endif -%}\n    {%- if source_credential or source_encryption %}\n      WITH (\n      {%- if source_credential %}\n        credential (\n          {%- for name in source_credential -%}\n            '{{ name }}' = '{{ source_credential[name] }}' {%- if not loop.last %}, {% endif -%}\n          {%- endfor -%}\n        )\n      {%- endif %}\n      {%- if source_encryption %}\n        encryption (\n          {%- for name in source_encryption -%}\n            '{{ name }}' = '{{ source_encryption[name] }}' {%- if not loop.last %}, {% endif -%}\n          {%- endfor -%}\n        )\n      {%- endif %}\n      )\n    {%- endif -%}\n  {%- endset -%}\n\n  {% set query %}\n    copy into {{ target_relation }}\n    from {{ source_clause }}\n    fileformat = {{ file_format }}\n    {% if validate -%} validate {{ validate }} {%- endif %}\n    {% if files and pattern %}\n        {{ exceptions.raise_compiler_error(\"You can only specify one of 'files' or 'pattern'\") }}\n    {% endif %}\n    {% if files -%}\n      files = (\n        {%- for file in files -%}\n          '{{ file }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n    {% if pattern -%}\n        pattern = '{{ pattern }}'\n    {%- endif %}\n    {% if format_options -%}\n      format_options (\n        {%- for key in format_options -%}\n          '{{ key }}' = '{{ format_options[key] }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n    {% if copy_options -%}\n      copy_options (\n        {%- for key in copy_options -%}\n          '{{ key }}' = '{{ copy_options[key] }}' {%- if not loop.last %}, {% endif -%}\n        {%- endfor -%}\n      )\n    {%- endif %}\n  {% endset %}\n\n  {{ run_query_as(query, 'copy_into', fetch_result=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt_databricks.run_query_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2394361, "supported_languages": null}, "macro.dbt_databricks.make_staging_relation": {"name": "make_staging_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.make_staging_relation", "macro_sql": "{% macro make_staging_relation(base_relation, suffix='__dbt_stg', type='table') %}\n  {% set unique_tmp_table_suffix = config.get('unique_tmp_table_suffix', False) | as_bool %}\n  {% if unique_tmp_table_suffix %}\n    {% set suffix = adapter.generate_unique_temporary_table_suffix(suffix) %}\n  {% endif %}\n  {% set stg_identifier = base_relation.identifier ~ suffix %}\n  {% set stg_relation = api.Relation.create(database=base_relation.database, schema=base_relation.schema, identifier=stg_identifier, type=type) %}\n  {% do return(stg_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.240337, "supported_languages": null}, "macro.dbt_databricks.databricks__make_intermediate_relation": {"name": "databricks__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.databricks__make_intermediate_relation", "macro_sql": "{% macro databricks__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(databricks__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.240479, "supported_languages": null}, "macro.dbt_databricks.databricks__make_temp_relation": {"name": "databricks__make_temp_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.databricks__make_temp_relation", "macro_sql": "{% macro databricks__make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {% set unique_tmp_table_suffix = config.get('unique_tmp_table_suffix', False) | as_bool %}\n\n  {% if unique_tmp_table_suffix %}\n    {% set suffix = adapter.generate_unique_temporary_table_suffix() %}\n  {% endif %}\n  \n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {% set tmp_identifier = base_relation.identifier ~ suffix %}\n  {% set language = model['language'] %}\n  {%- if language == 'sql' -%}\n    {% set tmp_relation = api.Relation.create(identifier=tmp_identifier, type='view') %}\n  {%- else -%}\n    {% set tmp_relation = api.Relation.create(database=base_relation.database, schema=base_relation.schema, identifier=tmp_identifier, type='table') %}\n  {%- endif -%}\n  {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2412128, "supported_languages": null}, "macro.dbt_databricks.databricks__get_or_create_relation": {"name": "databricks__get_or_create_relation", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.databricks__get_or_create_relation", "macro_sql": "{% macro databricks__get_or_create_relation(database, schema, identifier, type, needs_information=False) %}\n  {%- set target_relation = adapter.get_relation(\n            database=database,\n            schema=schema,\n            identifier=identifier,\n            needs_information=needs_information) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.241717, "supported_languages": null}, "macro.dbt_databricks.get_column_and_constraints_sql": {"name": "get_column_and_constraints_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.get_column_and_constraints_sql", "macro_sql": "{% macro get_column_and_constraints_sql(relation, columns) %}\n  (\n    {% for column in columns %}\n      {{ column.render_for_create() }}{% if not loop.last or relation.create_constraints %},{% endif %}\n    {% endfor %}\n    {% if relation.create_constraints %}\n      {{ relation.render_constraints_for_create() }}\n    {% endif %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.242023, "supported_languages": null}, "macro.dbt_databricks.load_relation_with_metadata": {"name": "load_relation_with_metadata", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_databricks.load_relation_with_metadata", "macro_sql": "{% macro load_relation_with_metadata(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier,\n    needs_information=True\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.242235, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog": {"name": "databricks__get_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog", "macro_sql": "{% macro databricks__get_catalog(information_schema, schemas) -%}\n  {% set query %}\nWITH tables AS (\n  {{ databricks__get_catalog_tables_sql(information_schema) }}\n  {{ databricks__get_catalog_schemas_where_clause_sql(information_schema.database, schemas) }}\n),\ncolumns AS (\n  {{ databricks__get_catalog_columns_sql(information_schema) }}\n  {{ databricks__get_catalog_schemas_where_clause_sql(information_schema.database, schemas) }}\n)\n{{ databricks__get_catalog_results_sql() }}\n  {%- endset -%}\n\n  {{ return(run_query_as(query, 'get_catalog')) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog_tables_sql", "macro.dbt_databricks.databricks__get_catalog_schemas_where_clause_sql", "macro.dbt_databricks.databricks__get_catalog_columns_sql", "macro.dbt_databricks.databricks__get_catalog_results_sql", "macro.dbt_databricks.run_query_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2430441, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_relations": {"name": "databricks__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_relations", "macro_sql": "{% macro databricks__get_catalog_relations(information_schema, relations) -%}\n  {% set query %}\nWITH tables AS (\n  {{ databricks__get_catalog_tables_sql(information_schema) }}\n  {{ databricks__get_catalog_relations_where_clause_sql(information_schema.database, relations) }}\n),\ncolumns AS (\n  {{ databricks__get_catalog_columns_sql(information_schema) }}\n  {{ databricks__get_catalog_relations_where_clause_sql(information_schema.database, relations) }}\n)\n{{ databricks__get_catalog_results_sql() }}\n  {%- endset -%}\n\n  {{ return(run_query_as(query, 'get_catalog_relations')) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog_tables_sql", "macro.dbt_databricks.databricks__get_catalog_relations_where_clause_sql", "macro.dbt_databricks.databricks__get_catalog_columns_sql", "macro.dbt_databricks.databricks__get_catalog_results_sql", "macro.dbt_databricks.run_query_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2434182, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_tables_sql": {"name": "databricks__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_tables_sql", "macro_sql": "{% macro databricks__get_catalog_tables_sql(information_schema) -%}\nSELECT\n  table_catalog AS table_database,\n  table_schema,\n  table_name,\n  lower(table_type) AS table_type,\n  comment AS table_comment,\n  table_owner,\n  'Last Modified' AS `stats:last_modified:label`,\n  last_altered AS `stats:last_modified:value`,\n  'The timestamp for last update/change' AS `stats:last_modified:description`,\n  (last_altered IS NOT NULL AND table_type NOT ILIKE '%VIEW%') AS `stats:last_modified:include`\nFROM `system`.`information_schema`.`tables`\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.243526, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_columns_sql": {"name": "databricks__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_columns_sql", "macro_sql": "{% macro databricks__get_catalog_columns_sql(information_schema) -%}\nSELECT\n  table_catalog AS table_database,\n  table_schema,\n  table_name,\n  column_name,\n  ordinal_position AS column_index,\n  lower(full_data_type) AS column_type,\n  comment AS column_comment\nFROM `system`.`information_schema`.`columns`\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2436118, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_results_sql": {"name": "databricks__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_results_sql", "macro_sql": "{% macro databricks__get_catalog_results_sql() -%}\nSELECT *\nFROM tables\nJOIN columns USING (table_database, table_schema, table_name)\nORDER BY column_index\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.243684, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_schemas_where_clause_sql": {"name": "databricks__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro databricks__get_catalog_schemas_where_clause_sql(catalog, schemas) -%}\nWHERE table_catalog = '{{ catalog|lower }}' AND (\n  {%- for relation in schemas -%}\n  table_schema = '{{ relation[1]|lower }}'{%- if not loop.last %} OR {% endif -%}\n  {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.243925, "supported_languages": null}, "macro.dbt_databricks.databricks__get_catalog_relations_where_clause_sql": {"name": "databricks__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/catalog.sql", "original_file_path": "macros/adapters/catalog.sql", "unique_id": "macro.dbt_databricks.databricks__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro databricks__get_catalog_relations_where_clause_sql(catalog, relations) -%}\nWHERE table_catalog = '{{ catalog|lower }}' AND (\n  {%- for relation in relations -%}\n    {%- if relation.schema and relation.identifier %}\n  (\n    table_schema = '{{ relation.schema|lower }}'\n    AND table_name = '{{ relation.identifier|lower }}'\n  )\n    {%- elif relation.schema %}\n  (\n    table_schema = '{{ relation.schema|lower }}'\n  )\n    {% else %}\n      {% do exceptions.raise_compiler_error(\n        '`get_catalog_relations` requires a list of relations, each with a schema'\n      ) %}\n    {% endif %}\n    {%- if not loop.last %} OR {% endif -%}\n  {%- endfor -%}\n)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.24435, "supported_languages": null}, "macro.dbt_databricks.current_catalog": {"name": "current_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.current_catalog", "macro_sql": "{% macro current_catalog() -%}\n  {{ return(adapter.dispatch('current_catalog', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__current_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.244631, "supported_languages": null}, "macro.dbt_databricks.databricks__current_catalog": {"name": "databricks__current_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.databricks__current_catalog", "macro_sql": "{% macro databricks__current_catalog() -%}\n  {{ return(run_query_as(current_catalog_sql(), 'current_catalog')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.current_catalog_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.244756, "supported_languages": null}, "macro.dbt_databricks.current_catalog_sql": {"name": "current_catalog_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.current_catalog_sql", "macro_sql": "{% macro current_catalog_sql() %}\nSELECT current_catalog()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2448199, "supported_languages": null}, "macro.dbt_databricks.use_catalog": {"name": "use_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.use_catalog", "macro_sql": "{% macro use_catalog(catalog) -%}\n  {{ adapter.dispatch('use_catalog', 'dbt')(catalog) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__use_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.244948, "supported_languages": null}, "macro.dbt_databricks.databricks__use_catalog": {"name": "databricks__use_catalog", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.databricks__use_catalog", "macro_sql": "{% macro databricks__use_catalog(catalog) -%}\n  {{ run_query_as(use_catalog_sql(catalog), 'use_catalog', fetch_result=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.use_catalog_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.245093, "supported_languages": null}, "macro.dbt_databricks.use_catalog_sql": {"name": "use_catalog_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/databricks_catalog.sql", "original_file_path": "macros/adapters/databricks_catalog.sql", "unique_id": "macro.dbt_databricks.use_catalog_sql", "macro_sql": "{% macro use_catalog_sql(catalog) %}\nUSE CATALOG {{ adapter.quote(catalog)|lower }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.245259, "supported_languages": null}, "macro.dbt_databricks.databricks__py_write_table": {"name": "databricks__py_write_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/python.sql", "original_file_path": "macros/adapters/python.sql", "unique_id": "macro.dbt_databricks.databricks__py_write_table", "macro_sql": "{% macro databricks__py_write_table(compiled_code, target_relation) %}\n{{ compiled_code }}\n# --- Autogenerated dbt materialization code. --- #\ndbt = dbtObj(spark.table)\ndf = model(dbt, spark)\n\nimport pyspark\n\n{{ py_try_import('pyspark.sql.connect.dataframe', 'newer_pyspark_available') }}\n{{ py_try_import('pandas', 'pandas_available') }}\n{{ py_try_import('pyspark.pandas', 'pyspark_pandas_api_available') }}\n{{ py_try_import('databricks.koalas', 'koalas_available') }}\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\n\nif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n    if pyspark_pandas_api_available:\n        df = pyspark.pandas.frame.DataFrame(df)\n    elif koalas_available:\n        df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n    pass  # since it is already a Spark DataFrame\nelif newer_pyspark_available and isinstance(df, pyspark.sql.connect.dataframe.DataFrame):\n    pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n    df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n    df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n    df = spark.createDataFrame(df)\nelse:\n    msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n    raise Exception(msg)\n\nwriter = (\n    df.write\n        .mode(\"overwrite\")\n        .option(\"overwriteSchema\", \"true\")\n{{ py_get_writer_options()|indent(8, True) }}\n)\n\nwriter.saveAsTable(\"{{ target_relation }}\")\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.py_try_import", "macro.dbt_databricks.py_get_writer_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.246318, "supported_languages": null}, "macro.dbt_databricks.py_get_writer_options": {"name": "py_get_writer_options", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/python.sql", "original_file_path": "macros/adapters/python.sql", "unique_id": "macro.dbt_databricks.py_get_writer_options", "macro_sql": "\n\n{%- macro py_get_writer_options() -%}\n{%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n{%- set file_format = config.get('file_format', validator=validation.any[basestring])|default('delta', true) -%}\n{%- set partition_by = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n{%- set liquid_clustered_by = config.get('liquid_clustered_by', validator=validation.any[list, basestring]) -%}\n{%- set clustered_by = config.get('clustered_by', validator=validation.any[list, basestring]) -%}\n{%- set buckets = config.get('buckets', validator=validation.any[int]) -%}\n.format(\"{{ file_format }}\")\n{%- if location_root is not none %}\n{%- set model_path = adapter.compute_external_path(config, model, is_incremental()) %}\n.option(\"path\", \"{{ model_path }}\")\n{%- endif -%}\n{%- if partition_by is not none -%}\n    {%- if partition_by is string -%}\n        {%- set partition_by = [partition_by] -%}\n    {%- endif %}\n.partitionBy({{ partition_by }})\n{%- endif -%}\n{%- if liquid_clustered_by and not is_incremental() -%}\n    {%- if liquid_clustered_by is string -%}\n        {%- set liquid_clustered_by = [liquid_clustered_by] -%}\n    {%- endif %}\n.clusterBy({{ liquid_clustered_by }})\n{%- endif -%}\n{%- if (clustered_by is not none) and (buckets is not none) -%}\n    {%- if clustered_by is string -%}\n        {%- set clustered_by = [clustered_by] -%}\n    {%- endif %}\n.bucketBy({{ buckets }}, {{ clustered_by }})\n{%- endif -%}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2476742, "supported_languages": null}, "macro.dbt_databricks.py_try_import": {"name": "py_try_import", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/python.sql", "original_file_path": "macros/adapters/python.sql", "unique_id": "macro.dbt_databricks.py_try_import", "macro_sql": "{% macro py_try_import(library, var_name) -%}\n# make sure {{ library }} exists before using it\ntry:\n    import {{ library }}\n    {{ var_name }} = True\nexcept ImportError:\n    {{ var_name }} = False\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.247838, "supported_languages": null}, "macro.dbt_databricks.create_python_intermediate_table": {"name": "create_python_intermediate_table", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/python.sql", "original_file_path": "macros/adapters/python.sql", "unique_id": "macro.dbt_databricks.create_python_intermediate_table", "macro_sql": "{% macro create_python_intermediate_table(relation, compiled_code) %}\n{{ compiled_code }}\n\n{%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n{%- set file_format = config.get('file_format', validator=validation.any[basestring])|default('delta', true) -%}\n\n# --- Autogenerated dbt materialization code. --- #\ndbt = dbtObj(spark.table)\ndf = model(dbt, spark)\n\nimport pyspark\n\n{{ py_try_import('pyspark.sql.connect.dataframe', 'newer_pyspark_available') }}\n{{ py_try_import('pandas', 'pandas_available') }}\n{{ py_try_import('pyspark.pandas', 'pyspark_pandas_api_available') }}\n{{ py_try_import('databricks.koalas', 'koalas_available') }}\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\n\nif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n    if pyspark_pandas_api_available:\n        df = pyspark.pandas.frame.DataFrame(df)\n    elif koalas_available:\n        df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n    pass  # since it is already a Spark DataFrame\nelif newer_pyspark_available and isinstance(df, pyspark.sql.connect.dataframe.DataFrame):\n    pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n    df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n    df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n    df = spark.createDataFrame(df)\nelse:\n    msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n    raise Exception(msg)\n\nwriter = (\n    df.write\n        .mode(\"overwrite\")\n        .option(\"overwriteSchema\", \"true\")\n        .format(\"{{ file_format }}\")\n{%- if location_root is not none -%}\n{%- set model_path = adapter.compute_external_path(config, model, True) %}\n        .option(\"path\", \"{{ model_path }}\")\n{%- endif -%}\n)\n\nwriter.saveAsTable(\"{{ relation.render() }}\")\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.py_try_import"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.248611, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_column_comment": {"name": "databricks__alter_column_comment", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.databricks__alter_column_comment", "macro_sql": "{% macro databricks__alter_column_comment(relation, column_dict) %}\n  {% set file_format = config.get('file_format', default='delta') %}\n  {% if file_format in ['delta', 'hudi'] %}\n    {% for column in column_dict.values() %}\n      {% set comment = column['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set column_path = relation.render() ~ '.' ~ api.Column.get_name(column) %}\n      {{ run_query_as(comment_on_column_sql(column_path, escaped_comment), 'alter_column_comment', fetch_result=False) }}\n    {% endfor %}\n  {% else %}\n    {{ log('WARNING - requested to update column comments, but file format ' ~ file_format ~ ' does not support that.') }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.comment_on_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.24964, "supported_languages": null}, "macro.dbt_databricks.comment_on_column_sql": {"name": "comment_on_column_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.comment_on_column_sql", "macro_sql": "{% macro comment_on_column_sql(column_path, escaped_comment) %}\nCOMMENT ON COLUMN {{ column_path }} IS '{{ escaped_comment }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2497542, "supported_languages": null}, "macro.dbt_databricks.databricks__persist_docs": {"name": "databricks__persist_docs", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.databricks__persist_docs", "macro_sql": "{% macro databricks__persist_docs(relation, model, for_relation, for_columns) -%}\n  {%- if for_relation and config.persist_relation_docs() and model.description %}\n    {{ run_query_as(alter_relation_comment_sql(relation, model.description), 'alter_relation_comment', fetch_result=False) }}\n  {% endif %}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {%- set existing_columns = adapter.get_columns_in_relation(relation) -%}\n    {%- set columns_to_persist_docs = adapter.get_persist_doc_columns(existing_columns, model.columns) -%}\n    {{ alter_column_comment(relation, columns_to_persist_docs) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.alter_relation_comment_sql", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.250253, "supported_languages": null}, "macro.dbt_databricks.alter_relation_comment_sql": {"name": "alter_relation_comment_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.alter_relation_comment_sql", "macro_sql": "{% macro alter_relation_comment_sql(relation, description) %}\nCOMMENT ON {{ relation.type.upper() }} {{ relation.render() }} IS '{{ description | replace(\"'\", \"\\\\'\") }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.250444, "supported_languages": null}, "macro.dbt_databricks.alter_column_comments": {"name": "alter_column_comments", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt_databricks.alter_column_comments", "macro_sql": "{% macro alter_column_comments(relation, column_dict) %}\n  {% for column, comment in column_dict.items() %}\n    {{ log('Updating comment for column ' ~ column ~ ' with comment ' ~ comment) }}\n    {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n    {% set column_path = relation.render() ~ '.' ~ column %}\n    {{ run_query_as(comment_on_column_sql(column_path, escaped_comment), 'main', fetch_result=False) }}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.comment_on_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.25086, "supported_languages": null}, "macro.dbt_databricks.databricks__list_relations_without_caching": {"name": "databricks__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__list_relations_without_caching", "macro_sql": "{% macro databricks__list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.get_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.251585, "supported_languages": null}, "macro.dbt_databricks.show_table_extended": {"name": "show_table_extended", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_table_extended", "macro_sql": "{% macro show_table_extended(schema_relation) %}\n  {{ return(adapter.dispatch('show_table_extended', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_table_extended"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.251735, "supported_languages": null}, "macro.dbt_databricks.databricks__show_table_extended": {"name": "databricks__show_table_extended", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__show_table_extended", "macro_sql": "{% macro databricks__show_table_extended(schema_relation) %}\n  {{ return(run_query_as(show_table_extended_sql(schema_relation), 'show_table_extended')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.show_table_extended_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.251883, "supported_languages": null}, "macro.dbt_databricks.show_table_extended_sql": {"name": "show_table_extended_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_table_extended_sql", "macro_sql": "{% macro show_table_extended_sql(schema_relation) %}\nSHOW TABLE EXTENDED IN {{ schema_relation.without_identifier()|lower }} LIKE '{{ schema_relation.identifier|lower }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.25203, "supported_languages": null}, "macro.dbt_databricks.show_tables": {"name": "show_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_tables", "macro_sql": "{% macro show_tables(relation) %}\n  {{ return(adapter.dispatch('show_tables', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_tables"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2521868, "supported_languages": null}, "macro.dbt_databricks.databricks__show_tables": {"name": "databricks__show_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__show_tables", "macro_sql": "{% macro databricks__show_tables(relation) %}\n  {{ return(run_query_as(show_tables_sql(relation), 'show_tables')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.show_tables_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.252341, "supported_languages": null}, "macro.dbt_databricks.show_tables_sql": {"name": "show_tables_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_tables_sql", "macro_sql": "{% macro show_tables_sql(relation) %}\nSHOW TABLES IN {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.252446, "supported_languages": null}, "macro.dbt_databricks.show_views": {"name": "show_views", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_views", "macro_sql": "{% macro show_views(relation) %}\n  {{ return(adapter.dispatch('show_views', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__show_views"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2526011, "supported_languages": null}, "macro.dbt_databricks.databricks__show_views": {"name": "databricks__show_views", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__show_views", "macro_sql": "{% macro databricks__show_views(relation) %}\n  {{ return(run_query_as(show_views_sql(relation), 'show_views')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.show_views_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2528052, "supported_languages": null}, "macro.dbt_databricks.show_views_sql": {"name": "show_views_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.show_views_sql", "macro_sql": "{% macro show_views_sql(relation) %}\nSHOW VIEWS IN {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.252914, "supported_languages": null}, "macro.dbt_databricks.databricks__get_relation_last_modified": {"name": "databricks__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.databricks__get_relation_last_modified", "macro_sql": "{% macro databricks__get_relation_last_modified(information_schema, relations) -%}\n  {% call statement('last_modified', fetch_result=True) %}\n    {{ get_relation_last_modified_sql(information_schema, relations) }}\n  {% endcall %}\n  {{ return(load_result('last_modified')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_databricks.get_relation_last_modified_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.253163, "supported_languages": null}, "macro.dbt_databricks.get_relation_last_modified_sql": {"name": "get_relation_last_modified_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.get_relation_last_modified_sql", "macro_sql": "{% macro get_relation_last_modified_sql(information_schema, relations) %}\n  {% if information_schema.is_hive_metastore() %}\n    {%- for relation in relations -%}\nSELECT\n  '{{ relation.schema }}' AS schema,\n  '{{ relation.identifier }}' AS identifier,\n  max(timestamp) AS last_modified,\n  {{ current_timestamp() }} AS snapshotted_at\n  FROM (DESCRIBE HISTORY {{ relation.schema|lower }}.{{ relation.identifier|lower }})\n      {% if not loop.last %}\nUNION ALL\n      {% endif %}\n    {%- endfor -%}\n  {% else %}\nSELECT\n  table_schema AS schema,\n  table_name AS identifier,\n  last_altered AS last_modified,\n  {{ current_timestamp() }} AS snapshotted_at\nFROM `system`.`information_schema`.`tables`\nWHERE table_catalog = '{{ information_schema.database|lower }}'\n  AND (\n    {%- for relation in relations -%}\n    (table_schema = '{{ relation.schema|lower }}' AND\n    table_name = '{{ relation.identifier|lower }}'){%- if not loop.last %} OR {% endif -%}\n    {%- endfor -%}\n  )\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2537658, "supported_languages": null}, "macro.dbt_databricks.get_view_description": {"name": "get_view_description", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.get_view_description", "macro_sql": "{% macro get_view_description(relation) %}\n  {{ return(run_query_as(get_view_description_sql(relation), 'get_view_description')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.get_view_description_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.253925, "supported_languages": null}, "macro.dbt_databricks.get_view_description_sql": {"name": "get_view_description_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.get_view_description_sql", "macro_sql": "{% macro get_view_description_sql(relation) %}\nSELECT *\nFROM `system`.`information_schema`.`views`\nWHERE table_catalog = '{{ relation.database|lower }}'\n  AND table_schema = '{{ relation.schema|lower }}'\n  AND table_name = '{{ relation.identifier|lower }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2540941, "supported_languages": null}, "macro.dbt_databricks.get_uc_tables": {"name": "get_uc_tables", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.get_uc_tables", "macro_sql": "{% macro get_uc_tables(relation) %}\n  {{ return(run_query_as(get_uc_tables_sql(relation), 'get_uc_tables')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.get_uc_tables_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.254245, "supported_languages": null}, "macro.dbt_databricks.get_uc_tables_sql": {"name": "get_uc_tables_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_databricks.get_uc_tables_sql", "macro_sql": "{% macro get_uc_tables_sql(relation) %}\nSELECT\n  table_name,\n  if(table_type IN ('EXTERNAL', 'MANAGED', 'MANAGED_SHALLOW_CLONE', 'EXTERNAL_SHALLOW_CLONE'), 'table', lower(table_type)) AS table_type,\n  lower(data_source_format) AS file_format,\n  table_owner\nFROM `system`.`information_schema`.`tables`\nWHERE table_catalog = '{{ relation.database|lower }}' \n  AND table_schema = '{{ relation.schema|lower }}'\n  {%- if relation.identifier %}\n  AND table_name = '{{ relation.identifier|lower }}'\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.254473, "supported_languages": null}, "macro.dbt_databricks.get_columns_comments": {"name": "get_columns_comments", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.get_columns_comments", "macro_sql": "{% macro get_columns_comments(relation) -%}\n  {{ return(run_query_as(get_columns_comments_sql(relation), 'get_columns_comments')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.get_columns_comments_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2549682, "supported_languages": null}, "macro.dbt_databricks.get_columns_comments_sql": {"name": "get_columns_comments_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.get_columns_comments_sql", "macro_sql": "{% macro get_columns_comments_sql(relation) %}\nDESCRIBE TABLE {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2550778, "supported_languages": null}, "macro.dbt_databricks.get_columns_comments_via_information_schema": {"name": "get_columns_comments_via_information_schema", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.get_columns_comments_via_information_schema", "macro_sql": "{% macro get_columns_comments_via_information_schema(relation) -%}\n  {{ run_query_as(repair_table_sql(relation), 'repair_table', fetch_result=False) }}\n  {{ return(run_query_as(get_columns_comments_via_information_schema_sql(relation), 'get_columns_comments_via_information_schema')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.repair_table_sql", "macro.dbt_databricks.get_columns_comments_via_information_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.25531, "supported_languages": null}, "macro.dbt_databricks.repair_table_sql": {"name": "repair_table_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.repair_table_sql", "macro_sql": "{% macro repair_table_sql(relation) %}\nREPAIR TABLE {{ relation.render() }} SYNC METADATA\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.25541, "supported_languages": null}, "macro.dbt_databricks.get_columns_comments_via_information_schema_sql": {"name": "get_columns_comments_via_information_schema_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.get_columns_comments_via_information_schema_sql", "macro_sql": "{% macro get_columns_comments_via_information_schema_sql(relation) %}\nSELECT\n  column_name,\n  full_data_type,\n  comment\nFROM `system`.`information_schema`.`columns`\nWHERE\n  table_catalog = '{{ relation.database|lower }}' and\n  table_schema = '{{ relation.schema|lower }}' and \n  table_name = '{{ relation.identifier|lower }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.25557, "supported_languages": null}, "macro.dbt_databricks.databricks__alter_relation_add_remove_columns": {"name": "databricks__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.databricks__alter_relation_add_remove_columns", "macro_sql": "{% macro databricks__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% if remove_columns %}\n    {% if not relation.is_delta %}\n      {{ exceptions.raise_compiler_error('Delta format required for dropping columns from tables') }}\n    {% endif %}\n    {{ run_query_as(drop_columns_sql(relation, remove_columns), 'alter_relation_remove_columns', fetch_result=False) }}\n  {% endif %}\n\n  {% if add_columns %}\n    {% if not relation.is_delta %}\n      {{ exceptions.raise_compiler_error('Delta format required for dropping columns from tables') }}\n    {% endif %}\n    {{ run_query_as(add_columns_sql(relation, add_columns), 'alter_relation_add_columns', fetch_result=False) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.run_query_as", "macro.dbt_databricks.drop_columns_sql", "macro.dbt_databricks.add_columns_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.256072, "supported_languages": null}, "macro.dbt_databricks.drop_columns_sql": {"name": "drop_columns_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.drop_columns_sql", "macro_sql": "{% macro drop_columns_sql(relation, remove_columns) %}\nALTER TABLE {{ relation.render() }} DROP COLUMNS ({{ api.Column.format_remove_column_list(remove_columns) }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.256226, "supported_languages": null}, "macro.dbt_databricks.add_columns_sql": {"name": "add_columns_sql", "resource_type": "macro", "package_name": "dbt_databricks", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_databricks.add_columns_sql", "macro_sql": "{% macro add_columns_sql(relation, add_columns) %}\nALTER TABLE {{ relation.render() }} ADD COLUMNS ({{ api.Column.format_add_column_list(add_columns) }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.256372, "supported_languages": null}, "macro.dbt_spark.tblproperties_clause": {"name": "tblproperties_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.tblproperties_clause", "macro_sql": "{% macro tblproperties_clause() %}\n  {{ return(adapter.dispatch('tblproperties_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__tblproperties_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.259383, "supported_languages": null}, "macro.dbt_spark.spark__tblproperties_clause": {"name": "spark__tblproperties_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__tblproperties_clause", "macro_sql": "{% macro spark__tblproperties_clause() -%}\n  {%- set tblproperties = config.get('tblproperties') -%}\n  {%- if tblproperties is not none %}\n    tblproperties (\n      {%- for prop in tblproperties -%}\n      '{{ prop }}' = '{{ tblproperties[prop] }}' {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.259757, "supported_languages": null}, "macro.dbt_spark.file_format_clause": {"name": "file_format_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.file_format_clause", "macro_sql": "{% macro file_format_clause() %}\n  {{ return(adapter.dispatch('file_format_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__file_format_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2599082, "supported_languages": null}, "macro.dbt_spark.spark__file_format_clause": {"name": "spark__file_format_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__file_format_clause", "macro_sql": "{% macro spark__file_format_clause() %}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n  {%- if file_format is not none %}\n    using {{ file_format }}\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2601302, "supported_languages": null}, "macro.dbt_spark.location_clause": {"name": "location_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.location_clause", "macro_sql": "{% macro location_clause() %}\n  {{ return(adapter.dispatch('location_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__location_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.260273, "supported_languages": null}, "macro.dbt_spark.spark__location_clause": {"name": "spark__location_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__location_clause", "macro_sql": "{% macro spark__location_clause() %}\n  {%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n  {%- set identifier = model['alias'] -%}\n  {%- if location_root is not none %}\n    location '{{ location_root }}/{{ identifier }}'\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2605429, "supported_languages": null}, "macro.dbt_spark.options_clause": {"name": "options_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.options_clause", "macro_sql": "{% macro options_clause() -%}\n  {{ return(adapter.dispatch('options_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__options_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.26068, "supported_languages": null}, "macro.dbt_spark.spark__options_clause": {"name": "spark__options_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__options_clause", "macro_sql": "{% macro spark__options_clause() -%}\n  {%- set options = config.get('options') -%}\n  {%- if config.get('file_format') == 'hudi' -%}\n    {%- set unique_key = config.get('unique_key') -%}\n    {%- if unique_key is not none and options is none -%}\n      {%- set options = {'primaryKey': config.get('unique_key')} -%}\n    {%- elif unique_key is not none and options is not none and 'primaryKey' not in options -%}\n      {%- set _ = options.update({'primaryKey': config.get('unique_key')}) -%}\n    {%- elif options is not none and 'primaryKey' in options and options['primaryKey'] != unique_key -%}\n      {{ exceptions.raise_compiler_error(\"unique_key and options('primaryKey') should be the same column(s).\") }}\n    {%- endif %}\n  {%- endif %}\n\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.261518, "supported_languages": null}, "macro.dbt_spark.comment_clause": {"name": "comment_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.comment_clause", "macro_sql": "{% macro comment_clause() %}\n  {{ return(adapter.dispatch('comment_clause', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.261662, "supported_languages": null}, "macro.dbt_spark.spark__comment_clause": {"name": "spark__comment_clause", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__comment_clause", "macro_sql": "{% macro spark__comment_clause() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n\n  {%- if raw_persist_docs is mapping -%}\n    {%- set raw_relation = raw_persist_docs.get('relation', false) -%}\n      {%- if raw_relation -%}\n      comment '{{ model.description | replace(\"'\", \"\\\\'\") }}'\n      {% endif %}\n  {%- elif raw_persist_docs -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.262044, "supported_languages": null}, "macro.dbt_spark.partition_cols": {"name": "partition_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.partition_cols", "macro_sql": "{% macro partition_cols(label, required=false) %}\n  {{ return(adapter.dispatch('partition_cols', 'dbt')(label, required)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.262218, "supported_languages": null}, "macro.dbt_spark.spark__partition_cols": {"name": "spark__partition_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__partition_cols", "macro_sql": "{% macro spark__partition_cols(label, required=false) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.262654, "supported_languages": null}, "macro.dbt_spark.clustered_cols": {"name": "clustered_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.clustered_cols", "macro_sql": "{% macro clustered_cols(label, required=false) %}\n  {{ return(adapter.dispatch('clustered_cols', 'dbt')(label, required)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__clustered_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.262849, "supported_languages": null}, "macro.dbt_spark.spark__clustered_cols": {"name": "spark__clustered_cols", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__clustered_cols", "macro_sql": "{% macro spark__clustered_cols(label, required=false) %}\n  {%- set cols = config.get('clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- set buckets = config.get('buckets', validator=validation.any[int]) -%}\n  {%- if (cols is not none) and (buckets is not none) %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    ) into {{ buckets }} buckets\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.263448, "supported_languages": null}, "macro.dbt_spark.fetch_tbl_properties": {"name": "fetch_tbl_properties", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.fetch_tbl_properties", "macro_sql": "{% macro fetch_tbl_properties(relation) -%}\n  {% call statement('list_properties', fetch_result=True) -%}\n    SHOW TBLPROPERTIES {{ relation }}\n  {% endcall %}\n  {% do return(load_result('list_properties').table) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2636778, "supported_languages": null}, "macro.dbt_spark.create_temporary_view": {"name": "create_temporary_view", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.create_temporary_view", "macro_sql": "{% macro create_temporary_view(relation, compiled_code) -%}\n  {{ return(adapter.dispatch('create_temporary_view', 'dbt')(relation, compiled_code)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__create_temporary_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2638521, "supported_languages": null}, "macro.dbt_spark.spark__create_temporary_view": {"name": "spark__create_temporary_view", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_temporary_view", "macro_sql": "{% macro spark__create_temporary_view(relation, compiled_code) -%}\n    create or replace temporary view {{ relation }} as\n      {{ compiled_code }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.263967, "supported_languages": null}, "macro.dbt_spark.spark__create_table_as": {"name": "spark__create_table_as", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_table_as", "macro_sql": "{%- macro spark__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- if temporary -%}\n      {{ create_temporary_view(relation, compiled_code) }}\n    {%- else -%}\n      {% if config.get('file_format', validator=validation.any[basestring]) in ['delta', 'iceberg'] %}\n        create or replace table {{ relation }}\n      {% else %}\n        create table {{ relation }}\n      {% endif %}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% endif %}\n      {{ file_format_clause() }}\n      {{ options_clause() }}\n      {{ tblproperties_clause() }}\n      {{ partition_cols(label=\"partitioned by\") }}\n      {{ clustered_cols(label=\"clustered by\") }}\n      {{ location_clause() }}\n      {{ comment_clause() }}\n\n      as\n      {{ compiled_code }}\n    {%- endif -%}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation) }}\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt_spark.file_format_clause", "macro.dbt_spark.options_clause", "macro.dbt_spark.tblproperties_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt_spark.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2649431, "supported_languages": null}, "macro.dbt_spark.persist_constraints": {"name": "persist_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.persist_constraints", "macro_sql": "{% macro persist_constraints(relation, model) %}\n  {{ return(adapter.dispatch('persist_constraints', 'dbt')(relation, model)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.265131, "supported_languages": null}, "macro.dbt_spark.spark__persist_constraints": {"name": "spark__persist_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__persist_constraints", "macro_sql": "{% macro spark__persist_constraints(relation, model) %}\n  {%- set contract_config = config.get('contract') -%}\n  {% if contract_config.enforced and config.get('file_format', 'delta') == 'delta' %}\n    {% do alter_table_add_constraints(relation, model.constraints) %}\n    {% do alter_column_set_constraints(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.alter_table_add_constraints", "macro.dbt_spark.alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.265485, "supported_languages": null}, "macro.dbt_spark.alter_table_add_constraints": {"name": "alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.alter_table_add_constraints", "macro_sql": "{% macro alter_table_add_constraints(relation, constraints) %}\n  {{ return(adapter.dispatch('alter_table_add_constraints', 'dbt')(relation, constraints)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_table_add_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.265667, "supported_languages": null}, "macro.dbt_spark.spark__alter_table_add_constraints": {"name": "spark__alter_table_add_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_table_add_constraints", "macro_sql": "{% macro spark__alter_table_add_constraints(relation, constraints) %}\n  {% for constraint in constraints %}\n    {% if constraint.type == 'check' and not is_incremental() %}\n      {%- set constraint_hash = local_md5(column_name ~ \";\" ~ constraint.expression ~ \";\" ~ loop.index) -%}\n      {% call statement() %}\n        alter table {{ relation }} add constraint {{ constraint.name if constraint.name else constraint_hash }} check ({{ constraint.expression }});\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2661161, "supported_languages": null}, "macro.dbt_spark.alter_column_set_constraints": {"name": "alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.alter_column_set_constraints", "macro_sql": "{% macro alter_column_set_constraints(relation, column_dict) %}\n  {{ return(adapter.dispatch('alter_column_set_constraints', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_set_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2663019, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_set_constraints": {"name": "spark__alter_column_set_constraints", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_set_constraints", "macro_sql": "{% macro spark__alter_column_set_constraints(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set constraints = column_dict[column_name]['constraints'] %}\n    {% for constraint in constraints %}\n      {% if constraint.type != 'not_null' %}\n        {{ exceptions.warn('Invalid constraint for column ' ~ column_name ~ '. Only `not_null` is supported.') }}\n      {% else %}\n        {% set quoted_name = adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name %}\n        {% call statement() %}\n          alter table {{ relation }} change column {{ quoted_name }} set not null {{ constraint.expression or \"\" }};\n        {% endcall %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2669141, "supported_languages": null}, "macro.dbt_spark.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if column_name in column_dict and column_dict[column_name][\"description\"] -%}\n    {% set escaped_description = column_dict[column_name][\"description\"] | replace(\"'\", \"\\\\'\") %}\n    {% set column_comment_clause = \"comment '\" ~ escaped_description ~ \"'\" %}\n  {%- endif -%}\n  {{ adapter.quote(column_name) }} {{ column_comment_clause }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.267293, "supported_languages": null}, "macro.dbt_spark.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.267512, "supported_languages": null}, "macro.dbt_spark.spark__create_view_as": {"name": "spark__create_view_as", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_view_as", "macro_sql": "{% macro spark__create_view_as(relation, sql) -%}\n  create or replace view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    (\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    )\n  {% endif %}\n  {{ comment_clause() }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_spark.get_persist_docs_column_list", "macro.dbt_spark.comment_clause", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.267974, "supported_languages": null}, "macro.dbt_spark.spark__create_schema": {"name": "spark__create_schema", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__create_schema", "macro_sql": "{% macro spark__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{relation}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.268126, "supported_languages": null}, "macro.dbt_spark.spark__drop_schema": {"name": "spark__drop_schema", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__drop_schema", "macro_sql": "{% macro spark__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.268256, "supported_languages": null}, "macro.dbt_spark.get_columns_in_relation_raw": {"name": "get_columns_in_relation_raw", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.get_columns_in_relation_raw", "macro_sql": "{% macro get_columns_in_relation_raw(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation_raw', 'dbt')(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation_raw"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.268401, "supported_languages": null}, "macro.dbt_spark.spark__get_columns_in_relation_raw": {"name": "spark__get_columns_in_relation_raw", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__get_columns_in_relation_raw", "macro_sql": "{% macro spark__get_columns_in_relation_raw(relation) -%}\n  {% call statement('get_columns_in_relation_raw', fetch_result=True) %}\n      describe extended {{ relation }}\n  {% endcall %}\n  {% do return(load_result('get_columns_in_relation_raw').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.268611, "supported_languages": null}, "macro.dbt_spark.spark__get_columns_in_relation": {"name": "spark__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__get_columns_in_relation", "macro_sql": "{% macro spark__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      describe extended {{ relation.include(schema=(schema is not none)) }}\n  {% endcall %}\n  {% do return(load_result('get_columns_in_relation').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.268874, "supported_languages": null}, "macro.dbt_spark.spark__list_relations_without_caching": {"name": "spark__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__list_relations_without_caching", "macro_sql": "{% macro spark__list_relations_without_caching(relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    show table extended in {{ relation.schema }} like '*'\n  {% endcall %}\n\n  {% do return(load_result('list_relations_without_caching').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.269096, "supported_languages": null}, "macro.dbt_spark.list_relations_show_tables_without_caching": {"name": "list_relations_show_tables_without_caching", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.list_relations_show_tables_without_caching", "macro_sql": "{% macro list_relations_show_tables_without_caching(schema_relation) %}\n  {#-- Spark with iceberg tables don't work with show table extended for #}\n  {#-- V2 iceberg tables #}\n  {#-- https://issues.apache.org/jira/browse/SPARK-33393 #}\n  {% call statement('list_relations_without_caching_show_tables', fetch_result=True) -%}\n    show tables in {{ schema_relation.schema }} like '*'\n  {% endcall %}\n\n  {% do return(load_result('list_relations_without_caching_show_tables').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.269336, "supported_languages": null}, "macro.dbt_spark.describe_table_extended_without_caching": {"name": "describe_table_extended_without_caching", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.describe_table_extended_without_caching", "macro_sql": "{% macro describe_table_extended_without_caching(table_name) %}\n  {#-- Spark with iceberg tables don't work with show table extended for #}\n  {#-- V2 iceberg tables #}\n  {#-- https://issues.apache.org/jira/browse/SPARK-33393 #}\n  {% call statement('describe_table_extended_without_caching', fetch_result=True) -%}\n    describe extended {{ table_name }}\n  {% endcall %}\n  {% do return(load_result('describe_table_extended_without_caching').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.269568, "supported_languages": null}, "macro.dbt_spark.spark__list_schemas": {"name": "spark__list_schemas", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__list_schemas", "macro_sql": "{% macro spark__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    show databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2697752, "supported_languages": null}, "macro.dbt_spark.spark__rename_relation": {"name": "spark__rename_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__rename_relation", "macro_sql": "{% macro spark__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    {% if not from_relation.type %}\n      {% do exceptions.raise_database_error(\"Cannot rename a relation with a blank type: \" ~ from_relation.identifier) %}\n    {% elif from_relation.type in ('table') %}\n        alter table {{ from_relation }} rename to {{ to_relation }}\n    {% elif from_relation.type == 'view' %}\n        alter view {{ from_relation }} rename to {{ to_relation }}\n    {% else %}\n      {% do exceptions.raise_database_error(\"Unknown type '\" ~ from_relation.type ~ \"' for relation: \" ~ from_relation.identifier) %}\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2703419, "supported_languages": null}, "macro.dbt_spark.spark__drop_relation": {"name": "spark__drop_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__drop_relation", "macro_sql": "{% macro spark__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2705312, "supported_languages": null}, "macro.dbt_spark.spark__generate_database_name": {"name": "spark__generate_database_name", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__generate_database_name", "macro_sql": "{% macro spark__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.270668, "supported_languages": null}, "macro.dbt_spark.spark__persist_docs": {"name": "spark__persist_docs", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__persist_docs", "macro_sql": "{% macro spark__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.270899, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_comment": {"name": "spark__alter_column_comment", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_comment", "macro_sql": "{% macro spark__alter_column_comment(relation, column_dict) %}\n  {% if config.get('file_format', validator=validation.any[basestring]) in ['delta', 'hudi', 'iceberg'] %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set comment_query %}\n        {% if relation.is_iceberg %}\n          alter table {{ relation }} alter column\n              {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n              comment '{{ escaped_comment }}';\n        {% else %}\n          alter table {{ relation }} change column\n              {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n              comment '{{ escaped_comment }}';\n        {% endif %}\n      {% endset %}\n      {% do run_query(comment_query) %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.271702, "supported_languages": null}, "macro.dbt_spark.spark__make_temp_relation": {"name": "spark__make_temp_relation", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__make_temp_relation", "macro_sql": "{% macro spark__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(path = {\n        \"identifier\": tmp_identifier\n    }) -%}\n\n    {%- set tmp_relation = tmp_relation.include(database=false, schema=false) -%}\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.272044, "supported_languages": null}, "macro.dbt_spark.spark__alter_column_type": {"name": "spark__alter_column_type", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_column_type", "macro_sql": "{% macro spark__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter column {{ column_name }} type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2722409, "supported_languages": null}, "macro.dbt_spark.spark__alter_relation_add_remove_columns": {"name": "spark__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_spark.spark__alter_relation_add_remove_columns", "macro_sql": "{% macro spark__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if remove_columns %}\n    {% if relation.is_delta %}\n      {% set platform_name = 'Delta Lake' %}\n    {% elif relation.is_iceberg %}\n      {% set platform_name = 'Iceberg' %}\n    {% else %}\n      {% set platform_name = 'Apache Spark' %}\n    {% endif %}\n    {{ exceptions.raise_compiler_error(platform_name + ' does not support dropping columns from tables') }}\n  {% endif %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n       {% if add_columns %} add columns {% endif %}\n            {% for column in add_columns %}\n               {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.272985, "supported_languages": null}, "macro.dbt_spark.spark__copy_grants": {"name": "spark__copy_grants", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__copy_grants", "macro_sql": "{% macro spark__copy_grants() %}\n\n    {% if config.materialized == 'view' %}\n        {#-- Spark views don't copy grants when they're replaced --#}\n        {{ return(False) }}\n\n    {% else %}\n      {#-- This depends on how we're replacing the table, which depends on its file format\n        -- Just play it safe by assuming that grants have been copied over, and need to be checked / possibly revoked\n        -- We can make this more efficient in the future\n      #}\n        {{ return(True) }}\n\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.27344, "supported_languages": null}, "macro.dbt_spark.spark__get_grant_sql": {"name": "spark__get_grant_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__get_grant_sql", "macro_sql": "\n\n\n{%- macro spark__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ adapter.quote(grantees[0]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.273621, "supported_languages": null}, "macro.dbt_spark.spark__get_revoke_sql": {"name": "spark__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__get_revoke_sql", "macro_sql": "\n\n\n{%- macro spark__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ adapter.quote(grantees[0]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.273803, "supported_languages": null}, "macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement": {"name": "spark__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n\n{%- macro spark__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.273897, "supported_languages": null}, "macro.dbt_spark.spark__call_dcl_statements": {"name": "spark__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_spark.spark__call_dcl_statements", "macro_sql": "{% macro spark__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n        {% call statement('grant_or_revoke') %}\n            {{ dcl_statement }}\n        {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.27408, "supported_languages": null}, "macro.dbt_spark.spark__get_binding_char": {"name": "spark__get_binding_char", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__get_binding_char", "macro_sql": "{% macro spark__get_binding_char() %}\n  {{ return('?' if target.method == 'odbc' else '%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.27471, "supported_languages": null}, "macro.dbt_spark.spark__reset_csv_table": {"name": "spark__reset_csv_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__reset_csv_table", "macro_sql": "{% macro spark__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% if old_relation %}\n        {{ adapter.drop_relation(old_relation) }}\n    {% endif %}\n    {% set sql = create_csv_table(model, agate_table) %}\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.274973, "supported_languages": null}, "macro.dbt_spark.spark__load_csv_rows": {"name": "spark__load_csv_rows", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__load_csv_rows", "macro_sql": "{% macro spark__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} values\n          {% for row in chunk -%}\n              ({%- for col_name in agate_table.column_names -%}\n                  {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                  {%- set type = column_override.get(col_name, inferred_type) -%}\n                    cast({{ get_binding_char() }} as {{type}})\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.276212, "supported_languages": null}, "macro.dbt_spark.spark__create_csv_table": {"name": "spark__create_csv_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_spark.spark__create_csv_table", "macro_sql": "{% macro spark__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.277127, "supported_languages": null}, "macro.dbt_spark.materialization_view_spark": {"name": "materialization_view_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_spark.materialization_view_spark", "macro_sql": "{% materialization view, adapter='spark' -%}\n    {{ return(create_or_replace_view()) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.277299, "supported_languages": ["sql"]}, "macro.dbt_spark.materialization_table_spark": {"name": "materialization_table_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_spark.materialization_table_spark", "macro_sql": "{% materialization table, adapter = 'spark', supported_languages=['sql', 'python'] %}\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- setup: if the target relation already exists, drop it\n  -- in case if the existing and future table is delta or iceberg, we want to do a\n  -- create or replace table instead of dropping, so we don't have the table unavailable\n  {% if old_relation is not none %}\n    {% set is_delta = (old_relation.is_delta and config.get('file_format', validator=validation.any[basestring]) == 'delta') %}\n    {% set is_iceberg = (old_relation.is_iceberg and config.get('file_format', validator=validation.any[basestring]) == 'iceberg') %}\n    {% set old_relation_type = old_relation.type %}\n  {% else %}\n    {% set is_delta = false %}\n    {% set is_iceberg = false %}\n    {% set old_relation_type = target_relation.type %}\n  {% endif %}\n\n  {% if not is_delta and not is_iceberg %}\n    {% set existing_relation = target_relation %}\n    {{ adapter.drop_relation(existing_relation.incorporate(type=old_relation_type)) }}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do persist_constraints(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]})}}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_spark.persist_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2793689, "supported_languages": ["sql", "python"]}, "macro.dbt_spark.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_spark.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n{{ compiled_code }}\n# --- Autogenerated dbt materialization code. --- #\ndbt = dbtObj(spark.table)\ndf = model(dbt, spark)\n\n# make sure pyspark exists in the namepace, for 7.3.x-scala2.12 it does not exist\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write.mode(\"overwrite\").format(\"{{ config.get('file_format', 'delta') }}\").option(\"overwriteSchema\", \"true\").saveAsTable(\"{{ target_relation }}\")\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.279664, "supported_languages": null}, "macro.dbt_spark.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_spark.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# how to execute python model in notebook\n# dbt = dbtObj(spark.table)\n# df = model(dbt, spark)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.279736, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_hash_arguments": {"name": "spark__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_hash_arguments", "macro_sql": "{% macro spark__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as string ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.281128, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_string_as_time": {"name": "spark__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_string_as_time", "macro_sql": "{% macro spark__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.281271, "supported_languages": null}, "macro.dbt_spark.spark__snapshot_merge_sql": {"name": "spark__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__snapshot_merge_sql", "macro_sql": "{% macro spark__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    {% if target.is_iceberg %}\n      {# create view only supports a name (no catalog, or schema) #}\n      using {{ source.identifier }} as DBT_INTERNAL_SOURCE\n    {% else %}\n      using {{ source }} as DBT_INTERNAL_SOURCE\n    {% endif %}\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n       and ( DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or\n             DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null )\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert *\n    ;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.281823, "supported_languages": null}, "macro.dbt_spark.spark_build_snapshot_staging_table": {"name": "spark_build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark_build_snapshot_staging_table", "macro_sql": "{% macro spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' %}\n\n    {% if target_relation.is_iceberg %}\n      {# iceberg catalog does not support create view, but regular spark does. We removed the catalog and schema #}\n      {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                    schema=none,\n                                                    database=none,\n                                                    type='view') -%}\n    {% else %}\n      {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                    schema=target_relation.schema,\n                                                    database=none,\n                                                    type='view') -%}\n    {% endif %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {# needs to be a non-temp view so that its columns can be ascertained via `describe` #}\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_view_as(tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.282453, "supported_languages": null}, "macro.dbt_spark.spark__post_snapshot": {"name": "spark__post_snapshot", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__post_snapshot", "macro_sql": "{% macro spark__post_snapshot(staging_relation) %}\n    {% do adapter.drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.28257, "supported_languages": null}, "macro.dbt_spark.spark__create_columns": {"name": "spark__create_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.spark__create_columns", "macro_sql": "{% macro spark__create_columns(relation, columns) %}\n    {% if columns|length > 0 %}\n    {% call statement() %}\n      alter table {{ relation }} add columns (\n        {% for column in columns %}\n          `{{ column.name }}` {{ column.data_type }} {{- ',' if not loop.last -}}\n        {% endfor %}\n      );\n    {% endcall %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.282888, "supported_languages": null}, "macro.dbt_spark.materialization_snapshot_spark": {"name": "materialization_snapshot_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_spark.materialization_snapshot_spark", "macro_sql": "{% materialization snapshot, adapter='spark' %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format') or 'parquet' -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if file_format not in ['delta', 'iceberg', 'hudi'] -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta' or 'iceberg' or 'hudi'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta and not target_relation.is_iceberg and not target_relation.is_hudi -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta' or 'iceberg' or 'hudi'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.schema) %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set staging_table = spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.create_schema", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt_spark.spark_build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.286256, "supported_languages": ["sql"]}, "macro.dbt_spark.spark__can_clone_table": {"name": "spark__can_clone_table", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_spark.spark__can_clone_table", "macro_sql": "{% macro spark__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.286839, "supported_languages": null}, "macro.dbt_spark.spark__create_or_replace_clone": {"name": "spark__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_spark.spark__create_or_replace_clone", "macro_sql": "{% macro spark__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} shallow clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.286957, "supported_languages": null}, "macro.dbt_spark.materialization_clone_spark": {"name": "materialization_clone_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_spark.materialization_clone_spark", "macro_sql": "\n\n{%- materialization clone, adapter='spark' -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if file_format != 'delta' -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      shallow clone requires file_format be set to 'delta'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {%- elif other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n  {% endif %}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.288692, "supported_languages": ["sql"]}, "macro.dbt_spark.spark__get_merge_update_columns": {"name": "spark__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/column_helpers.sql", "original_file_path": "macros/materializations/incremental/column_helpers.sql", "unique_id": "macro.dbt_spark.spark__get_merge_update_columns", "macro_sql": "{% macro spark__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = None -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.289419, "supported_languages": null}, "macro.dbt_spark.dbt_spark_validate_get_file_format": {"name": "dbt_spark_validate_get_file_format", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_spark.dbt_spark_validate_get_file_format", "macro_sql": "{% macro dbt_spark_validate_get_file_format(raw_file_format) %}\n  {#-- Validate the file format #}\n\n  {% set accepted_formats = ['text', 'csv', 'json', 'jdbc', 'parquet', 'orc', 'hive', 'delta', 'iceberg', 'libsvm', 'hudi'] %}\n\n  {% set invalid_file_format_msg -%}\n    Invalid file format provided: {{ raw_file_format }}\n    Expected one of: {{ accepted_formats | join(', ') }}\n  {%- endset %}\n\n  {% if raw_file_format not in accepted_formats %}\n    {% do exceptions.raise_compiler_error(invalid_file_format_msg) %}\n  {% endif %}\n\n  {% do return(raw_file_format) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2902348, "supported_languages": null}, "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy": {"name": "dbt_spark_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "unique_id": "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) %}\n  {#-- Validate the incremental strategy #}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    Expected one of: 'append', 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n\n  {% set invalid_merge_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You can only choose this strategy when file_format is set to 'delta' or 'iceberg' or 'hudi'\n  {%- endset %}\n\n  {% set invalid_insert_overwrite_endpoint_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when connecting via endpoint\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n\n  {% if raw_strategy not in ['append', 'merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {%-else %}\n    {% if raw_strategy == 'merge' and file_format not in ['delta', 'iceberg', 'hudi'] %}\n      {% do exceptions.raise_compiler_error(invalid_merge_msg) %}\n    {% endif %}\n    {% if raw_strategy in ['insert_overwrite', 'microbatch'] and target.endpoint %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_endpoint_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.291002, "supported_languages": null}, "macro.dbt_spark.get_insert_overwrite_sql": {"name": "get_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.get_insert_overwrite_sql", "macro_sql": "{% macro get_insert_overwrite_sql(source_relation, target_relation, existing_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% if existing_relation.is_iceberg %}\n      {# removed table from statement for iceberg #}\n      insert overwrite {{ target_relation }}\n      {# removed partition_cols for iceberg as well #}\n    {% else %}\n      insert overwrite table {{ target_relation }}\n      {{ partition_cols(label=\"partition\") }}\n    {% endif %}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2920918, "supported_languages": null}, "macro.dbt_spark.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert into table {{ target_relation }}\n    select {{dest_cols_csv}} from {{ source_relation }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.292347, "supported_languages": null}, "macro.dbt_spark.spark__get_merge_sql": {"name": "spark__get_merge_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.spark__get_merge_sql", "macro_sql": "{% macro spark__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n  {# need dest_columns for merge_exclude_columns, default to use \"*\" #}\n  {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n  {%- set dest_columns = adapter.get_columns_in_relation(target) -%}\n  {%- set merge_update_columns = config.get('merge_update_columns') -%}\n  {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n  {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n\n  {% if unique_key %}\n      {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n          {% for key in unique_key %}\n              {% set this_key_match %}\n                  DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n              {% endset %}\n              {% do predicates.append(this_key_match) %}\n          {% endfor %}\n      {% else %}\n          {% set unique_key_match %}\n              DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n          {% endset %}\n          {% do predicates.append(unique_key_match) %}\n      {% endif %}\n  {% else %}\n      {% do predicates.append('FALSE') %}\n  {% endif %}\n\n  {{ sql_header if sql_header is not none }}\n\n  merge into {{ target }} as DBT_INTERNAL_DEST\n      using {{ source }} as DBT_INTERNAL_SOURCE\n      on {{ predicates | join(' and ') }}\n\n      when matched then update set\n        {% if update_columns -%}{%- for column_name in update_columns %}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n        {%- else %} * {% endif %}\n\n      when not matched then insert *\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.293504, "supported_languages": null}, "macro.dbt_spark.dbt_spark_get_incremental_sql": {"name": "dbt_spark_get_incremental_sql", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_spark.dbt_spark_get_incremental_sql", "macro_sql": "{% macro dbt_spark_get_incremental_sql(strategy, source, target, existing, unique_key, incremental_predicates) %}\n  {%- if strategy == 'append' -%}\n    {#-- insert new records into existing table, without updating or overwriting #}\n    {{ get_insert_into_sql(source, target) }}\n  {%- elif strategy == 'insert_overwrite' -%}\n    {#-- insert statements don't like CTEs, so support them via a temp view #}\n    {{ get_insert_overwrite_sql(source, target, existing) }}\n  {%- elif strategy == 'microbatch' -%}\n    {#-- microbatch wraps insert_overwrite, and requires a partition_by config #}\n    {% set missing_partition_key_microbatch_msg -%}\n      dbt-spark 'microbatch' incremental strategy requires a `partition_by` config.\n      Ensure you are using a `partition_by` column that is of grain {{ config.get('batch_size') }}.\n    {%- endset %}\n\n    {%- if not config.get('partition_by') -%}\n      {{ exceptions.raise_compiler_error(missing_partition_key_microbatch_msg) }}\n    {%- endif -%}\n    {{ get_insert_overwrite_sql(source, target, existing) }}\n  {%- elif strategy == 'merge' -%}\n  {#-- merge all columns for datasources which implement MERGE INTO (e.g. databricks, iceberg) - schema changes are handled for us #}\n    {{ get_merge_sql(target, source, unique_key, dest_columns=none, incremental_predicates=incremental_predicates) }}\n  {%- else -%}\n    {% set no_sql_for_strategy_msg -%}\n      No known SQL for the incremental strategy provided: {{ strategy }}\n    {%- endset %}\n    {%- do exceptions.raise_compiler_error(no_sql_for_strategy_msg) -%}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.get_insert_into_sql", "macro.dbt_spark.get_insert_overwrite_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.294367, "supported_languages": null}, "macro.dbt_spark.materialization_incremental_spark": {"name": "materialization_incremental_spark", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_spark.materialization_incremental_spark", "macro_sql": "{% materialization incremental, adapter='spark', supported_languages=['sql', 'python'] -%}\n  {#-- Validate early so we don't run SQL if the file_format + strategy combo is invalid --#}\n  {%- set raw_file_format = config.get('file_format', default='parquet') -%}\n  {%- set raw_strategy = config.get('incremental_strategy') or 'append' -%}\n  {%- set grant_config = config.get('grants') -%}\n\n  {%- set file_format = dbt_spark_validate_get_file_format(raw_file_format) -%}\n  {%- set strategy = dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) -%}\n\n  {#-- Set vars --#}\n\n  {%- set unique_key = config.get('unique_key', none) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {%- set language = model['language'] -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n  {%- set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) -%}\n  {%- set target_relation = this -%}\n  {%- set existing_relation = load_relation(this) -%}\n  {% set tmp_relation = this.incorporate(path = {\"identifier\": this.identifier ~ '__dbt_tmp'}) -%}\n\n  {#-- for SQL model we will create temp view that doesn't have database and schema --#}\n  {%- if language == 'sql'-%}\n    {%- set tmp_relation = tmp_relation.include(database=false, schema=false) -%}\n  {%- endif -%}\n\n  {#-- Set Overwrite Mode --#}\n  {%- if strategy in ['insert_overwrite', 'microbatch'] and partition_by -%}\n    {%- call statement() -%}\n      set spark.sql.sources.partitionOverwriteMode = DYNAMIC\n    {%- endcall -%}\n  {%- endif -%}\n\n  {#-- Run pre-hooks --#}\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Incremental run logic --#}\n  {%- if existing_relation is none -%}\n    {#-- Relation must be created --#}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {% do persist_constraints(target_relation, model) %}\n  {%- elif existing_relation.is_view or should_full_refresh() -%}\n    {#-- Relation must be dropped & recreated --#}\n    {% set is_delta = (file_format == 'delta' and existing_relation.is_delta) %}\n    {% if not is_delta %} {#-- If Delta, we will `create or replace` below, so no need to drop --#}\n      {% do adapter.drop_relation(existing_relation) %}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {% do persist_constraints(target_relation, model) %}\n  {%- else -%}\n    {#-- Relation must be merged --#}\n    {%- call statement('create_tmp_relation', language=language) -%}\n      {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n    {%- endcall -%}\n    {%- do process_schema_changes(on_schema_change, tmp_relation, existing_relation) -%}\n    {%- call statement('main') -%}\n      {{ dbt_spark_get_incremental_sql(strategy, tmp_relation, target_relation, existing_relation, unique_key, incremental_predicates) }}\n    {%- endcall -%}\n    {%- if language == 'python' -%}\n      {#--\n      This is yucky.\n      See note in dbt-spark/dbt/include/spark/macros/adapters.sql\n      re: python models and temporary views.\n\n      Also, why do neither drop_relation or adapter.drop_relation work here?!\n      --#}\n      {% call statement('drop_relation') -%}\n        drop table if exists {{ tmp_relation }}\n      {%- endcall %}\n    {%- endif -%}\n  {%- endif -%}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_spark.dbt_spark_validate_get_file_format", "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.load_relation", "macro.dbt.statement", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt_spark.persist_constraints", "macro.dbt.should_full_refresh", "macro.dbt.process_schema_changes", "macro.dbt_spark.dbt_spark_get_incremental_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.2975528, "supported_languages": ["sql", "python"]}, "macro.dbt_spark.spark__date": {"name": "spark__date", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt_spark.spark__date", "macro_sql": "{% macro spark__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'yyyy-MM-dd')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.297874, "supported_languages": null}, "macro.dbt_spark.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt_spark.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.298029, "supported_languages": null}, "macro.dbt_spark.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/assert_not_null.sql", "original_file_path": "macros/utils/assert_not_null.sql", "unique_id": "macro.dbt_spark.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'dbt')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.298291, "supported_languages": null}, "macro.dbt_spark.spark__assert_not_null": {"name": "spark__assert_not_null", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/assert_not_null.sql", "original_file_path": "macros/utils/assert_not_null.sql", "unique_id": "macro.dbt_spark.spark__assert_not_null", "macro_sql": "{% macro spark__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.298455, "supported_languages": null}, "macro.dbt_spark.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_spark.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n\n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n\n        {%- set multiplier -%}\n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n\n        {%- set multiplier -%}\n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.300025, "supported_languages": null}, "macro.dbt_spark.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_spark.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() -%}\n    current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3001332, "supported_languages": null}, "macro.dbt_spark.spark__escape_single_quotes": {"name": "spark__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_spark.spark__escape_single_quotes", "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.300309, "supported_languages": null}, "macro.dbt_spark.spark__listagg": {"name": "spark__listagg", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_spark.spark__listagg", "macro_sql": "{% macro spark__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n  {% if order_by_clause %}\n    {{ exceptions.warn(\"order_by_clause is not supported for listagg on Spark/Databricks\") }}\n  {% endif %}\n\n  {% set collect_list %} collect_list({{ measure }}) {% endset %}\n\n  {% set limited %} slice({{ collect_list }}, 1, {{ limit_num }}) {% endset %}\n\n  {% set collected = limited if limit_num else collect_list %}\n\n  {% set final %} array_join({{ collected }}, {{ delimiter_text }}) {% endset %}\n\n  {% do return(final) %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3009238, "supported_languages": null}, "macro.dbt_spark.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_spark.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n\n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = assert_not_null('date', first_date) %}\n        {% set second_date = assert_not_null('date', second_date) %}\n\n    {%- endif -%}\n\n    {%- if datepart == 'day' -%}\n\n        datediff({{second_date}}, {{first_date}})\n\n    {%- elif datepart == 'week' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n\n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n\n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'quarter' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n\n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n\n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n\n        {%- set divisor -%}\n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', second_date)) }}\n                - {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', second_date)) }}\n                - {{ assert_not_null('to_unix_timestamp', assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n\n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n\n            {% if datepart == 'microsecond' %}\n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)\n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.304051, "supported_languages": null}, "macro.dbt_spark.spark__safe_cast": {"name": "spark__safe_cast", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_spark.spark__safe_cast", "macro_sql": "{% macro spark__safe_cast(field, type) %}\n{%- set field_clean = field.strip('\"').strip(\"'\") if (cast_from_string_unsupported_for(type) and field is string) else field -%}\ncast({{field_clean}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.cast_from_string_unsupported_for"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.304397, "supported_languages": null}, "macro.dbt_spark.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_spark.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower().startswith('array') or type.lower().startswith('map')) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3046222, "supported_languages": null}, "macro.dbt_spark.spark__any_value": {"name": "spark__any_value", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_spark.spark__any_value", "macro_sql": "{% macro spark__any_value(expression) -%}\n    {#-- return any value (non-deterministic)  --#}\n    first({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.304756, "supported_languages": null}, "macro.dbt_spark.spark__array_concat": {"name": "spark__array_concat", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_spark.spark__array_concat", "macro_sql": "{% macro spark__array_concat(array_1, array_2) -%}\n    concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3049002, "supported_languages": null}, "macro.dbt_spark.spark__bool_or": {"name": "spark__bool_or", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_spark.spark__bool_or", "macro_sql": "{% macro spark__bool_or(expression) -%}\n\n    max({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3050308, "supported_languages": null}, "macro.dbt_spark.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_spark.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n\n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n\n    {% endset %}\n\n    {% if part_number >= 0 %}\n\n        {% set split_part_expr %}\n\n        split(\n            {{ string_text }},\n            {{ delimiter_expr }}\n            )[({{ part_number - 1 if part_number > 0 else part_number }})]\n\n        {% endset %}\n\n    {% else %}\n\n        {% set split_part_expr %}\n\n        split(\n            {{ string_text }},\n            {{ delimiter_expr }}\n            )[(\n                length({{ string_text }})\n                - length(\n                    replace({{ string_text }},  {{ delimiter_text }}, '')\n                ) + 1 + {{ part_number }}\n            )]\n\n        {% endset %}\n\n    {% endif %}\n\n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.305761, "supported_languages": null}, "macro.dbt_spark.spark__array_construct": {"name": "spark__array_construct", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_spark.spark__array_construct", "macro_sql": "{% macro spark__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3059258, "supported_languages": null}, "macro.dbt_spark.spark__array_append": {"name": "spark__array_append", "resource_type": "macro", "package_name": "dbt_spark", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_spark.spark__array_append", "macro_sql": "{% macro spark__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.306113, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.306867, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.307039, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.307165, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3072891, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.307413, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.307681, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.307935, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.308193, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.308584, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.309346, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.311216, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.311358, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.311551, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.312393, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.312542, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3126929, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3138912, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.315176, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.317119, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.317358, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.317492, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.317568, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.317688, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3177972, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.317997, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.318207, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.321341, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.321523, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3219671, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3223329, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3228412, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.323211, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.323445, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3237178, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3241868, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.324362, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.324532, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.328067, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.33008, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.330592, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.330852, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3310232, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3315048, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.331773, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.332072, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.333339, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.334816, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.335157, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.335374, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3365, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.336688, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.337203, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.339055, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.340905, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.34166, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3421178, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3426409, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3428302, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.343425, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.344448, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.345969, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.346196, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3468091, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.34704, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.347596, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3480902, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.348662, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.348848, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.348999, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3492322, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3493912, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.349647, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.349806, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.35004, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.350204, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.350335, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.350498, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.350637, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.350883, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.354594, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.355764, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.35679, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.35777, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3584452, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.358644, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3587399, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.358976, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3591099, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3613818, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.363415, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.364293, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.36499, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3651788, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.365574, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.365729, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.365839, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.365952, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.366049, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.366179, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.366273, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.366647, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3667982, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.36782, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.368159, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.368457, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3688362, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3690429, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.369266, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.369568, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.36977, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.370146, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.370446, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.37059, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.37075, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3709, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3713841, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.372384, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3726652, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.372864, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.373079, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.373261, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.373505, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3736699, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.374057, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.374399, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3745651, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.374804, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.375059, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.375307, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3756192, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.375971, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.376221, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.37639, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.376597, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.376698, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.376917, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.377086, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.377331, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.377441, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3776581, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3777752, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.378229, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.378378, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.378607, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.378722, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.378942, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.379062, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.379734, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.379831, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.380241, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.380372, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3804789, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.381529, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.381831, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.382097, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3823009, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3824, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.382615, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.382733, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3829498, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.383067, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.383602, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.38375, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.384091, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.384646, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.385008, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.385171, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.385317, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.385522, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.385621, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.386067, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.386188, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.38711, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.387267, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.387456, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.387671, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.387789, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3880918, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.388223, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.388366, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.388705, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.388949, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3891861, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.389378, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3897989, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.390851, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.391358, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.391587, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.392224, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3931782, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.393759, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3939378, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.394125, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.394188, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.39463, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.395093, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.395276, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.395566, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.395827, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3960488, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.396304, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3964338, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.396636, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3967402, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.397132, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.397506, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.397654, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.39806, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3982668, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3983538, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.398609, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.398742, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.398925, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.398988, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.39921, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.3993258, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.399561, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.399671, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.400052, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.400395, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4006479, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.400795, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.401029, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.401145, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.401417, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4017, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.401908, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4020329, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.40223, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.402358, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4025831, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4026859, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4028869, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.402972, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.403201, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.40331, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.403512, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.403597, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4042182, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.404344, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.404474, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.404594, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.404724, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.404848, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4050229, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.405165, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4052942, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.405416, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.405544, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4056609, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.405791, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4059079, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.406133, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.406241, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.406443, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4065259, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.406785, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4069939, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.407114, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.407422, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.407553, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.407733, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.407978, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.408092, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.408417, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.408672, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4089222, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.409042, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.409324, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.409473, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.409606, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.409751, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_spark.spark__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.410156, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4102762, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4103942, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.410478, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.410801, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.410936, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.410998, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.411129, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.411263, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.411676, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.411786, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.411912, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.412265, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.412411, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.41252, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.412645, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.412749, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.413357, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4134898, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.413792, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4140239, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.414219, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4144871, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4146419, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4148018, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.415017, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.415476, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.41567, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.41579, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.416199, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4165199, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.416845, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.417112, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4173398, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.417515, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.41855, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.418643, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4187741, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.418866, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.419135, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4192839, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.41938, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.41956, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.419724, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4199092, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.42007, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.420255, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.457547, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.457747, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4579709, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4581618, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.459082, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.459432, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4596422, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4598331, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4602208, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4603589, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.460525, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.46066, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4608798, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4612532, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4620101, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.462213, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4623842, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.462592, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.462743, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.462873, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.463084, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4632819, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.463443, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.463694, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4638422, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4639711, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4641201, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4642482, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.464381, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4645061, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.464673, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.464816, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.465858, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.465985, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4662342, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.46641, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4665759, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.46672, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.467703, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4680152, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4681642, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.468439, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_spark.spark__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.468621, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.469155, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_databricks.databricks__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4693608, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4699972, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.472001, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.472438, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4733179, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4734888, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.473569, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.47423, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4743528, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.475111, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.475436, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4758909, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.476366, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.476429, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.476796, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.476995, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.477238, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1750946998.4774761, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.air_boltic.stg_airplanes": ["source.air_boltic.raw.aeroplanes"], "model.air_boltic.stg_customers": ["source.air_boltic.raw.customers"], "model.air_boltic.stg_airplane_models": ["source.air_boltic.raw.aeroplane_models"], "model.air_boltic.stg_customer_groups": ["source.air_boltic.raw.customer_groups"], "model.air_boltic.stg_orders": ["source.air_boltic.raw.orders"], "model.air_boltic.stg_trips": ["source.air_boltic.raw.trips"], "model.air_boltic.weekly_active_customers": ["model.air_boltic.fct_customer_activity"], "model.air_boltic.daily_active_customers": ["model.air_boltic.fct_customer_activity"], "model.air_boltic.monthly_active_customers": ["model.air_boltic.fct_customer_activity"], "model.air_boltic.orders_by_customer_type": ["model.air_boltic.dim_customers", "model.air_boltic.fct_orders"], "model.air_boltic.orders_by_order_category": ["model.air_boltic.fct_orders"], "model.air_boltic.yearly_revenue": ["model.air_boltic.fct_orders"], "model.air_boltic.revenue_by_customer_type": ["model.air_boltic.dim_customers", "model.air_boltic.fct_orders"], "model.air_boltic.monthly_revenue": ["model.air_boltic.fct_orders"], "model.air_boltic.quarterly_revenue": ["model.air_boltic.fct_orders"], "model.air_boltic.revenue_by_route": ["model.air_boltic.fct_orders"], "model.air_boltic.revenue_by_seat": ["model.air_boltic.dim_airplanes", "model.air_boltic.fct_orders"], "model.air_boltic.trips_by_plane_manufacturer": ["model.air_boltic.dim_airplanes", "model.air_boltic.fct_orders"], "model.air_boltic.avg_trip_occupancy_rate": ["model.air_boltic.dim_airplanes", "model.air_boltic.fct_orders"], "model.air_boltic.average_trip_duration": ["model.air_boltic.fct_orders"], "model.air_boltic.avg_trip_cancellation_rate": ["model.air_boltic.fct_orders"], "model.air_boltic.trips_by_plane_size_category": ["model.air_boltic.dim_airplanes", "model.air_boltic.fct_orders"], "model.air_boltic.trips_by_route": ["model.air_boltic.fct_orders"], "model.air_boltic.fct_customer_activity": ["model.air_boltic.stg_orders", "model.air_boltic.stg_trips"], "model.air_boltic.dim_customers": ["model.air_boltic.stg_customer_groups", "model.air_boltic.stg_customers"], "model.air_boltic.dim_airplanes": ["model.air_boltic.stg_airplane_models", "model.air_boltic.stg_airplanes"], "model.air_boltic.fct_orders": ["model.air_boltic.stg_orders", "model.air_boltic.stg_trips"], "test.air_boltic.test_airplane_manufacturer_model_composite_primary_key": ["model.air_boltic.stg_airplane_models"], "test.air_boltic.test_trip_start_at_is_not_equal_to_end_at": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_airplane_models_model.f83d29caeb": ["model.air_boltic.stg_airplane_models"], "test.air_boltic.not_null_stg_airplane_models_manufacturer.0f80552b0b": ["model.air_boltic.stg_airplane_models"], "test.air_boltic.unique_stg_airplanes_airplane_id.c59fa67f41": ["model.air_boltic.stg_airplanes"], "test.air_boltic.not_null_stg_airplanes_airplane_id.348b9a690c": ["model.air_boltic.stg_airplanes"], "test.air_boltic.not_null_stg_airplanes_model.9f927b30c2": ["model.air_boltic.stg_airplanes"], "test.air_boltic.not_null_stg_airplanes_manufacturer.e8b031ef74": ["model.air_boltic.stg_airplanes"], "test.air_boltic.accepted_values_stg_airplanes_manufacturer__boeing__airbus__embraer__bombardier__gulfstream.4ff97a3e11": ["model.air_boltic.stg_airplanes"], "test.air_boltic.unique_stg_customers_customer_id.c7614daada": ["model.air_boltic.stg_customers"], "test.air_boltic.not_null_stg_customers_customer_id.e2cfb1f9aa": ["model.air_boltic.stg_customers"], "test.air_boltic.not_null_stg_customers_customer_group_id.908072d583": ["model.air_boltic.stg_customers"], "test.air_boltic.relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_.05d80c5a76": ["model.air_boltic.stg_customer_groups", "model.air_boltic.stg_customers"], "test.air_boltic.unique_stg_customer_groups_customer_group_id.581355d426": ["model.air_boltic.stg_customer_groups"], "test.air_boltic.not_null_stg_customer_groups_customer_group_id.9f90ecdf19": ["model.air_boltic.stg_customer_groups"], "test.air_boltic.accepted_values_stg_customer_groups_type__company__private_group__organisation__individual.15fbe45834": ["model.air_boltic.stg_customer_groups"], "test.air_boltic.unique_stg_orders_order_id.e3b841c71a": ["model.air_boltic.stg_orders"], "test.air_boltic.not_null_stg_orders_order_id.81cfe2fe64": ["model.air_boltic.stg_orders"], "test.air_boltic.not_null_stg_orders_customer_id.af79d5e4b5": ["model.air_boltic.stg_orders"], "test.air_boltic.relationships_stg_orders_customer_id__customer_id__ref_stg_customers_.430bf21500": ["model.air_boltic.stg_customers", "model.air_boltic.stg_orders"], "test.air_boltic.not_null_stg_orders_trip_id.89c7368716": ["model.air_boltic.stg_orders"], "test.air_boltic.relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.8a07f8c423": ["model.air_boltic.stg_orders", "model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_orders_price.7079003a04": ["model.air_boltic.stg_orders"], "test.air_boltic.accepted_values_stg_orders_price__EUR.a2b8ce6262": ["model.air_boltic.stg_orders"], "test.air_boltic.not_null_stg_orders_currency.42f3ec9cf1": ["model.air_boltic.stg_orders"], "test.air_boltic.accepted_values_stg_orders_status__finished__booked__cancelled.3c7e1d0186": ["model.air_boltic.stg_orders"], "test.air_boltic.accepted_values_stg_orders_order_category__first__business__economy.4b4298f708": ["model.air_boltic.stg_orders"], "test.air_boltic.unique_stg_trips_trip_id.748f5076fb": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_trips_trip_id.159f524fc2": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_trips_airplane_id.d93f4ac91b": ["model.air_boltic.stg_trips"], "test.air_boltic.relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_.eb96b4e4eb": ["model.air_boltic.stg_airplanes", "model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_trips_route.cd0a1ece30": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_trips_start_at_utc.8f92a4b654": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_trips_end_at_utc.497c03ef64": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_trips_duration_hours.7355b13f61": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_stg_trips_duration_category.51682fdcdf": ["model.air_boltic.stg_trips"], "test.air_boltic.accepted_values_stg_trips_duration_category__short__medium__long.2f87b4d135": ["model.air_boltic.stg_trips"], "test.air_boltic.not_null_daily_active_customers_activity_date_utc.6866700bc0": ["model.air_boltic.daily_active_customers"], "test.air_boltic.unique_daily_active_customers_activity_date_utc.ab0622c784": ["model.air_boltic.daily_active_customers"], "test.air_boltic.not_null_daily_active_customers_daily_active_customers.3c011594a7": ["model.air_boltic.daily_active_customers"], "test.air_boltic.not_null_monthly_active_customers_activity_month_utc.07047545fc": ["model.air_boltic.monthly_active_customers"], "test.air_boltic.not_null_monthly_active_customers_monthly_active_customers.2c4c455c1a": ["model.air_boltic.monthly_active_customers"], "test.air_boltic.not_null_weekly_active_customers_activity_week_utc.b44dcc54c9": ["model.air_boltic.weekly_active_customers"], "test.air_boltic.not_null_weekly_active_customers_weekly_active_customers.a4188d5240": ["model.air_boltic.weekly_active_customers"], "test.air_boltic.not_null_orders_by_customer_group_type_customer_group_type.2f85b13739": [], "test.air_boltic.not_null_orders_by_customer_group_type_orders_count.0121e70a59": [], "test.air_boltic.not_null_orders_by_price_category_order_price_category.b54f80cf51": [], "test.air_boltic.not_null_orders_by_price_category_orders_count.e7f9b32eab": [], "test.air_boltic.not_null_monthly_revenue_revenue_recognition_month_utc.b32f905377": ["model.air_boltic.monthly_revenue"], "test.air_boltic.not_null_monthly_revenue_revenue_eur.003aa77f75": ["model.air_boltic.monthly_revenue"], "test.air_boltic.not_null_quarterly_revenue_revenue_recognition_quarter_utc.dba07b2d4a": ["model.air_boltic.quarterly_revenue"], "test.air_boltic.not_null_quarterly_revenue_revenue_eur.1a5c9143b7": ["model.air_boltic.quarterly_revenue"], "test.air_boltic.not_null_yearly_revenue_revenue_recognition_year_utc.1c7d9da201": ["model.air_boltic.yearly_revenue"], "test.air_boltic.not_null_yearly_revenue_revenue_eur.142ca97735": ["model.air_boltic.yearly_revenue"], "test.air_boltic.not_null_revenue_by_customer_group_customer_group_type.91e698a5c5": [], "test.air_boltic.not_null_revenue_by_customer_group_revenue_eur.6c8618c326": [], "test.air_boltic.not_null_revenue_by_route_route.259da291ae": ["model.air_boltic.revenue_by_route"], "test.air_boltic.not_null_revenue_by_route_revenue_eur.b466edc3d9": ["model.air_boltic.revenue_by_route"], "test.air_boltic.not_null_revenue_per_seat_trip_id.168cfa8f44": [], "test.air_boltic.relationships_revenue_per_seat_trip_id__trip_id__ref_dim_orders_.8cbfe73daa": [], "test.air_boltic.not_null_revenue_per_seat_airplane_id.8565d675c7": [], "test.air_boltic.relationships_revenue_per_seat_airplane_id__airplane_id__ref_dim_airplanes_.f300dbdfd3": ["model.air_boltic.dim_airplanes"], "test.air_boltic.not_null_revenue_per_seat_max_seats.ffed1cdcf8": [], "test.air_boltic.not_null_revenue_per_seat_revenue_per_seat_eur.08f04d526c": [], "test.air_boltic.not_null_avg_trip_duration_route.2f38cee8fb": [], "test.air_boltic.not_null_avg_trip_duration_avg_trip_duration_hours.36056714cd": [], "test.air_boltic.not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate.5793da6e9b": ["model.air_boltic.avg_trip_cancellation_rate"], "test.air_boltic.not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate.3cf9e6b037": ["model.air_boltic.avg_trip_occupancy_rate"], "test.air_boltic.not_null_trips_by_plane_manufacturer_airplane_manufacturer.4c00ad991a": ["model.air_boltic.trips_by_plane_manufacturer"], "test.air_boltic.not_null_trips_by_plane_manufacturer_trips_count.4e33e6a6b7": ["model.air_boltic.trips_by_plane_manufacturer"], "test.air_boltic.not_null_trips_by_plane_size_category_airplane_size_category.66b5a8d743": ["model.air_boltic.trips_by_plane_size_category"], "test.air_boltic.not_null_trips_by_plane_size_category_trips_count.28b6ce8f8c": ["model.air_boltic.trips_by_plane_size_category"], "test.air_boltic.not_null_trips_by_route_route.c53b6d8b47": ["model.air_boltic.trips_by_route"], "test.air_boltic.not_null_trips_by_route_trips_count.11db13b119": ["model.air_boltic.trips_by_route"], "test.air_boltic.not_null_dim_airplanes_airplane_id.599e9915fc": ["model.air_boltic.dim_airplanes"], "test.air_boltic.unique_dim_airplanes_airplane_id.dbefb700af": ["model.air_boltic.dim_airplanes"], "test.air_boltic.not_null_dim_customers_customer_id.dd91cd1c8d": ["model.air_boltic.dim_customers"], "test.air_boltic.unique_dim_customers_customer_id.15c9f1e2fd": ["model.air_boltic.dim_customers"], "test.air_boltic.not_null_dim_customers_group_type.0b528c4b8a": ["model.air_boltic.dim_customers"], "test.air_boltic.not_null_fct_orders_order_id.4e687af8d0": ["model.air_boltic.fct_orders"], "test.air_boltic.unique_fct_orders_order_id.523ddb6ce5": ["model.air_boltic.fct_orders"], "test.air_boltic.not_null_fct_orders_customer_id.16fe324f7b": ["model.air_boltic.fct_orders"], "test.air_boltic.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": ["model.air_boltic.dim_customers", "model.air_boltic.fct_orders"], "test.air_boltic.not_null_fct_orders_airplane_id.fbf7fae39c": ["model.air_boltic.fct_orders"], "test.air_boltic.relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_.c0299d113e": ["model.air_boltic.dim_airplanes", "model.air_boltic.fct_orders"], "test.air_boltic.not_null_fct_orders_trip_id.94af7c2e45": ["model.air_boltic.fct_orders"], "test.air_boltic.not_null_fct_orders_revenue_recognition_date_utc.d3e2b0cb81": ["model.air_boltic.fct_orders"], "test.air_boltic.unique_fct_customer_activity_customer_id.4522255ca8": ["model.air_boltic.fct_customer_activity"], "test.air_boltic.not_null_fct_customer_activity_customer_id.5368e5afe7": ["model.air_boltic.fct_customer_activity"], "test.air_boltic.relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_.b5a355b9eb": ["model.air_boltic.dim_customers", "model.air_boltic.fct_customer_activity"], "test.air_boltic.not_null_fct_customer_activity_activity_date_utc.3692e0e1d7": ["model.air_boltic.fct_customer_activity"], "test.air_boltic.unique_fct_customer_activity_activity_date_utc.d188345dd4": ["model.air_boltic.fct_customer_activity"], "source.air_boltic.raw.aeroplane_models": [], "source.air_boltic.raw.aeroplanes": [], "source.air_boltic.raw.cities": [], "source.air_boltic.raw.customers": [], "source.air_boltic.raw.customer_groups": [], "source.air_boltic.raw.orders": [], "source.air_boltic.raw.trips": []}, "child_map": {"model.air_boltic.stg_airplanes": ["model.air_boltic.dim_airplanes", "test.air_boltic.accepted_values_stg_airplanes_manufacturer__boeing__airbus__embraer__bombardier__gulfstream.4ff97a3e11", "test.air_boltic.not_null_stg_airplanes_airplane_id.348b9a690c", "test.air_boltic.not_null_stg_airplanes_manufacturer.e8b031ef74", "test.air_boltic.not_null_stg_airplanes_model.9f927b30c2", "test.air_boltic.relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_.eb96b4e4eb", "test.air_boltic.unique_stg_airplanes_airplane_id.c59fa67f41"], "model.air_boltic.stg_customers": ["model.air_boltic.dim_customers", "test.air_boltic.not_null_stg_customers_customer_group_id.908072d583", "test.air_boltic.not_null_stg_customers_customer_id.e2cfb1f9aa", "test.air_boltic.relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_.05d80c5a76", "test.air_boltic.relationships_stg_orders_customer_id__customer_id__ref_stg_customers_.430bf21500", "test.air_boltic.unique_stg_customers_customer_id.c7614daada"], "model.air_boltic.stg_airplane_models": ["model.air_boltic.dim_airplanes", "test.air_boltic.not_null_stg_airplane_models_manufacturer.0f80552b0b", "test.air_boltic.not_null_stg_airplane_models_model.f83d29caeb", "test.air_boltic.test_airplane_manufacturer_model_composite_primary_key"], "model.air_boltic.stg_customer_groups": ["model.air_boltic.dim_customers", "test.air_boltic.accepted_values_stg_customer_groups_type__company__private_group__organisation__individual.15fbe45834", "test.air_boltic.not_null_stg_customer_groups_customer_group_id.9f90ecdf19", "test.air_boltic.relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_.05d80c5a76", "test.air_boltic.unique_stg_customer_groups_customer_group_id.581355d426"], "model.air_boltic.stg_orders": ["model.air_boltic.fct_customer_activity", "model.air_boltic.fct_orders", "test.air_boltic.accepted_values_stg_orders_order_category__first__business__economy.4b4298f708", "test.air_boltic.accepted_values_stg_orders_price__EUR.a2b8ce6262", "test.air_boltic.accepted_values_stg_orders_status__finished__booked__cancelled.3c7e1d0186", "test.air_boltic.not_null_stg_orders_currency.42f3ec9cf1", "test.air_boltic.not_null_stg_orders_customer_id.af79d5e4b5", "test.air_boltic.not_null_stg_orders_order_id.81cfe2fe64", "test.air_boltic.not_null_stg_orders_price.7079003a04", "test.air_boltic.not_null_stg_orders_trip_id.89c7368716", "test.air_boltic.relationships_stg_orders_customer_id__customer_id__ref_stg_customers_.430bf21500", "test.air_boltic.relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.8a07f8c423", "test.air_boltic.unique_stg_orders_order_id.e3b841c71a"], "model.air_boltic.stg_trips": ["model.air_boltic.fct_customer_activity", "model.air_boltic.fct_orders", "test.air_boltic.accepted_values_stg_trips_duration_category__short__medium__long.2f87b4d135", "test.air_boltic.not_null_stg_trips_airplane_id.d93f4ac91b", "test.air_boltic.not_null_stg_trips_duration_category.51682fdcdf", "test.air_boltic.not_null_stg_trips_duration_hours.7355b13f61", "test.air_boltic.not_null_stg_trips_end_at_utc.497c03ef64", "test.air_boltic.not_null_stg_trips_route.cd0a1ece30", "test.air_boltic.not_null_stg_trips_start_at_utc.8f92a4b654", "test.air_boltic.not_null_stg_trips_trip_id.159f524fc2", "test.air_boltic.relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.8a07f8c423", "test.air_boltic.relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_.eb96b4e4eb", "test.air_boltic.test_trip_start_at_is_not_equal_to_end_at", "test.air_boltic.unique_stg_trips_trip_id.748f5076fb"], "model.air_boltic.weekly_active_customers": ["test.air_boltic.not_null_weekly_active_customers_activity_week_utc.b44dcc54c9", "test.air_boltic.not_null_weekly_active_customers_weekly_active_customers.a4188d5240"], "model.air_boltic.daily_active_customers": ["test.air_boltic.not_null_daily_active_customers_activity_date_utc.6866700bc0", "test.air_boltic.not_null_daily_active_customers_daily_active_customers.3c011594a7", "test.air_boltic.unique_daily_active_customers_activity_date_utc.ab0622c784"], "model.air_boltic.monthly_active_customers": ["test.air_boltic.not_null_monthly_active_customers_activity_month_utc.07047545fc", "test.air_boltic.not_null_monthly_active_customers_monthly_active_customers.2c4c455c1a"], "model.air_boltic.orders_by_customer_type": [], "model.air_boltic.orders_by_order_category": [], "model.air_boltic.yearly_revenue": ["test.air_boltic.not_null_yearly_revenue_revenue_eur.142ca97735", "test.air_boltic.not_null_yearly_revenue_revenue_recognition_year_utc.1c7d9da201"], "model.air_boltic.revenue_by_customer_type": [], "model.air_boltic.monthly_revenue": ["test.air_boltic.not_null_monthly_revenue_revenue_eur.003aa77f75", "test.air_boltic.not_null_monthly_revenue_revenue_recognition_month_utc.b32f905377"], "model.air_boltic.quarterly_revenue": ["test.air_boltic.not_null_quarterly_revenue_revenue_eur.1a5c9143b7", "test.air_boltic.not_null_quarterly_revenue_revenue_recognition_quarter_utc.dba07b2d4a"], "model.air_boltic.revenue_by_route": ["test.air_boltic.not_null_revenue_by_route_revenue_eur.b466edc3d9", "test.air_boltic.not_null_revenue_by_route_route.259da291ae"], "model.air_boltic.revenue_by_seat": [], "model.air_boltic.trips_by_plane_manufacturer": ["test.air_boltic.not_null_trips_by_plane_manufacturer_airplane_manufacturer.4c00ad991a", "test.air_boltic.not_null_trips_by_plane_manufacturer_trips_count.4e33e6a6b7"], "model.air_boltic.avg_trip_occupancy_rate": ["test.air_boltic.not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate.3cf9e6b037"], "model.air_boltic.average_trip_duration": [], "model.air_boltic.avg_trip_cancellation_rate": ["test.air_boltic.not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate.5793da6e9b"], "model.air_boltic.trips_by_plane_size_category": ["test.air_boltic.not_null_trips_by_plane_size_category_airplane_size_category.66b5a8d743", "test.air_boltic.not_null_trips_by_plane_size_category_trips_count.28b6ce8f8c"], "model.air_boltic.trips_by_route": ["test.air_boltic.not_null_trips_by_route_route.c53b6d8b47", "test.air_boltic.not_null_trips_by_route_trips_count.11db13b119"], "model.air_boltic.fct_customer_activity": ["model.air_boltic.daily_active_customers", "model.air_boltic.monthly_active_customers", "model.air_boltic.weekly_active_customers", "test.air_boltic.not_null_fct_customer_activity_activity_date_utc.3692e0e1d7", "test.air_boltic.not_null_fct_customer_activity_customer_id.5368e5afe7", "test.air_boltic.relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_.b5a355b9eb", "test.air_boltic.unique_fct_customer_activity_activity_date_utc.d188345dd4", "test.air_boltic.unique_fct_customer_activity_customer_id.4522255ca8"], "model.air_boltic.dim_customers": ["model.air_boltic.orders_by_customer_type", "model.air_boltic.revenue_by_customer_type", "test.air_boltic.not_null_dim_customers_customer_id.dd91cd1c8d", "test.air_boltic.not_null_dim_customers_group_type.0b528c4b8a", "test.air_boltic.relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_.b5a355b9eb", "test.air_boltic.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4", "test.air_boltic.unique_dim_customers_customer_id.15c9f1e2fd"], "model.air_boltic.dim_airplanes": ["model.air_boltic.avg_trip_occupancy_rate", "model.air_boltic.revenue_by_seat", "model.air_boltic.trips_by_plane_manufacturer", "model.air_boltic.trips_by_plane_size_category", "test.air_boltic.not_null_dim_airplanes_airplane_id.599e9915fc", "test.air_boltic.relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_.c0299d113e", "test.air_boltic.relationships_revenue_per_seat_airplane_id__airplane_id__ref_dim_airplanes_.f300dbdfd3", "test.air_boltic.unique_dim_airplanes_airplane_id.dbefb700af"], "model.air_boltic.fct_orders": ["model.air_boltic.average_trip_duration", "model.air_boltic.avg_trip_cancellation_rate", "model.air_boltic.avg_trip_occupancy_rate", "model.air_boltic.monthly_revenue", "model.air_boltic.orders_by_customer_type", "model.air_boltic.orders_by_order_category", "model.air_boltic.quarterly_revenue", "model.air_boltic.revenue_by_customer_type", "model.air_boltic.revenue_by_route", "model.air_boltic.revenue_by_seat", "model.air_boltic.trips_by_plane_manufacturer", "model.air_boltic.trips_by_plane_size_category", "model.air_boltic.trips_by_route", "model.air_boltic.yearly_revenue", "test.air_boltic.not_null_fct_orders_airplane_id.fbf7fae39c", "test.air_boltic.not_null_fct_orders_customer_id.16fe324f7b", "test.air_boltic.not_null_fct_orders_order_id.4e687af8d0", "test.air_boltic.not_null_fct_orders_revenue_recognition_date_utc.d3e2b0cb81", "test.air_boltic.not_null_fct_orders_trip_id.94af7c2e45", "test.air_boltic.relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_.c0299d113e", "test.air_boltic.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4", "test.air_boltic.unique_fct_orders_order_id.523ddb6ce5"], "test.air_boltic.test_airplane_manufacturer_model_composite_primary_key": [], "test.air_boltic.test_trip_start_at_is_not_equal_to_end_at": [], "test.air_boltic.not_null_stg_airplane_models_model.f83d29caeb": [], "test.air_boltic.not_null_stg_airplane_models_manufacturer.0f80552b0b": [], "test.air_boltic.unique_stg_airplanes_airplane_id.c59fa67f41": [], "test.air_boltic.not_null_stg_airplanes_airplane_id.348b9a690c": [], "test.air_boltic.not_null_stg_airplanes_model.9f927b30c2": [], "test.air_boltic.not_null_stg_airplanes_manufacturer.e8b031ef74": [], "test.air_boltic.accepted_values_stg_airplanes_manufacturer__boeing__airbus__embraer__bombardier__gulfstream.4ff97a3e11": [], "test.air_boltic.unique_stg_customers_customer_id.c7614daada": [], "test.air_boltic.not_null_stg_customers_customer_id.e2cfb1f9aa": [], "test.air_boltic.not_null_stg_customers_customer_group_id.908072d583": [], "test.air_boltic.relationships_stg_customers_customer_group_id__customer_group_id__ref_stg_customer_groups_.05d80c5a76": [], "test.air_boltic.unique_stg_customer_groups_customer_group_id.581355d426": [], "test.air_boltic.not_null_stg_customer_groups_customer_group_id.9f90ecdf19": [], "test.air_boltic.accepted_values_stg_customer_groups_type__company__private_group__organisation__individual.15fbe45834": [], "test.air_boltic.unique_stg_orders_order_id.e3b841c71a": [], "test.air_boltic.not_null_stg_orders_order_id.81cfe2fe64": [], "test.air_boltic.not_null_stg_orders_customer_id.af79d5e4b5": [], "test.air_boltic.relationships_stg_orders_customer_id__customer_id__ref_stg_customers_.430bf21500": [], "test.air_boltic.not_null_stg_orders_trip_id.89c7368716": [], "test.air_boltic.relationships_stg_orders_trip_id__trip_id__ref_stg_trips_.8a07f8c423": [], "test.air_boltic.not_null_stg_orders_price.7079003a04": [], "test.air_boltic.accepted_values_stg_orders_price__EUR.a2b8ce6262": [], "test.air_boltic.not_null_stg_orders_currency.42f3ec9cf1": [], "test.air_boltic.accepted_values_stg_orders_status__finished__booked__cancelled.3c7e1d0186": [], "test.air_boltic.accepted_values_stg_orders_order_category__first__business__economy.4b4298f708": [], "test.air_boltic.unique_stg_trips_trip_id.748f5076fb": [], "test.air_boltic.not_null_stg_trips_trip_id.159f524fc2": [], "test.air_boltic.not_null_stg_trips_airplane_id.d93f4ac91b": [], "test.air_boltic.relationships_stg_trips_airplane_id__airplane_id__ref_stg_airplanes_.eb96b4e4eb": [], "test.air_boltic.not_null_stg_trips_route.cd0a1ece30": [], "test.air_boltic.not_null_stg_trips_start_at_utc.8f92a4b654": [], "test.air_boltic.not_null_stg_trips_end_at_utc.497c03ef64": [], "test.air_boltic.not_null_stg_trips_duration_hours.7355b13f61": [], "test.air_boltic.not_null_stg_trips_duration_category.51682fdcdf": [], "test.air_boltic.accepted_values_stg_trips_duration_category__short__medium__long.2f87b4d135": [], "test.air_boltic.not_null_daily_active_customers_activity_date_utc.6866700bc0": [], "test.air_boltic.unique_daily_active_customers_activity_date_utc.ab0622c784": [], "test.air_boltic.not_null_daily_active_customers_daily_active_customers.3c011594a7": [], "test.air_boltic.not_null_monthly_active_customers_activity_month_utc.07047545fc": [], "test.air_boltic.not_null_monthly_active_customers_monthly_active_customers.2c4c455c1a": [], "test.air_boltic.not_null_weekly_active_customers_activity_week_utc.b44dcc54c9": [], "test.air_boltic.not_null_weekly_active_customers_weekly_active_customers.a4188d5240": [], "test.air_boltic.not_null_orders_by_customer_group_type_customer_group_type.2f85b13739": [], "test.air_boltic.not_null_orders_by_customer_group_type_orders_count.0121e70a59": [], "test.air_boltic.not_null_orders_by_price_category_order_price_category.b54f80cf51": [], "test.air_boltic.not_null_orders_by_price_category_orders_count.e7f9b32eab": [], "test.air_boltic.not_null_monthly_revenue_revenue_recognition_month_utc.b32f905377": [], "test.air_boltic.not_null_monthly_revenue_revenue_eur.003aa77f75": [], "test.air_boltic.not_null_quarterly_revenue_revenue_recognition_quarter_utc.dba07b2d4a": [], "test.air_boltic.not_null_quarterly_revenue_revenue_eur.1a5c9143b7": [], "test.air_boltic.not_null_yearly_revenue_revenue_recognition_year_utc.1c7d9da201": [], "test.air_boltic.not_null_yearly_revenue_revenue_eur.142ca97735": [], "test.air_boltic.not_null_revenue_by_customer_group_customer_group_type.91e698a5c5": [], "test.air_boltic.not_null_revenue_by_customer_group_revenue_eur.6c8618c326": [], "test.air_boltic.not_null_revenue_by_route_route.259da291ae": [], "test.air_boltic.not_null_revenue_by_route_revenue_eur.b466edc3d9": [], "test.air_boltic.not_null_revenue_per_seat_trip_id.168cfa8f44": [], "test.air_boltic.relationships_revenue_per_seat_trip_id__trip_id__ref_dim_orders_.8cbfe73daa": [], "test.air_boltic.not_null_revenue_per_seat_airplane_id.8565d675c7": [], "test.air_boltic.relationships_revenue_per_seat_airplane_id__airplane_id__ref_dim_airplanes_.f300dbdfd3": [], "test.air_boltic.not_null_revenue_per_seat_max_seats.ffed1cdcf8": [], "test.air_boltic.not_null_revenue_per_seat_revenue_per_seat_eur.08f04d526c": [], "test.air_boltic.not_null_avg_trip_duration_route.2f38cee8fb": [], "test.air_boltic.not_null_avg_trip_duration_avg_trip_duration_hours.36056714cd": [], "test.air_boltic.not_null_avg_trip_cancellation_rate_avg_trip_cancellation_rate.5793da6e9b": [], "test.air_boltic.not_null_avg_trip_occupancy_rate_avg_trip_occupancy_rate.3cf9e6b037": [], "test.air_boltic.not_null_trips_by_plane_manufacturer_airplane_manufacturer.4c00ad991a": [], "test.air_boltic.not_null_trips_by_plane_manufacturer_trips_count.4e33e6a6b7": [], "test.air_boltic.not_null_trips_by_plane_size_category_airplane_size_category.66b5a8d743": [], "test.air_boltic.not_null_trips_by_plane_size_category_trips_count.28b6ce8f8c": [], "test.air_boltic.not_null_trips_by_route_route.c53b6d8b47": [], "test.air_boltic.not_null_trips_by_route_trips_count.11db13b119": [], "test.air_boltic.not_null_dim_airplanes_airplane_id.599e9915fc": [], "test.air_boltic.unique_dim_airplanes_airplane_id.dbefb700af": [], "test.air_boltic.not_null_dim_customers_customer_id.dd91cd1c8d": [], "test.air_boltic.unique_dim_customers_customer_id.15c9f1e2fd": [], "test.air_boltic.not_null_dim_customers_group_type.0b528c4b8a": [], "test.air_boltic.not_null_fct_orders_order_id.4e687af8d0": [], "test.air_boltic.unique_fct_orders_order_id.523ddb6ce5": [], "test.air_boltic.not_null_fct_orders_customer_id.16fe324f7b": [], "test.air_boltic.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": [], "test.air_boltic.not_null_fct_orders_airplane_id.fbf7fae39c": [], "test.air_boltic.relationships_fct_orders_airplane_id__airplane_id__ref_dim_airplanes_.c0299d113e": [], "test.air_boltic.not_null_fct_orders_trip_id.94af7c2e45": [], "test.air_boltic.not_null_fct_orders_revenue_recognition_date_utc.d3e2b0cb81": [], "test.air_boltic.unique_fct_customer_activity_customer_id.4522255ca8": [], "test.air_boltic.not_null_fct_customer_activity_customer_id.5368e5afe7": [], "test.air_boltic.relationships_fct_customer_activity_customer_id__customer_id__ref_dim_customers_.b5a355b9eb": [], "test.air_boltic.not_null_fct_customer_activity_activity_date_utc.3692e0e1d7": [], "test.air_boltic.unique_fct_customer_activity_activity_date_utc.d188345dd4": [], "source.air_boltic.raw.aeroplane_models": ["model.air_boltic.stg_airplane_models"], "source.air_boltic.raw.aeroplanes": ["model.air_boltic.stg_airplanes"], "source.air_boltic.raw.cities": [], "source.air_boltic.raw.customers": ["model.air_boltic.stg_customers"], "source.air_boltic.raw.customer_groups": ["model.air_boltic.stg_customer_groups"], "source.air_boltic.raw.orders": ["model.air_boltic.stg_orders"], "source.air_boltic.raw.trips": ["model.air_boltic.stg_trips"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}